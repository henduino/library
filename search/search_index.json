{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selamat Datang di Henduino Library Apa Henduino? Ketika anda membuka halaman situs ini mungkin dalam hati bertanya-tanya, apa itu Henduino? Henduino adalah produk mikrokontroler yang dikembangkan oleh Dede Hendriono dengan dikhususkan pada chip mikrokontroler yang diproduksi oleh perusahaan Atmel dan perusahaan Espressif . Sedangkan konsentrasinya lebih ke turunan Arduino , hal ini agar para Artis Elektronika terbiasa dengan perangkat lunak Arduino IDE. Selain berbasis Arduino, Henduino juga membuat beberapa papan mikrokontroler dengan basis ESP baik ESP8266 maupun ESP32 yang terkenal murah, mudah dan berdaya guna. Namun ada beberapa proyek yang dibuat oleh tim Henduino keluar dari 2 basis mikrokontroler tersebut. Sedangkan situs ini merupakan arsip atau perpustakaan tim Henduino, jadi apa yang tertulis disini bisa berupa ide, rencana, yang sedang dikembangkan atau bahkan produk yang siap untuk digunakan. Apa saja? Ikuti saja perkembangannya disitus ini. Kenapa Arduino dan ESP? Henduino menggunakan basis Arduino dan ESP karena memang papan mikrokontroler ini merupakan papan yang sangat populer baik di Indonesia maupun didunia. Perkembangannya yang pesat telah melahirkan berbagai perangkat keras yang berdaya guna baik untuk kesenangan maupun untuk menghadapi proyek sesungguhnya yang bisa diterapkan sesuai kebutuhan dan tentunya bernilai bisnis yang tinggi. Kebiasaan dan kebutuhan masyarakat dunia yang hampir terbiasa dengan internet membuat produk mikrokontroler hampir dimiliki oleh setiap orang didunia. Disadari atau pun tidak disekitar kita hampir beberapa jenis perangkat itu dibuat dengan basis mikrokontroler, misal remote, sistem pengaman rumah, pembaca suhu dan lain sebagainya. Ini membuat geliat para artis elektronika semakin semangat dan pertumbuhannya semakin banyak, membuat para artis elektronika tidak memiliki pilihan kecuali ikut terjun untuk berkecimpung dalam pengembangan dunia mikrokontroler. Henduino merupakan bagian kecil dari kepedulian terhadap perkembangan mikrokontroler tersebut. Ini sebagai upaya generasi Indonesia untuk menghadap tantangan global perkembangan dunia. Seperti apa Papan Henduino? Papan Henduino dibuat dengan susunan yang mengedepankan kemudahan dan biaya, dengan harapan menjadi Papan Mikrokontroler pertama Indonesia yang murah namun tetap mudah untuk dikembangkan. Walau tidak sempurna namun mudah-mudahan ini mampu jadi pemicu dan membangkitkan kepedulian developer mikrokontroler Indonesia untuk ikut andil terhadap perkembangan dunia mikrokontroler Indonesia. Sebenarnya ada beberapa varian yang sedang dikembangkan tapi karena terbentur masalah pendanaan sehingga baru sedikit yang sudah dibuat dan mulai dikembagkan secara pribadi. Keterbatasan dana ini membuat kami dari tim Henduino baru mampu membuat untuk kebutuhan internal saja tanpa mampu membuat untuk kebutuhan secara umum. Namun bagi siapa saja yang ingin membuat sendiri silahkan ambil datanya dari repository yang kami simpan di GitHub. Beberapa varian Henduino dibuat secara spesifik untuk kebutuhan tertentu yang memudahkan siapa saja untuk membuat proyek mikrokontroler yang langsung siap digunakan. Seperti Henduino R2, HESP IoT R2, dan beberapa varian lainnya. Tunggu terbitnya ya? Apa semua yang dibahas hanya Papan Henduino? Halaman ini bukan halaman khusus Papan Henduino karena hal tersebut tidak relevan dengan semangat open source. Pada halaman ini akan dibahas papan-papan mikrokontroler lain yang memiliki semangat open source, sedangkan papan mikrokontroler yang closed source hanya akan dibahas untuk memancing para pengembang untuk membuat papan lainnya yang memiliki kemampuan sama. Selain papan mikrokontroler pada situs ini juga disertakan perpustakaan ( library ), contoh penggunaan, dan beberapa contoh aplikasinya sehingga memudahkan siapa saja yang ingin belajar mikrokontroler terutama yang berbasis Arduino dan ESP. Dimanakah bisa membeli Papan Henduino? Untuk saat ini Henduino masih dalam tahap pengembangan dan produksi jadi untuk sementara Henduino masih digunakan internal tim Henduino saja. Karena sudah dijelaskan diatas bahwa produksi Henduino membutuhkan dana yang cukup besar dan kami belum memiliki dana sebesar itu. Ini membuat proses produksi masal Papan Henduino menjadi terhambat, dan kami pun belum tahu hingga kapan kami bisa memproduksi Papan Henduino untuk kebutuhan umum. Mudah-mudahan secepatnya, karena itu kami mohon do'anya mudah-mudahan Papan Henduino mampu diproduksi masal dalam waktu dekat. Amin... Bagi yang ingin membuat sendiri Papan Henduino, kami akan membagikannya melalui Repository GitHub dan silahkan dibuat sendiri dengan tujuan non komersil. Setelah membuat bagikan pengalamannya bersama kami untuk membangkitkan semangat tim Henduino. Apa lisensi yang diterapkan pada Papan Henduino? Sudah dijelaskan diawal bahwa Henduino mengambil semangat Arduino sehingga kami pun meneruskan semangat tersebut. Henduino direncanakan menerapkan lisensi sumber terbuka atau Open Source License walau sampai hari ini kami belum mendaftarkannya tapi mudah-mudahan kedepannya kita dapat memperoleh Sertifikat Sumber Terbuka dari Open Source Hardware Association . Lalu apa lisensi Open Source? Dijelaskan dibawah ini mengenai Open Source Software dan Open Source Hardware. Tentang Open Source Software - Wikipedia Open Source atau Sumber Terbuka adalah sistem pengembangan yang tidak dikoordinasi oleh suatu individu/lembaga pusat, tetapi oleh para pelaku yang bekerja sama dengan memanfaatkan kode sumber ( source-code ) yang tersebar dan tersedia bebas (biasanya menggunakan fasilitas komunikasi internet). Pola pengembangan ini mengambil model ala bazaar, sehingga pola Open Source ini memiliki ciri bagi komunitasnya yaitu adanya dorongan yang bersumber dari budaya memberi, yang artinya ketika suatu komunitas menggunakan sebuah program Open Source dan telah menerima sebuah manfaat kemudian akan termotivasi untuk menimbulkan sebuah pertanyaan apa yang bisa pengguna berikan balik kepada orang banyak. Tentang Open Source Hardware - OpenSource Open Hardware atau Open Source Hardware mengacu pada spesifikasi desain objek fisik yang dilisensikan sedemikian rupa sehingga objek tersebut dapat dipelajari, dimodifikasi, dibuat, dan didistribusikan oleh siapa saja. Kode sumber perangkat keras terbuka harus mudah diakses, dan komponen-komponennya lebih mudah bagi siapa saja untuk mendapatkannya. Pada dasarnya, perangkat keras terbuka menghilangkan hambatan umum untuk desain dan pembuatan barang fisik; itu memberikan sebanyak mungkin orang kemampuan untuk membangun, membuat ulang dengan fungsi khusus, dan berbagi pengetahuan mereka tentang desain dan fungsi perangkat keras.","title":"Beranda"},{"location":"#selamat-datang-di-henduino-library","text":"","title":"Selamat Datang di Henduino Library"},{"location":"#apa-henduino","text":"Ketika anda membuka halaman situs ini mungkin dalam hati bertanya-tanya, apa itu Henduino? Henduino adalah produk mikrokontroler yang dikembangkan oleh Dede Hendriono dengan dikhususkan pada chip mikrokontroler yang diproduksi oleh perusahaan Atmel dan perusahaan Espressif . Sedangkan konsentrasinya lebih ke turunan Arduino , hal ini agar para Artis Elektronika terbiasa dengan perangkat lunak Arduino IDE. Selain berbasis Arduino, Henduino juga membuat beberapa papan mikrokontroler dengan basis ESP baik ESP8266 maupun ESP32 yang terkenal murah, mudah dan berdaya guna. Namun ada beberapa proyek yang dibuat oleh tim Henduino keluar dari 2 basis mikrokontroler tersebut. Sedangkan situs ini merupakan arsip atau perpustakaan tim Henduino, jadi apa yang tertulis disini bisa berupa ide, rencana, yang sedang dikembangkan atau bahkan produk yang siap untuk digunakan. Apa saja? Ikuti saja perkembangannya disitus ini.","title":"Apa Henduino?"},{"location":"#kenapa-arduino-dan-esp","text":"Henduino menggunakan basis Arduino dan ESP karena memang papan mikrokontroler ini merupakan papan yang sangat populer baik di Indonesia maupun didunia. Perkembangannya yang pesat telah melahirkan berbagai perangkat keras yang berdaya guna baik untuk kesenangan maupun untuk menghadapi proyek sesungguhnya yang bisa diterapkan sesuai kebutuhan dan tentunya bernilai bisnis yang tinggi. Kebiasaan dan kebutuhan masyarakat dunia yang hampir terbiasa dengan internet membuat produk mikrokontroler hampir dimiliki oleh setiap orang didunia. Disadari atau pun tidak disekitar kita hampir beberapa jenis perangkat itu dibuat dengan basis mikrokontroler, misal remote, sistem pengaman rumah, pembaca suhu dan lain sebagainya. Ini membuat geliat para artis elektronika semakin semangat dan pertumbuhannya semakin banyak, membuat para artis elektronika tidak memiliki pilihan kecuali ikut terjun untuk berkecimpung dalam pengembangan dunia mikrokontroler. Henduino merupakan bagian kecil dari kepedulian terhadap perkembangan mikrokontroler tersebut. Ini sebagai upaya generasi Indonesia untuk menghadap tantangan global perkembangan dunia.","title":"Kenapa Arduino dan ESP?"},{"location":"#seperti-apa-papan-henduino","text":"Papan Henduino dibuat dengan susunan yang mengedepankan kemudahan dan biaya, dengan harapan menjadi Papan Mikrokontroler pertama Indonesia yang murah namun tetap mudah untuk dikembangkan. Walau tidak sempurna namun mudah-mudahan ini mampu jadi pemicu dan membangkitkan kepedulian developer mikrokontroler Indonesia untuk ikut andil terhadap perkembangan dunia mikrokontroler Indonesia. Sebenarnya ada beberapa varian yang sedang dikembangkan tapi karena terbentur masalah pendanaan sehingga baru sedikit yang sudah dibuat dan mulai dikembagkan secara pribadi. Keterbatasan dana ini membuat kami dari tim Henduino baru mampu membuat untuk kebutuhan internal saja tanpa mampu membuat untuk kebutuhan secara umum. Namun bagi siapa saja yang ingin membuat sendiri silahkan ambil datanya dari repository yang kami simpan di GitHub. Beberapa varian Henduino dibuat secara spesifik untuk kebutuhan tertentu yang memudahkan siapa saja untuk membuat proyek mikrokontroler yang langsung siap digunakan. Seperti Henduino R2, HESP IoT R2, dan beberapa varian lainnya. Tunggu terbitnya ya?","title":"Seperti apa Papan Henduino?"},{"location":"#apa-semua-yang-dibahas-hanya-papan-henduino","text":"Halaman ini bukan halaman khusus Papan Henduino karena hal tersebut tidak relevan dengan semangat open source. Pada halaman ini akan dibahas papan-papan mikrokontroler lain yang memiliki semangat open source, sedangkan papan mikrokontroler yang closed source hanya akan dibahas untuk memancing para pengembang untuk membuat papan lainnya yang memiliki kemampuan sama. Selain papan mikrokontroler pada situs ini juga disertakan perpustakaan ( library ), contoh penggunaan, dan beberapa contoh aplikasinya sehingga memudahkan siapa saja yang ingin belajar mikrokontroler terutama yang berbasis Arduino dan ESP.","title":"Apa semua yang dibahas hanya Papan Henduino?"},{"location":"#dimanakah-bisa-membeli-papan-henduino","text":"Untuk saat ini Henduino masih dalam tahap pengembangan dan produksi jadi untuk sementara Henduino masih digunakan internal tim Henduino saja. Karena sudah dijelaskan diatas bahwa produksi Henduino membutuhkan dana yang cukup besar dan kami belum memiliki dana sebesar itu. Ini membuat proses produksi masal Papan Henduino menjadi terhambat, dan kami pun belum tahu hingga kapan kami bisa memproduksi Papan Henduino untuk kebutuhan umum. Mudah-mudahan secepatnya, karena itu kami mohon do'anya mudah-mudahan Papan Henduino mampu diproduksi masal dalam waktu dekat. Amin... Bagi yang ingin membuat sendiri Papan Henduino, kami akan membagikannya melalui Repository GitHub dan silahkan dibuat sendiri dengan tujuan non komersil. Setelah membuat bagikan pengalamannya bersama kami untuk membangkitkan semangat tim Henduino.","title":"Dimanakah bisa membeli Papan Henduino?"},{"location":"#apa-lisensi-yang-diterapkan-pada-papan-henduino","text":"Sudah dijelaskan diawal bahwa Henduino mengambil semangat Arduino sehingga kami pun meneruskan semangat tersebut. Henduino direncanakan menerapkan lisensi sumber terbuka atau Open Source License walau sampai hari ini kami belum mendaftarkannya tapi mudah-mudahan kedepannya kita dapat memperoleh Sertifikat Sumber Terbuka dari Open Source Hardware Association . Lalu apa lisensi Open Source? Dijelaskan dibawah ini mengenai Open Source Software dan Open Source Hardware. Tentang Open Source Software - Wikipedia Open Source atau Sumber Terbuka adalah sistem pengembangan yang tidak dikoordinasi oleh suatu individu/lembaga pusat, tetapi oleh para pelaku yang bekerja sama dengan memanfaatkan kode sumber ( source-code ) yang tersebar dan tersedia bebas (biasanya menggunakan fasilitas komunikasi internet). Pola pengembangan ini mengambil model ala bazaar, sehingga pola Open Source ini memiliki ciri bagi komunitasnya yaitu adanya dorongan yang bersumber dari budaya memberi, yang artinya ketika suatu komunitas menggunakan sebuah program Open Source dan telah menerima sebuah manfaat kemudian akan termotivasi untuk menimbulkan sebuah pertanyaan apa yang bisa pengguna berikan balik kepada orang banyak. Tentang Open Source Hardware - OpenSource Open Hardware atau Open Source Hardware mengacu pada spesifikasi desain objek fisik yang dilisensikan sedemikian rupa sehingga objek tersebut dapat dipelajari, dimodifikasi, dibuat, dan didistribusikan oleh siapa saja. Kode sumber perangkat keras terbuka harus mudah diakses, dan komponen-komponennya lebih mudah bagi siapa saja untuk mendapatkannya. Pada dasarnya, perangkat keras terbuka menghilangkan hambatan umum untuk desain dan pembuatan barang fisik; itu memberikan sebanyak mungkin orang kemampuan untuk membangun, membuat ulang dengan fungsi khusus, dan berbagi pengetahuan mereka tentang desain dan fungsi perangkat keras.","title":"Apa lisensi yang diterapkan pada Papan Henduino?"},{"location":"tentang/","text":"Tentang Henduino Library Penamaan Henduino Nama Henduino diambil dari nama pendirinya yaitu Dede Hendriono yang kemudian nama tersebut di ambil kata HEND sedangkan kata selanjutnya diambil dari papan Arduino yang diambil penggalan katanya yaitu UINO , sehingga ketika digabungkan menjadi HENDUINO dan ini dirasa tepat. Itu saja... Tidak ada sejarah khusus dalam penamaan Papan Henduino. Penamaan Henduino Library Henduino Library bukanlah perpustakaan papan Henduino tapi lebih ke perpustakaan yang selama ini dikumpulkan dan berserakan didalam komputer. Karena keterserakan tersebutlah muncul keinginan untuk mengarsipkan agar suatu hari nanti ketika membutuhkan sesuatu masih tersedia secara online, selain itu agar siapa saja bisa ikut mengembangkan sehingga terbentuk jaringan yang kuat dalam perjalanannya. Entah akan seperti apa Henduino suatu hari? Apakah akan menjadi papan yang bermanfaat atau justru tenggelam ditengah-tengah hiruk pikuk teknologi. Hanya optimisme untuk berbagi itulah yang membuat kami merasa perlu untuk membagikan apa yang kami pelajari, kami hadapi, kami rasakan agar minimal kesulitan kami dalam belajar mikrokontroler bisa diambil hikmahnya oleh siapa saja yang akan dan sedang belajar mikrokontroler. Tim Henduino Berapakah tim Henduino? Tim Henduino hanya satu dan sampai hari ini juga masih satu orang yaitu Dede Hendriono, namun saya secara pribadi berharap suatu hari nanti ada yang mau berkontribusi dalam pengemabangannya. Baik kontribusi dalam bentuk ilmu, perangkat keras, dana, tempat atau yang lainnya. Munculnya situs ini hanya untuk memancing seberapa peduli masyarakat dan seberapa antusias generasi dalam belajar teknologi. Walau sendirian dalam mengelola situs, sendiri dalam membuat papan Henduino yang tentunya dengan biaya mandiri pula tanpa ( belum ) ada campur tangan pihak lain, namun keinginan untuk berbagi tetap ada. Saya sadar bahwa tidak mudah dalam membangun sebuah tim yang solid namun minimal ada keinginan untuk mengumpulkan orang-orang yang peduli dengan perkembangan mikrokontroler Indonesia dan peduli terhadap kelangsungan generasi berikutnya dalam menghadapi tantangan perkembangan teknologi terutama dunia mikrokontroler. Tentang Situs Pertanyaan tentang situs sebenarnya tidak terlalu penting untuk ditulis, namun tetap saja ada yang penasaran. Artikel pada situs ini ditulis dengan bahasa Markdown sehingga menjadi situs dengan tipe static page atau halaman statis yang disimpan pada penyedia repository GitHub . Sedangkan tool yang digunakan untuk meng- generate -nya adalah MkDocs . Pilihan jatuh pada halaman statis karena jika suatu hari penyedia layanan tutup, tim masih memiliki salinannya dalam format HTML yang masih bisa dibaca secara luring ( offline ) tanpa bantuan alat yang rumit.","title":"Tentang"},{"location":"tentang/#tentang-henduino-library","text":"","title":"Tentang Henduino Library"},{"location":"tentang/#penamaan-henduino","text":"Nama Henduino diambil dari nama pendirinya yaitu Dede Hendriono yang kemudian nama tersebut di ambil kata HEND sedangkan kata selanjutnya diambil dari papan Arduino yang diambil penggalan katanya yaitu UINO , sehingga ketika digabungkan menjadi HENDUINO dan ini dirasa tepat. Itu saja... Tidak ada sejarah khusus dalam penamaan Papan Henduino.","title":"Penamaan Henduino"},{"location":"tentang/#penamaan-henduino-library","text":"Henduino Library bukanlah perpustakaan papan Henduino tapi lebih ke perpustakaan yang selama ini dikumpulkan dan berserakan didalam komputer. Karena keterserakan tersebutlah muncul keinginan untuk mengarsipkan agar suatu hari nanti ketika membutuhkan sesuatu masih tersedia secara online, selain itu agar siapa saja bisa ikut mengembangkan sehingga terbentuk jaringan yang kuat dalam perjalanannya. Entah akan seperti apa Henduino suatu hari? Apakah akan menjadi papan yang bermanfaat atau justru tenggelam ditengah-tengah hiruk pikuk teknologi. Hanya optimisme untuk berbagi itulah yang membuat kami merasa perlu untuk membagikan apa yang kami pelajari, kami hadapi, kami rasakan agar minimal kesulitan kami dalam belajar mikrokontroler bisa diambil hikmahnya oleh siapa saja yang akan dan sedang belajar mikrokontroler.","title":"Penamaan Henduino Library"},{"location":"tentang/#tim-henduino","text":"Berapakah tim Henduino? Tim Henduino hanya satu dan sampai hari ini juga masih satu orang yaitu Dede Hendriono, namun saya secara pribadi berharap suatu hari nanti ada yang mau berkontribusi dalam pengemabangannya. Baik kontribusi dalam bentuk ilmu, perangkat keras, dana, tempat atau yang lainnya. Munculnya situs ini hanya untuk memancing seberapa peduli masyarakat dan seberapa antusias generasi dalam belajar teknologi. Walau sendirian dalam mengelola situs, sendiri dalam membuat papan Henduino yang tentunya dengan biaya mandiri pula tanpa ( belum ) ada campur tangan pihak lain, namun keinginan untuk berbagi tetap ada. Saya sadar bahwa tidak mudah dalam membangun sebuah tim yang solid namun minimal ada keinginan untuk mengumpulkan orang-orang yang peduli dengan perkembangan mikrokontroler Indonesia dan peduli terhadap kelangsungan generasi berikutnya dalam menghadapi tantangan perkembangan teknologi terutama dunia mikrokontroler.","title":"Tim Henduino"},{"location":"tentang/#tentang-situs","text":"Pertanyaan tentang situs sebenarnya tidak terlalu penting untuk ditulis, namun tetap saja ada yang penasaran. Artikel pada situs ini ditulis dengan bahasa Markdown sehingga menjadi situs dengan tipe static page atau halaman statis yang disimpan pada penyedia repository GitHub . Sedangkan tool yang digunakan untuk meng- generate -nya adalah MkDocs . Pilihan jatuh pada halaman statis karena jika suatu hari penyedia layanan tutup, tim masih memiliki salinannya dalam format HTML yang masih bisa dibaca secara luring ( offline ) tanpa bantuan alat yang rumit.","title":"Tentang Situs"},{"location":"blog/2019/memilih-arduino/","text":"Memilih Arduino Uno Untuk Pemula Arduino Uno Original, Arduino Compatible dan Arduino Clone menjadi sangat membingungkan bagi para pemula yang hendak belajar tentang pemrograman Arduino. Arikel ini membahas tips dan trik menentukan pilihan papan Arduino Uno yang tepat terutama bagi pemula. Tepat sesuai dengan tujuan penggunaan dan tepat sesuai dengan dana yang dimiliki oleh penggunanya. Informasi tentang jenis-jenis Arduino yang ada dipasaran Indonesia tidak terlalu jelas, bahkan beberapa penjual Arduino sengaja tidak memberikan informasi detail tentang Arduino Uno yang dijualnya. Arduino Uno merupakan salah satu varian dari keluarga Arduino. Seperti dibahas sebelumnya mengenai \" Apa itu Arduino? \", diharapkan ada sedikit gambaran mengenai fungsi, spesifikasi dan hal-hal lain tentang Arduino. Ketika akan memulai belajar tentang Arduino, terutama pemula, maka kita akan dihadapkan pada pemilihan yang tepat tentang papan Arduino yang akan digunakan. Beberapa pertanyaan akan muncul dalam benak para pengguna pemula, diantaranya: Arduino tipe apa yang akan digunakan untuk belajar? Hal ini karena ada banyak tipe atau varian dari keluarga Arduino. Ada Arduino Uno, Arduino Leonardo, Arduino Nano, Arduino Pro Mini, Arduino Pro Micro, Arduino Mega2560, Arduino Mega ADK, Arduino Yun, dan masih ada beberapa varian lagi baik yang dikembangkan oleh perusahaan Arduino-nya atau yang dikembangkan oleh perusahaan rekanan. Jika papan Arduino yang akan dibeli bertujuan sebagai sarana pembelajaran, maka lebih baik anda menggunakan papan Arduno Uno. Hal ini karena papan Arduino Uno merupakan papan standar yang banyak digunakan sebagai awal pembelajaran pemrograman robotika diseluruh dunia, mudah didapat, dan relatif lebih murah. Pilih Arduino Original atau Arduino Compatible? Pertanyaan ini yang paling membingungkan karena berhubungan dengan anggaran yang akan digunakan. Rasa takut dan bingung membuat para pengguna pemula sering membatalkan pembelian. \"Apa bedanya sih papan Arduino original dengan papan Arduino compatible? Kok harganya beda jauh...? Beli murah takutnya bajakan, beli yang mahal tidak ada dananya...\" Arduino Uno Original Arduino Uno Original adalah papan Arduino Uno yang dibuat oleh perusahaan yang ditunjuk oleh perusahaan Arduino dan dijual pada situs resmi Arduino dan atau pada toko yang telah menjalin kerjasama secara resmi dengan perusahaan Arduino. Gambar 1. Arduino Uno Original Namun, kita bisa saja menemukan papan Arduino original di toko-toko yang tidak secara resmi tercantum sebagai pihak yang ditunjuk oleh perusahaan Arduino. Dibawah ini adalah toko-toko resmi di Indonesia yang menjual papan Arduino dengan kualitas original: DigiWare Surabaya (DigiWare, Surabaya, East Java, Indonesia) Email: Phone/Fax : +62-31-5039460 Whatsapp: 62-81-259 989 885 Line: @digiware_store Situs: DigiWare DigiWare Bandung (DigiWare, Bandung, West Java, Indonesia) Email: Phone: +62-22-7276690 Whatsapp: 62-82-126 168 065 Line: @digiware_store RDD Technologies Bandung - Indonesia Tel. +62811540593 Whatsapp: +6281321099180 Email: Situs: RDD Technologies Arduino Uno Compatible Sedangkan Arduino Uno Compatible adalah papan Arduino Uno yang dibuat dan dikembangkan oleh perusahaan rekanan yang bukan bagian atau bawahan perusahaan Arduino. Perusahaan ini membuat papan yang memiliki fungsi sama dengan Arduino Uno tetapi tidak menggunakan nama \"Arduino Uno\". Hal ini karena sifat Arduino yang open hardware sehingga siapapun bisa membuat dan menjual papan Arduino-nya dengan syarat \"tidak menggunakan nama yang sama dengan merk dagang produk yang dibuat oleh perusahaan Arduino\" kecuali perusahaan tersebut telah mendapat ijin dari pihak Arduino untuk menggunakan nama merk dagang tersebut. Beberapa perusahaan membuat papan Arduino Compatible dengan melakukan beberapa perubahan rangkaian dan komponen namun tetap memiliki fungsi dan perlakukan yang sama dengan Ardiuno Uno asli. Gambar 2. Arduino Uno Compatible Beberapa merk dagang papan Arduino yang dibuat oleh pihak rekanan misalnya; RedBoard dibuat oleh Sparkfun, Seeeduino dibuat oleh Seeed Studio, Arduino Nano dibuat oleh Gravitech, Freeduino dibuat oleh Freeduino, dan masih banyak lagi Arduino Uno Compatible lainnya. Beberapa papan diberi nama menggunakan merk dagang \"Arduino\", penggunaan merk dagang ini diperbolehkan jika telah di beri ijin oleh perusahaan Arduino. Namun sebenarnya pihak Arduino tidak pernah menyatakan bahwa papan-papan Arduino yang dibuat oleh pihak lain diperbolehkan dengan sebutan Arduino Uno Compatible. Pihak Arduino tetap menyatakan bahwa Arduino Compatible adalah palsu atau bajakan. Dan pihak rekanan sebagai pembuat papan Arduino Compatible pun tidak pernah menyatakan produk mereka dengan istilah Arduino Compatible. Misal Sparkfun, perusahaan ini tidak pernah menyebut RedBoard itu sebagai Arduino Uno Compatible, mereka tetap menyatakan dengan nama RedBoard tanpa menggunakan kata \"Arduino\", \"Uno\" ataupun \"Compatible\". Arduino Uno Palsu Arduino Uno Palsu atau dikenal dipasaran dengan nama Arduino Uno Clone adalah papan Arduino Uno yang dibuat oleh orang atau perusahaan tanpa nama dengan segala halnya sama persis dengan papan Arduino Uno original. Menggunakan merk dagang \"Arduino Uno\", dengan warna yang hampir sama, dengan tata letak yang sama, dengan komponen yang hampir sama, segala halnya disamakan dengan Arduino Uno original. Gambar 3. Arduino Uno Palsu Bahkan penulis memiliki satu papan Arduino Uno Palsu dengan kualitas yang hampir sama dengan aslinya yang dipasaran Indonesia sering di kenal dengan \"Arduino Uno Grade A\". Arduino Uno Grade A memiliki tata letak komponen yang sangat rapi, kualitas cat yang bagus, masking atas bawah yang bagus, komponen dengan kualitas lumayan bagus, walaupun sebenarnya jika kita jeli akan ditemukan beberapa perbedaan mencolok. Yang menjadi pertanyaan \"Kenapa mereka harus membajak?\". Padahal jika diberi nama lain, misal \"Henduino\" maka papan tersebut akan masuk kategori Arduino Compatible. Papan Arduino dikembangkan dibawah lisensi Open Source Open Hardware yang ini berarti siapapun dapat membuat, mengembangkan dan menjualnya kepasaran internasional dengan syarat \"tidak menggunakan merk dagang yang sama dan tidak membuat papan dengan segala hal yang sama, harus ada pengembangan atau modifikasi\". Arduino Uno bajakan dijual dengan harga sangat murah jika dibandingkan dengan Arduino Uno original. Dalam hal ini penulis tidak menyarankan apa-apa, apakah harus original atau bajakan. Kembali kepada anda sebagai pengguna. Perbedaan Arduino Original dengan Arduino Palsu Mau menggunakan Arduino Uno original, compatible, atau bahkan clone adalah menjadi hak para penggunanya. Namun untuk para pembuat papan Arduino Clone, semestinya mereka tidak menggunakan merk dagang \"Arduino\" hal ini karena pengembang Arduino sudah bermurah hati dengan lisensi Open Hardware untuk papan Arduino-nya dan lisensi Open Source untuk perangkat lunak Arduino IDE-nya. Penggunaan merk dagang \"Arduino\" hanya akan menyakiti dan merugikan perusahaan Arduino serta membingungkan dan merugikan konsumen. Kita sebagai konsumen diharapkan bijak dan jeli dalam merencakan pembelian papan Arduino. Dibawah ini ada beberapa indikator yang bisa kita gunakan untuk mengidentifikasi papan Arduino yang original dan yang bajakan. Warna Warna otentik papan Arduino adalah percampuran antara warna hijau dengan biru atau warna klasik lebut dan seperti warna pudar. Sedangkan papan Arduino palsu biasanya berwarna biru hingga warna biru tajam (dominan warna biru). Gambar 4. Warna Papan Arduino Original dan Bajakan Logo Pada bagian logo Arduino, kita akan menemukan perbedaan yang cukup jelas. Perhatikan logo asli Arduino, dan bandingkan dengan yang palsu. Logo pada papan palsu tercetak kurang tajam, lubang pada huruf \"A\" menghilang, bagian tepi garis logo bergelombang dan kurang rapi terutama pada bagian lengkungan logo. Gambar 5. Logo Huruf Arduino Original dan Bajakan Huruf Amati huruf dengan hati-hati pada kata \"Arduino\" dan \"Uno\" yang tertulis pada papan, maka akan ditemukan perbedaan. Jenis huruf Arduino di rancang secara khusus, sedangkan pada papan Arduino palsu atau bajakan cenderung diabaikan atau tidak sama persis. Perhatikan huruf \"O\" pada gambar! Peta Perhatikan juga bagian peta. Pada papan asli tampak dengan jelas peta negara Itali hal ini untuk menghormati tempat kelahiran Arduino. Sedangkan pada papan Arduino palsu peta tidak begitu jelas bahkan seperti layang-layang terbang. Gambar 6. Peta Arduino Original dan Bajakan Jalur dan konektor Pada papan Arduino Asli terlihat jalur dan konektor antar komponen tampak rapi dan teranyam dengan indah. Sedangkan pada papan Arduino Palsu tampak berantakan dan jelek. Gambar 7. Jalur Komponen Arduino Original dan Bajakan Komponen Komponen merupakan bagian yang paling sulit untuk dipalsukan. Komponen dengan kode 501K yang terletak dekat dengan Regulator Tegangan biasanya berwarna hijau pada papan Arduino palsu. Sebenarnya yang berwarna hijau memiliki properti yang hampir sama dengan yang digunakan pada papan Arduino Asli dengan warna emas-hitam. Hal ini menjadi hal spesial bagi Arduino Asli karena komponen ini merupakan komponen yang paling sulit di cari. Kata Kunci (Keyword) Sebenarnya para pembuat dan penjual papan Arduino palsu tahu bahwa mereka melanggar merk dagang. Makanya dalam menjualnya pun mereka tidak berani terang-terangan dengan mengatakan/menuliskan \"Arduino Uno\". Biasanya mereka menggunakan kata kunci pendekatan, misal; Arduino Uno Compatible, Arduino Uno Clone, Uno for Arduino, Arduino Uno Grade A, dan beberapa kata kunci yang mirip. Harga Inilah bagian yang paling mencolok diantara perbedaan yang sudah disebut diatas. Papan Arduino Palsu atau Clone dijual dengan harga sangat murah hingga 50% jika dibandingkan dengan harga papan Arduino Original. Papan Arduino Palsu dijual rata-rata setengah dari harga Arduino asli. Bahkan biasanya penjual memberikan tambahan berupa kabel data USB. ATmega328 DIP Chip dan SMD Chip Pihak Arduino telah mengembangkan 2 versi Arduino Uno, yaitu Arduino Uno dengan mikrokontroller ATmega328 tipe DIP (Dual-Inline Package) dan Arduino Uno dengan mikrokontroller ATmega328 tipe SMD (Small Mount Device). Tipe DIP merupakan papan Arduino yang paling banyak kita temukan dipasaran. Chip mikrokontroller dipasang pada sebuah socket untuk memudahkan penggantian jika suatu hari mikrokontroller tersebut sudah habis masa guna-nya. Tipe DIP sangat cocok untuk para pemula yang sedang belajar dan sering melakukan upload kode. Gambar 8. Arduino Uno SMD dan Arduino Uno DIP Sedangkan tipe SMD menggunakan mikrokontroller berbentuk kecil yang tertanam langsung pada papan tanpa bisa dilepas. Jika masa guna-nya telah habis maka kita sulit untuk menggantinya. Tipe ini cocok digunakan untuk proyek robotik yang tidak terlalu sering melakukan upload kode. Dari sisi harga, tipe SMD lebih murah dibandingkan dengan tipe DIP. Jika anda sedang belajar tentang pemrograman Arduino penulis menyarankan untuk memilih Arduino Uno dengan mikrokontroller tipe DIP. USB-to-Serial Chip USB-to-Serial Chip yang digunakan pada Arduino Uno ada beberapa jenis, yaitu; ATmega16U2, FTDI dan CH340. Arduino Uno yang menggunakan USB-to-Serial dengan chip ATmega16U2 biasanya dibandrol dengan harga tertinggi. Sedangkan papan Arduino Uno yang menggunakan USB-to-Serial dengan chip FTDI dijual lebih murah. Gambar 9. USB-to-Serial Chip pada Arduino Uno Sedangkan yang termurah adalah papan Arduino Uno yang menggunakan USB-to-Serial dengan chip CH340, bahkan perbadaan harganya sangat jauh jika dibandingkan dengan yang menggunakan chip ATmega16U2 ataupun chip FTDI. Papan Arduino Uno yang menggunakan USB-to-Serial dengan chip CH340 dapat dipastikan sebagai papan Arduino Bajakan. Karena tidak ada satu varian pun Arduino yang menggunakan USB-to-Serial CH340. Namun demikian, papan Arduino Uno dengan USB-to-Serial CH340 tetap mampu bekerja dengan baik layaknya yang menggunakan chip FTDI ataupun ATmega16U2. Rekomendasi Pembelian Untuk menentukan pilihan tepat tentang papan Arduino Uno yang akan dibeli maka kita harus mampu mendefinisikan maksud dan tujuan kita. Pada dasarnya ada 2 kepentingan, yaitu; (1) Membeli Arduino untuk belajar dan, (2) Membeli Arduino untuk sebuah proyek yang berhubungan dengan dana orang lain. Jika rencananya untuk belajar tentang pemrograman Arduino maka akan lebih tepat untuk membeli Arduino Uno dengan harga murah, terlepas dari masalah original atau pun bajakan. Sesuaikan saja dengan ketersediaan dana yang anda miliki. Arduino dengan harga murah akan memaksimalkan proses pembelajaran, sedikit rasa takut baik takut rusak maupun takut masa guna-nya habis. Jika rencananya untuk membuat proyek yang berhubungan dengan dana orang lain, maka akan lebih tepat untuk menggunakan Arduino berkualitas (Original). Hal ini karena Arduino original terjaga kualitasnya. Selain itu jika kita menggunakan Arduino Original berarti kita telah menjaga keberlangsungan perusahaan Arduino. Harga yang mahal setara dengan apa yang diberikan oleh perusahaan Arduino kepada penggunanya. Secara langsung kita telah membantu pendanaan perusahaan Arduino dan telah menciptakan: Pengembangan hardware open source baru dan terbaru. Dokumentasi yang lebih baik. Sertifikat CE/FCC. Kontrol Kualitas (Quality Control). Memanajemen Komunitas. Penerbitan Tutorial. Menyumbang proyek open source lainnya. Memelihara hosting/pemeliharaan website dan forum. Kesimpulan Sebagai penegasan, bahwa di pasaran hanya ada 2 kategori, yaitu Original (Asli) dan Palsu (Bajakan). Tidak ada istilah compatible untuk mengkamuflasekan kualitas palsu. Artikel diatas menggunakan istilah compatible sebenarnya hanya untuk memudahkan pembagian papan Arduino yang beredar dipasaran. RedBoard, Seeduino, Arduino Nano, Freeduino adalah tetap masuk kategori original (asli) tetapi karena tidak dibuat oleh perusahaan Arduino maka dimasukan kategori compatible untuk mempermudah pemahaman. Dan harus diingat, istilah compatible yang digunakan di pasaran Indonesia maupun internasional tetap mengacu pada papan Arduino bajakan. Jika kita ingin membantu pengembangan Arduino maka belilah Arduino Original atau Asli. Memang lebih mahal tapi dana tersebut digunakan untuk penelitian dan pengembangan Arduino dimasa mendatang. Tapi dana saya tidak cukup untuk membeli kualitas original? Ah itu sih terserah anda... Jika dana tidak mencukupi untuk membeli kualitas original sebenarnya kita masih bisa untuk membuatnya sendiri tanpa harus membeli bajakan. Pada artikel mendatang akan dibahas cara membuat sendiri papan Arduino dengan fungsi sama dengan proses dan rangkaian yang lebih sederhana. Mau??? Daftar Pustaka How to spot a counterfeit Arduino Distributor Resmi Arduino","title":"Memilih Arduino Uno"},{"location":"blog/2019/memilih-arduino/#memilih-arduino-uno-untuk-pemula","text":"Arduino Uno Original, Arduino Compatible dan Arduino Clone menjadi sangat membingungkan bagi para pemula yang hendak belajar tentang pemrograman Arduino. Arikel ini membahas tips dan trik menentukan pilihan papan Arduino Uno yang tepat terutama bagi pemula. Tepat sesuai dengan tujuan penggunaan dan tepat sesuai dengan dana yang dimiliki oleh penggunanya. Informasi tentang jenis-jenis Arduino yang ada dipasaran Indonesia tidak terlalu jelas, bahkan beberapa penjual Arduino sengaja tidak memberikan informasi detail tentang Arduino Uno yang dijualnya. Arduino Uno merupakan salah satu varian dari keluarga Arduino. Seperti dibahas sebelumnya mengenai \" Apa itu Arduino? \", diharapkan ada sedikit gambaran mengenai fungsi, spesifikasi dan hal-hal lain tentang Arduino. Ketika akan memulai belajar tentang Arduino, terutama pemula, maka kita akan dihadapkan pada pemilihan yang tepat tentang papan Arduino yang akan digunakan. Beberapa pertanyaan akan muncul dalam benak para pengguna pemula, diantaranya: Arduino tipe apa yang akan digunakan untuk belajar? Hal ini karena ada banyak tipe atau varian dari keluarga Arduino. Ada Arduino Uno, Arduino Leonardo, Arduino Nano, Arduino Pro Mini, Arduino Pro Micro, Arduino Mega2560, Arduino Mega ADK, Arduino Yun, dan masih ada beberapa varian lagi baik yang dikembangkan oleh perusahaan Arduino-nya atau yang dikembangkan oleh perusahaan rekanan. Jika papan Arduino yang akan dibeli bertujuan sebagai sarana pembelajaran, maka lebih baik anda menggunakan papan Arduno Uno. Hal ini karena papan Arduino Uno merupakan papan standar yang banyak digunakan sebagai awal pembelajaran pemrograman robotika diseluruh dunia, mudah didapat, dan relatif lebih murah. Pilih Arduino Original atau Arduino Compatible? Pertanyaan ini yang paling membingungkan karena berhubungan dengan anggaran yang akan digunakan. Rasa takut dan bingung membuat para pengguna pemula sering membatalkan pembelian. \"Apa bedanya sih papan Arduino original dengan papan Arduino compatible? Kok harganya beda jauh...? Beli murah takutnya bajakan, beli yang mahal tidak ada dananya...\"","title":"Memilih Arduino Uno Untuk Pemula"},{"location":"blog/2019/memilih-arduino/#arduino-uno-original","text":"Arduino Uno Original adalah papan Arduino Uno yang dibuat oleh perusahaan yang ditunjuk oleh perusahaan Arduino dan dijual pada situs resmi Arduino dan atau pada toko yang telah menjalin kerjasama secara resmi dengan perusahaan Arduino. Gambar 1. Arduino Uno Original Namun, kita bisa saja menemukan papan Arduino original di toko-toko yang tidak secara resmi tercantum sebagai pihak yang ditunjuk oleh perusahaan Arduino. Dibawah ini adalah toko-toko resmi di Indonesia yang menjual papan Arduino dengan kualitas original: DigiWare Surabaya (DigiWare, Surabaya, East Java, Indonesia) Email: Phone/Fax : +62-31-5039460 Whatsapp: 62-81-259 989 885 Line: @digiware_store Situs: DigiWare DigiWare Bandung (DigiWare, Bandung, West Java, Indonesia) Email: Phone: +62-22-7276690 Whatsapp: 62-82-126 168 065 Line: @digiware_store RDD Technologies Bandung - Indonesia Tel. +62811540593 Whatsapp: +6281321099180 Email: Situs: RDD Technologies","title":"Arduino Uno Original"},{"location":"blog/2019/memilih-arduino/#arduino-uno-compatible","text":"Sedangkan Arduino Uno Compatible adalah papan Arduino Uno yang dibuat dan dikembangkan oleh perusahaan rekanan yang bukan bagian atau bawahan perusahaan Arduino. Perusahaan ini membuat papan yang memiliki fungsi sama dengan Arduino Uno tetapi tidak menggunakan nama \"Arduino Uno\". Hal ini karena sifat Arduino yang open hardware sehingga siapapun bisa membuat dan menjual papan Arduino-nya dengan syarat \"tidak menggunakan nama yang sama dengan merk dagang produk yang dibuat oleh perusahaan Arduino\" kecuali perusahaan tersebut telah mendapat ijin dari pihak Arduino untuk menggunakan nama merk dagang tersebut. Beberapa perusahaan membuat papan Arduino Compatible dengan melakukan beberapa perubahan rangkaian dan komponen namun tetap memiliki fungsi dan perlakukan yang sama dengan Ardiuno Uno asli. Gambar 2. Arduino Uno Compatible Beberapa merk dagang papan Arduino yang dibuat oleh pihak rekanan misalnya; RedBoard dibuat oleh Sparkfun, Seeeduino dibuat oleh Seeed Studio, Arduino Nano dibuat oleh Gravitech, Freeduino dibuat oleh Freeduino, dan masih banyak lagi Arduino Uno Compatible lainnya. Beberapa papan diberi nama menggunakan merk dagang \"Arduino\", penggunaan merk dagang ini diperbolehkan jika telah di beri ijin oleh perusahaan Arduino. Namun sebenarnya pihak Arduino tidak pernah menyatakan bahwa papan-papan Arduino yang dibuat oleh pihak lain diperbolehkan dengan sebutan Arduino Uno Compatible. Pihak Arduino tetap menyatakan bahwa Arduino Compatible adalah palsu atau bajakan. Dan pihak rekanan sebagai pembuat papan Arduino Compatible pun tidak pernah menyatakan produk mereka dengan istilah Arduino Compatible. Misal Sparkfun, perusahaan ini tidak pernah menyebut RedBoard itu sebagai Arduino Uno Compatible, mereka tetap menyatakan dengan nama RedBoard tanpa menggunakan kata \"Arduino\", \"Uno\" ataupun \"Compatible\".","title":"Arduino Uno Compatible"},{"location":"blog/2019/memilih-arduino/#arduino-uno-palsu","text":"Arduino Uno Palsu atau dikenal dipasaran dengan nama Arduino Uno Clone adalah papan Arduino Uno yang dibuat oleh orang atau perusahaan tanpa nama dengan segala halnya sama persis dengan papan Arduino Uno original. Menggunakan merk dagang \"Arduino Uno\", dengan warna yang hampir sama, dengan tata letak yang sama, dengan komponen yang hampir sama, segala halnya disamakan dengan Arduino Uno original. Gambar 3. Arduino Uno Palsu Bahkan penulis memiliki satu papan Arduino Uno Palsu dengan kualitas yang hampir sama dengan aslinya yang dipasaran Indonesia sering di kenal dengan \"Arduino Uno Grade A\". Arduino Uno Grade A memiliki tata letak komponen yang sangat rapi, kualitas cat yang bagus, masking atas bawah yang bagus, komponen dengan kualitas lumayan bagus, walaupun sebenarnya jika kita jeli akan ditemukan beberapa perbedaan mencolok. Yang menjadi pertanyaan \"Kenapa mereka harus membajak?\". Padahal jika diberi nama lain, misal \"Henduino\" maka papan tersebut akan masuk kategori Arduino Compatible. Papan Arduino dikembangkan dibawah lisensi Open Source Open Hardware yang ini berarti siapapun dapat membuat, mengembangkan dan menjualnya kepasaran internasional dengan syarat \"tidak menggunakan merk dagang yang sama dan tidak membuat papan dengan segala hal yang sama, harus ada pengembangan atau modifikasi\". Arduino Uno bajakan dijual dengan harga sangat murah jika dibandingkan dengan Arduino Uno original. Dalam hal ini penulis tidak menyarankan apa-apa, apakah harus original atau bajakan. Kembali kepada anda sebagai pengguna.","title":"Arduino Uno Palsu"},{"location":"blog/2019/memilih-arduino/#perbedaan-arduino-original-dengan-arduino-palsu","text":"Mau menggunakan Arduino Uno original, compatible, atau bahkan clone adalah menjadi hak para penggunanya. Namun untuk para pembuat papan Arduino Clone, semestinya mereka tidak menggunakan merk dagang \"Arduino\" hal ini karena pengembang Arduino sudah bermurah hati dengan lisensi Open Hardware untuk papan Arduino-nya dan lisensi Open Source untuk perangkat lunak Arduino IDE-nya. Penggunaan merk dagang \"Arduino\" hanya akan menyakiti dan merugikan perusahaan Arduino serta membingungkan dan merugikan konsumen. Kita sebagai konsumen diharapkan bijak dan jeli dalam merencakan pembelian papan Arduino. Dibawah ini ada beberapa indikator yang bisa kita gunakan untuk mengidentifikasi papan Arduino yang original dan yang bajakan. Warna Warna otentik papan Arduino adalah percampuran antara warna hijau dengan biru atau warna klasik lebut dan seperti warna pudar. Sedangkan papan Arduino palsu biasanya berwarna biru hingga warna biru tajam (dominan warna biru). Gambar 4. Warna Papan Arduino Original dan Bajakan Logo Pada bagian logo Arduino, kita akan menemukan perbedaan yang cukup jelas. Perhatikan logo asli Arduino, dan bandingkan dengan yang palsu. Logo pada papan palsu tercetak kurang tajam, lubang pada huruf \"A\" menghilang, bagian tepi garis logo bergelombang dan kurang rapi terutama pada bagian lengkungan logo. Gambar 5. Logo Huruf Arduino Original dan Bajakan Huruf Amati huruf dengan hati-hati pada kata \"Arduino\" dan \"Uno\" yang tertulis pada papan, maka akan ditemukan perbedaan. Jenis huruf Arduino di rancang secara khusus, sedangkan pada papan Arduino palsu atau bajakan cenderung diabaikan atau tidak sama persis. Perhatikan huruf \"O\" pada gambar! Peta Perhatikan juga bagian peta. Pada papan asli tampak dengan jelas peta negara Itali hal ini untuk menghormati tempat kelahiran Arduino. Sedangkan pada papan Arduino palsu peta tidak begitu jelas bahkan seperti layang-layang terbang. Gambar 6. Peta Arduino Original dan Bajakan Jalur dan konektor Pada papan Arduino Asli terlihat jalur dan konektor antar komponen tampak rapi dan teranyam dengan indah. Sedangkan pada papan Arduino Palsu tampak berantakan dan jelek. Gambar 7. Jalur Komponen Arduino Original dan Bajakan Komponen Komponen merupakan bagian yang paling sulit untuk dipalsukan. Komponen dengan kode 501K yang terletak dekat dengan Regulator Tegangan biasanya berwarna hijau pada papan Arduino palsu. Sebenarnya yang berwarna hijau memiliki properti yang hampir sama dengan yang digunakan pada papan Arduino Asli dengan warna emas-hitam. Hal ini menjadi hal spesial bagi Arduino Asli karena komponen ini merupakan komponen yang paling sulit di cari. Kata Kunci (Keyword) Sebenarnya para pembuat dan penjual papan Arduino palsu tahu bahwa mereka melanggar merk dagang. Makanya dalam menjualnya pun mereka tidak berani terang-terangan dengan mengatakan/menuliskan \"Arduino Uno\". Biasanya mereka menggunakan kata kunci pendekatan, misal; Arduino Uno Compatible, Arduino Uno Clone, Uno for Arduino, Arduino Uno Grade A, dan beberapa kata kunci yang mirip. Harga Inilah bagian yang paling mencolok diantara perbedaan yang sudah disebut diatas. Papan Arduino Palsu atau Clone dijual dengan harga sangat murah hingga 50% jika dibandingkan dengan harga papan Arduino Original. Papan Arduino Palsu dijual rata-rata setengah dari harga Arduino asli. Bahkan biasanya penjual memberikan tambahan berupa kabel data USB.","title":"Perbedaan Arduino Original dengan Arduino Palsu"},{"location":"blog/2019/memilih-arduino/#atmega328-dip-chip-dan-smd-chip","text":"Pihak Arduino telah mengembangkan 2 versi Arduino Uno, yaitu Arduino Uno dengan mikrokontroller ATmega328 tipe DIP (Dual-Inline Package) dan Arduino Uno dengan mikrokontroller ATmega328 tipe SMD (Small Mount Device). Tipe DIP merupakan papan Arduino yang paling banyak kita temukan dipasaran. Chip mikrokontroller dipasang pada sebuah socket untuk memudahkan penggantian jika suatu hari mikrokontroller tersebut sudah habis masa guna-nya. Tipe DIP sangat cocok untuk para pemula yang sedang belajar dan sering melakukan upload kode. Gambar 8. Arduino Uno SMD dan Arduino Uno DIP Sedangkan tipe SMD menggunakan mikrokontroller berbentuk kecil yang tertanam langsung pada papan tanpa bisa dilepas. Jika masa guna-nya telah habis maka kita sulit untuk menggantinya. Tipe ini cocok digunakan untuk proyek robotik yang tidak terlalu sering melakukan upload kode. Dari sisi harga, tipe SMD lebih murah dibandingkan dengan tipe DIP. Jika anda sedang belajar tentang pemrograman Arduino penulis menyarankan untuk memilih Arduino Uno dengan mikrokontroller tipe DIP.","title":"ATmega328 DIP Chip dan SMD Chip"},{"location":"blog/2019/memilih-arduino/#usb-to-serial-chip","text":"USB-to-Serial Chip yang digunakan pada Arduino Uno ada beberapa jenis, yaitu; ATmega16U2, FTDI dan CH340. Arduino Uno yang menggunakan USB-to-Serial dengan chip ATmega16U2 biasanya dibandrol dengan harga tertinggi. Sedangkan papan Arduino Uno yang menggunakan USB-to-Serial dengan chip FTDI dijual lebih murah. Gambar 9. USB-to-Serial Chip pada Arduino Uno Sedangkan yang termurah adalah papan Arduino Uno yang menggunakan USB-to-Serial dengan chip CH340, bahkan perbadaan harganya sangat jauh jika dibandingkan dengan yang menggunakan chip ATmega16U2 ataupun chip FTDI. Papan Arduino Uno yang menggunakan USB-to-Serial dengan chip CH340 dapat dipastikan sebagai papan Arduino Bajakan. Karena tidak ada satu varian pun Arduino yang menggunakan USB-to-Serial CH340. Namun demikian, papan Arduino Uno dengan USB-to-Serial CH340 tetap mampu bekerja dengan baik layaknya yang menggunakan chip FTDI ataupun ATmega16U2.","title":"USB-to-Serial Chip"},{"location":"blog/2019/memilih-arduino/#rekomendasi-pembelian","text":"Untuk menentukan pilihan tepat tentang papan Arduino Uno yang akan dibeli maka kita harus mampu mendefinisikan maksud dan tujuan kita. Pada dasarnya ada 2 kepentingan, yaitu; (1) Membeli Arduino untuk belajar dan, (2) Membeli Arduino untuk sebuah proyek yang berhubungan dengan dana orang lain. Jika rencananya untuk belajar tentang pemrograman Arduino maka akan lebih tepat untuk membeli Arduino Uno dengan harga murah, terlepas dari masalah original atau pun bajakan. Sesuaikan saja dengan ketersediaan dana yang anda miliki. Arduino dengan harga murah akan memaksimalkan proses pembelajaran, sedikit rasa takut baik takut rusak maupun takut masa guna-nya habis. Jika rencananya untuk membuat proyek yang berhubungan dengan dana orang lain, maka akan lebih tepat untuk menggunakan Arduino berkualitas (Original). Hal ini karena Arduino original terjaga kualitasnya. Selain itu jika kita menggunakan Arduino Original berarti kita telah menjaga keberlangsungan perusahaan Arduino. Harga yang mahal setara dengan apa yang diberikan oleh perusahaan Arduino kepada penggunanya. Secara langsung kita telah membantu pendanaan perusahaan Arduino dan telah menciptakan: Pengembangan hardware open source baru dan terbaru. Dokumentasi yang lebih baik. Sertifikat CE/FCC. Kontrol Kualitas (Quality Control). Memanajemen Komunitas. Penerbitan Tutorial. Menyumbang proyek open source lainnya. Memelihara hosting/pemeliharaan website dan forum.","title":"Rekomendasi Pembelian"},{"location":"blog/2019/memilih-arduino/#kesimpulan","text":"Sebagai penegasan, bahwa di pasaran hanya ada 2 kategori, yaitu Original (Asli) dan Palsu (Bajakan). Tidak ada istilah compatible untuk mengkamuflasekan kualitas palsu. Artikel diatas menggunakan istilah compatible sebenarnya hanya untuk memudahkan pembagian papan Arduino yang beredar dipasaran. RedBoard, Seeduino, Arduino Nano, Freeduino adalah tetap masuk kategori original (asli) tetapi karena tidak dibuat oleh perusahaan Arduino maka dimasukan kategori compatible untuk mempermudah pemahaman. Dan harus diingat, istilah compatible yang digunakan di pasaran Indonesia maupun internasional tetap mengacu pada papan Arduino bajakan. Jika kita ingin membantu pengembangan Arduino maka belilah Arduino Original atau Asli. Memang lebih mahal tapi dana tersebut digunakan untuk penelitian dan pengembangan Arduino dimasa mendatang. Tapi dana saya tidak cukup untuk membeli kualitas original? Ah itu sih terserah anda... Jika dana tidak mencukupi untuk membeli kualitas original sebenarnya kita masih bisa untuk membuatnya sendiri tanpa harus membeli bajakan. Pada artikel mendatang akan dibahas cara membuat sendiri papan Arduino dengan fungsi sama dengan proses dan rangkaian yang lebih sederhana. Mau???","title":"Kesimpulan"},{"location":"blog/2019/memilih-arduino/#daftar-pustaka","text":"How to spot a counterfeit Arduino Distributor Resmi Arduino","title":"Daftar Pustaka"},{"location":"blog/2019/the-untold-history-of-arduino/","text":"The Untold History of Arduino Why Are You Writing This? Hello. My name is Hernando Barrag\u00e1n . Through the years, and more recently due to the affairs between Arduino LLC and Arduino S.R.L. , I have received a lot of questions from people about the history of Wiring and, of course, Arduino. I was also shown this US Federal Courts website , which presents documents citing my work to support the plaintiff's claims which, in my opinion, contribute to the distortion of information surrounding my work. The history of Arduino has been told by many people, and no two stories match. I want to clarify some facts around the history of Arduino, with proper supported references and documents, to better communicate to people who are interested, about Arduino's origin. As well, I will attempt to correct some things that have distorted my role or work by pointing out common mistakes, misleading information, and poor journalism. I will go through a summary of the history first, then I will answer a series of questions that I have been often asked over the years. Why Did You Create Wiring? I started Wiring in 2003 as my Master's thesis project at the Interaction Design Institute Ivrea (IDII) in Italy. The objective of the thesis was to make it easy for artists and designers to work with electronics, by abstracting away the often complicated details of electronics so they can focus on their own objectives. The full thesis document can be downloaded here: http://people.interactionivrea.org/h.barragan/thesis/thesis_low_res.pdf Massimo Banzi and Casey Reas (known for his work on Processing ) were supervisors for my thesis. The project received plenty of attention at IDII, and was used for several other projects from 2004, up until the closure of the school in 2005. Because of my thesis, I was proud to graduate with distinction; the only individual at IDII in 2004 to receive the distinction. I continued the development of Wiring while working at the Universidad de Los Andes in Colombia, where I began teaching as an instructor in Interaction Design. What Wiring is, and why it was created can be extracted from the abstract section of my thesis document. Please keep in mind that it was 2003, and these premises are not to be taken lightly. You may have heard them before recited as proclamations: \"... Current prototyping tools for electronics and programming are mostly targeted to engineering, robotics and technical audiences. They are hard to learn, and the programming languages are far from useful in contexts outside a specific technology ...\" \"... It can also be used to teach and learn computer programming and prototyping with electronics...\" \"Wiring builds on Processing...\" These were the key resulting elements of Wiring: Simple integrated development environment (IDE), based on the Processing.org IDE running on Microsoft Windows, Mac OS X, and Linux to create software programs or \"sketches\" 1 , with a simple editor Simple \"language\" or programming \"framework\" for microcontrollers Complete toolchain integration (transparent to user) Bootloader for easy uploading of programs Serial monitor to inspect and send data from/to the microcontroller Open source software Open source hardware designs based on an Atmel microcontroller Comprehensive online reference for the commands and libraries, examples, tutorials, forum and a showcase of projects done using Wiring How Was Wiring Created? Through the thesis document, it is possible to understand the design process I followed. Considerable research and references to prior work has served as a basis for my work. To quickly illustrate the process, a few key points are provided below. The Language Have you ever wondered where those commands come from? Probably one of the most distinctive things, that is widely known and used today by Arduino users in their sketches, is the set of commands I created as the language definition for Wiring. pinMode() digitalRead() digitalWrite() analogRead() analogWrite() delay() millis() etc... Abstracting the microcontroller pins as numbers was, without a doubt, a major decision, possible because the syntax was defined prior to implementation in any hardware platform. All the language command naming and syntax were the result of an exhaustive design process I conducted, which included user testing with students, observation, analysis, adjustment and iteration. As I developed the hardware prototypes, the language also naturally developed. It wasn't until after the final prototype had been made that the language became solid and refined. If you are still curious about the design process, it is detailed in the thesis document, including earlier stages of command naming and syntax that were later discarded. The Hardware From a designer's point of view, this was probably the most difficult part to address. I asked for or bought evaluation boards from different microcontroller manufacturers. Here are some key moments in the hardware design for Wiring. Prototype 1 The first prototype for Wiring used the Parallax Javelin Stamp microcontroller. It was a natural option since it was programmed in a subset of the Java language, which was already being used by Processing. Problem: as described in the thesis document on page 40, compiling, linking and uploading of user's programs relied on Parallax's proprietary tools. Since Wiring was planned as open source software, the Javelin Stamp was simply not a viable option. Above: Cupcake indexer in progress For the next prototypes, microcontrollers were chosen on a basis of availability of open source tools for compiling, linking and uploading the user's code. This led to discarding the very popular Microchip PIC family of microcontrollers very early, because, at the time (circa 2003), Microchip did not have an open source toolchain. Prototype 2 For the second Wiring hardware prototype, the Atmel ARM-based AT91R40008 microcontroller was selected, which lead to excellent results. The first sketch examples were developed and command naming testing began. For example, pinWrite() used to be the name of the now ubiquitous digitalWrite() . The Atmel R40008 served as a test bed for the digital input/output API and the serial communications API, during my evaluation of its capabilities. The Atmel R40008 was a very powerful microcontroller, but was far too complex for a hands-on approach because it was almost impossible to solder by hand onto a printed circuit board. For more information on this prototype, see page 42 in the thesis document. Prototype 3 The previous prototype experiments led to the third prototype, where the microcontroller was downscaled to one still powerful, yet with the possibility of tinkering with it without the requirements of specialized equipment or on-board extra peripherals. I selected the Atmel ATmega128 microcontroller and bought an Atmel STK500 evaluation board with a special socket for the ATmega128. Photo of Atmel STK500 with ATmega128 expansion. Tests with the STK500 were immediately successful, so I bought a MAVRIC board from BDMICRO with the ATmega128 soldered. Brian Dean's work on his MAVRIC boards were unparalleled at that time, and his work drove him to build a software tool to easily upload new programs to his board. It is still used today in the Arduino software, and is called \"avrdude\". As traditional COM ports were disappearing from computers, I selected FTDI hardware for communication through a USB port on the host computer. FTDI provided drivers for Windows, Mac OS X and Linux which was required for the Wiring environment to work on all platforms. Photo of BDMICRO MAVRIC-II used for the third Wiring hardware prototype. Photo of an FTDI FT232BM evaluation board used in the third Wiring hardware prototype. The FTDI evaluation board was interfaced with the MAVRIC board and tested with the third Wiring prototype. Testing with the BDMICRO MAVRIC-II board and FTDI-FT232BM. In early 2004, based on the prototype using the MAVRIC board (Prototype 3), I used Brian Dean's and Pascal Stang's schematic designs as a reference to create the first Wiring board design. It had the following features: ATmega128 FTDI232BM for serial to USB conversion An on-board LED connected to a pin A power LED and serial RX/TX LEDs I used Eagle PCB from Cadsoft to design the schematic and printed circuit board. Wiring board schematic. Wiring board printed circuit board layout. Along with the third prototype, the final version of the API was tested and refined. More examples were added and I wrote the first LED blink example that is still used today as the first sketch that a user runs on an Arduino board to learn the environment. Even more examples were developed to support liquid crystal displays (LCDs), serial port communication, servo motors, etc. and even to interface Wiring with Processing via serial communication. Details can be found on page 50 in the thesis document. In March 2004, 25 Wiring printed circuit boards were ordered and manufactured at SERP , and paid for by IDII. I hand-soldered these 25 boards and started to conduct usability tests with some of my classmates at IDII. It was an exciting time! Photos of the first Wiring board Continuing the Development After graduating from IDII in 2004, I moved back to Colombia, and began teaching as an instructor in Interaction Design at the Universidad de Los Andes. As I continued to develop Wiring, IDII decided to print and assemble a batch of 100 Wiring boards to teach physical computing at IDII in late 2004. Bill Verplank (a former IDII faculty member) asked Massimo Banzi to send 10 of the boards to me for use in my classes in Colombia. In 2004, Faculty member Yaniv Steiner , former student of Giorgio Olivero and Paolo Sancis, started the Instant Soup Project , based on Wiring at IDII. First Major Success - Strangely Familiar In the autumn of 2004, Wiring was used to teach physical computing at IDII through a project called Strangely Familiar, consisting of 22 students, and 11 successful projects. Four faculty members ran the 4-week project: Massimo Banzi Heather Martin Yaniv Steiner Reto Wettach It turned out to be a resounding success for both the students as well as the professors and teachers. Strangely Familiar demonstrated the potential of Wiring as an innovation platform for interaction design. On December 16 th , 2004, Bill Verplank sent an email to me saying: [The projects] were wonderful. Everyone had things working. Five of the projects had motors in them! The most advanced (from two MIT grads - architect and mathematician) allowed drawing a profile in Proce55ing and feeling it with a wheel/motor run by Wiring... It is clear that one of the elements of success was [the] use of the Wiring board. Here is the brief for the course: http://wiring.org.co/exhibition/images/brief.pdf Here is a booklet with the resulting projects: http://wiring.org.co/exhibition/images/book01.pdf Tug Tug phones by Haiyan Zhang (with Aram Armstrong) Commitment Radio by David Chiu and Alexandra Deschamps-Sonsino Speak Out by Tristam Sparks and Andreea Cherlaru (with Ana Camila Amorim) Feel the Music I by James Tichenor and David A. Mellis The Amazing All Band Radio by Oren Horev Myriel Milicevic (with Marcos Weskamp) The Rest of the World In May 2005, I contracted Advanced Circuits in the USA to print the first 200 printed circuit boards outside of IDII, and assembled them in Colombia. I began selling and shipping boards to various schools and universities, and by the end of 2005, Wiring was being used around the world. \"Wiring's Reach by 2005\" graphic, provided by Collin Reisdorf When Did Arduino Begin and Why Weren't You a Member of the Arduino Team? The Formation of Arduino When IDII manufactured the first set of Wiring boards, the cost was probably around USD$50 each. (I don't know what the actual cost was, as I wasn't involved in the process. However, I was selling the boards from Colombia for about USD$60.) This was a considerable drop in price from the boards that were currently available, but it was still a significant cost for most people. In 2005, Massimo Banzi, along with David Mellis (an IDII student at the time) and David Cuartielles, added support for the cheaper ATmega8 microcontroller to Wiring. Then they forked (or copied) the Wiring source code and started running it as a separate project, called Arduino. There was no need to create a separate project, as I would have gladly helped them and developed support for the ATmega8 and any other microcontrollers. I had planned to do this all along. I had inadvertantly taken a photo of some notes about my plans for Wiring, in the photo of Karmen Franinovic (former IDII student from 2002 to 2004) testing a stretch sensor for a lamp in March 2004. Wiring and Arduino shared many of the early development done by Nicholas Zambetti , a former IDII student in the same class as David Mellis. For a brief time, Nicholas had been considered a member of the Arduino Team. Around the same time, Gianluca Martino (he was a consultant at SERP, the printed circuit board factory at Ivrea where the first Wiring boards were made), joined the Arduino Team to help with manufacturing and hardware development. So, to reduce the cost of their boards, Gianluca, with some help from David Cuartielles, developed cheaper hardware by using the ATmega8. Apparently this is the first \"Arduino\" prototype - dubbed Wiring Lite. I think Massimo Banzi designed this one, but I'm unsure. Arduino Extreme v2 - \"Second production version of the Arduino USB boards. This has been properly engineered by Gianluca Martino.\" Tom Igoe (a faculty member at the ITP at NYU 2 ) was invited by Massimo Banzi to IDII for a workshop and became part of the Arduino Team. To this day, I do not know exactly why the Arduino Team forked the code from Wiring. It was also puzzling why we didn't work together. So, to answer the question, I was never asked to become a member of the Arduino Team. Even though I was perplexed by the Arduino Team forking the code, I continued development on Wiring, and almost all of the improvements that had been made to Wiring, by me and plenty of contributors, were merged into the Arduino source code. I tried to ignore the fact that they were still taking my work and also wondered about the redundancy and waste of resources in duplicating efforts. By the end of 2005, I started to work with Casey Reas on a chapter for the book \" Processing: A Programming Handbook for Visual Artists and Designers .\" The chapter presents a short history of electronics in the Arts. It includes examples for interfacing Processing with Wiring and Arduino. I presented those examples in both platforms and made sure the examples included worked for both Wiring and Arduino. The book got a second edition in 2013 and the chapter was revised again by Casey and me, and the extension has been made available online since 2014. Did The Arduino Team Work with Wiring Before Arduino? Yes, each of them had experience with Wiring before creating Arduino. Massimo Banzi taught with Wiring at IDII from 2004. Massimo Banzi teaching interaction design at IDII with Wiring boards in 2004. David Mellis was a student at IDII from 2004 to 2005. A blurry version of David Mellis learning physical computing with Wiring in 2004. In January 2005, IDII hired David Cuartielles to develop a couple of plug-in boards for the Wiring board, for motor control and bluetooth connectivity. Two plug-in boards developed at IDII by David Cuartielles and his brother. Bluetooth shield on the left, and a motor controller shield on the right. I showed early versions of Wiring to Tom Igoe during a visit to ITP in New York in 2003. At the time, he had no experience with Atmel hardware, as Tom was using PIC microcontrollers at ITP as an alternative to the costly platforms like Parallax Basic Stamp or Basic X. One of Tom's recommendations at this visit was: \"well, do it for PIC, because this is what we use here.\" Years later, in 2007, Tom Igoe released the first edition of the \"Making Things Talk\" book published by O'Reilly 3 , which presents the use of both Wiring and Arduino. Gianluca Martino originally worked for SERP (the factory that made the first 25 Wiring circuit boards) and later he founded Smart Projects SRL (April 1 st , 2004). Smart Projects made the first batch of 100 Wiring boards for IDII to teach physical computing in 2004. What is Programma2003 and How is it Related to You or to Wiring? Programma2003 was a Microchip PIC microcontroller board developed by Massimo Banzi in 2003. After using BasicX to teach Physical computing in the winter of 2002, Massimo decided to do a board using the PIC chip in 2003. The problem with the PIC microcontrollers was that there wasn't an open source toolchain available at the time, to use a language like C to program them. Programma2003 board designed by Massimo Banzi in 2003 Because of the lack of an open source toolchain, Massimo decided to use an environment called JAL (Just Another Language) to program the PIC microcontroller. JAL was created by Wouter van Ooijen. It consisted of the JAL compiler, linker, uploader, bootloader and examples for the PIC. However, the software would only run on Windows. To make JAL easier to use, Massimo used the base examples from JAL and simplified some of them for the distribution package for IDII. However, in 2003, most students at IDII used Mac computers. So I volunteered to help Massimo by making a small and simple environment for Mac OS X so students with a Mac could use it as well. In my thesis document, I characterized Programma2003 as a non-viable model to follow, since other more comprehensive tools were already available in the market. The main problems were: the language is far from useful in any other context (e.g. you can't program your computer using JAL) it's arcane syntax and the hardware design made it highly unlikely to go somewhere in the future for teaching and learning the board didn't have a power LED (a design flaw) It was impossible to know if it was powered or not (frustrating/dangerous in a learning environment) and an additional RS232 to USB expensive converter was required to connect it to a computer. As a gesture to help Massimo's Programma2003 project, I also wrote something I called Programma2003 Interface, which basically interfaced any serial communication between a microcontroller and a computer with the network. This expanded the prototyping toolbox at IDII. It allowed students to use software like Adobe Flash (formerly Macromedia) to communicate with a microcontroller. Programma2003 Interface Code Why Hasn't Arduino Acknowledged Wiring Better? I don't know. The reference to Wiring on the Arduino.cc website, although it has improved slightly over time, is misleading as it tries to attribute Wiring to Programma2003. Arduino.cc website version of Arduino's History from https://www.arduino.cc/en/Main/Credits Adding to the confusion is this Flickr photo album by Massimo Banzi: https://www.flickr.com/photos/mbanzi/albums/72157633136997919/with/8610131426/ It is called \"Teaching: IDII 2004 Strangely Familiar\". Strangely Familiar was taught with Wiring (see above). This photo album seems to associate the Programma2003 with the class, but it was, in fact, never used. It is odd that the Wiring boards are absent from the album, however one Wiring board picture does appear. It is no secret that the acknowledgement of Wiring has been very limited in the past. Back in 2013, at Open Hardware Summit at MIT, during the panel \"Implications of Open Source Business: Forking and Attribution\", David Mellis acknowledges, for the first time, that the Arduino Team hadn't done a very good job acknowledging Wiring. Unfortunately, he didn't go into details why they hadn't. The Plaintiff vs. The Defendant I've been quiet about everything that has happened with Arduino for a long time. But now that people are fraudulently saying that my work is their's, I feel like I need to speak up about the past. For example, in the ongoing case between Arduino LLC and Arduino S.R.L., there is a claim , by the Plaintiff, such that: 34. Banzi is the creator of the Programma2003 Development Platform, a precursor of the many ARDUINO-branded products. See: http://sourceforge.net/projects/programma2003/ . Banzi was also the Master's Thesis advisor of Hernando Barragan whose work would result in the Wiring Development Platform which inspired Arduino. Here is what, in my opinion, is wrong with that claim: The Programma2003 was not a Development Platform, it was simply a board. There was no software developed by the Plaintiff to accompany that board. The link is empty, there are no files in that Sourceforge repository, so why present an empty repository as evidence? The idea that the mere fact that Banzi was my thesis advisor gives him some sort of higher claim to the work done on Wiring, is, to say the least, frustrating to read. Further on: 39. The Founders, assisted by Nicholas Zambetti, another student at IDII, undertook and developed a project in which they designed a platform and environment for microcontroller boards (\"Boards\") to replace the Wiring Development Project. Banzi gave the project its name, the ARDUINO project. Here are the questions I'd ask \"The Founders:\" Why did the \"Wiring Development Project\" need to be replaced? Did you ask the developer if he would work with you? Did you not like the original name? (Banzi gave the project its name, after all) I know it might be done now and again, but, in my opinion, it is unethical and a bad example for academics to do something like this with the work of a student. Educators, more than anybody else, should avoid taking advantage of their student's work. In a way, I still feel violated by \"The Founders\" for calling my work their's. It may be legal to take an open source software and hardware project's model, philosophy, discourse, and the thousands of hours of work by its author, exert a branding exercise on it, and release it to the world as something \"new\" or \"inspired\", but... is it right? Continuous Misleading Information Someone once said: \"If we don't make things ultra clear, people draw their own conclusions and they become facts even if we never said anything like that.\" 4 It seems to me that this is universally true, and especially if you mislead people with only slight alterations of the truth, you can have control over their conclusions. Here are a couple of mainstream examples of misleading information. The Infamous Diagram http://blog.experientia.com/uploads/2013/10/Interaction_Ivrea_arduino.pdf This diagram was produced to tell the story of the prototyping tools developed at IDII. It was beautifully done by Giorgio Olivero, using the content provided by the school in 2005, and released in 2006. The projects presented in the red blobs, although they were made with Wiring, appear to be associated with Arduino at a time when Arduino didn't even exist , nor was even close to being ready to do them. Some of the authors of the projects inquired about the mistake, and why their projects were shifted to Arduino, but received no response. Despite the fact that nothing was changed in this highly public document, I have to thank the support of the students who pointed it out and inquired about it. The Arduino Documentary Another very public piece of media from 2010 was The Arduino Documentary (written and directed by Ra\u00fal Alaejos, Rodrigo Calvo). This one is very interesting, especially seeing it today in 2016. I think the idea of doing a documentary is very good, especially for a project with such a rich history. Here are some parts that present some interesting contradictions: 1:45 - \"We wanted it to be open source so that everybody could come and help, and contribute.\" It is suggested here that Wiring was closed source. Because part of Wiring was based on Processing, and Processing was GPL open source, as well as all the libraries, Wiring, and hence Arduino, had to be open source. It was not an option to have it be closed source. Also, the insinuation that they made the software easier is misleading, since nothing changed in the language, which is the essence of the project's simplicity. 3:20 - David Cuartielles already knew about Wiring, as he was hired to design two plug-in boards for it by IDII in 2005 as pointed out earlier in this document. David Mellis learned physical computing using Wiring as a student at IDII in 2004. Interestingly, Gianluca came in as the person who was able to design the board itself (he wasn't just a contractor for manufacturing); he was part of the \"Arduino Team\". 8:53 - David Cuartielles is presenting at the Media Lab in Madrid, in July 2005: \"Arduino is the last project, I finished it last week. I talked to Ivrea's technical director and told him: Wouldn't it be great if we can do something we offer for free? he says - For free? - Yeah!\" David comes across here as the author of a project that he completed \"last week\", and convincing the \"technical director\" at IDII to offer it for free. 18:56 - Massimo Banzi: For us at the beginning it was a specific need: we knew the school was closing and we were afraid that lawyers would show up one day and say - Everything here goes into a box and gets forgotten about. - So we thought - OK, if we open everything about this, then we can survive the closing of the school - So that was the first step. This one is very special. It misleadingly presents the fact of making Arduino open source as the consequence of the school closing. This poses a question: why would a bunch of lawyers \"put in a box\" a project based on other open source projects? It is almost puerile. The problem is, common people might think this is true, forming altruistic reasons for the team to make Arduino open source. Absence of Recognition Beyond Wiring There seems to be a trend in how the Arduino Team fails to recognize significant parties that contributed to their success. In October 2013, Jan-Christoph Zoels (a former IDII faculty member) wrote to the IDII community mail list, a message presenting the article released at Core77 about the Intel-Arduino news on Wired UK : A proud moment to see Intel referring to an Interaction Ivrea initiative. And a good investment too: Arduino development was started and developed at Interaction Design Institute Ivrea with an original funding of circa 250.000\u20ac. Another good decision was to keep Arduino as open source at the end of Interaction Ivrea in 2005 before merging with Domus. To which Massimo Banzi responded: I would like to point out that we never got any funding from Ivrea for Arduino (apart from buying 50 of them in the last year of the institute) 250.000 EUR is ridiculous\u2026 This article must be retracted now Sorry JC but you had nothing to do.with this.... You can't possibly try to get credit for.something you hadn't been involved with It was nice, however, to get this a few days later in the same email thread: Distorted Public Information In this section, I just wanted to show a fraction of the many different articles (and other press) that have been written about Arduino, which include its history that is rarely told the same way twice. So, please, read them at your leisure, and form your own opinions, and, definitely, ask questions! Poor Journalism It is rare to see well researched journalism these days. The articles below are excellent examples of that postulate. Wired In a 2008 Wired interview , Banzi explains how he did Arduino in a weekend: The two decided to design their own board and enlisted one of Banzi's students\u2014David Mellis\u2014to write the programming language for it. In two days, Mellis banged out the code ; three days more and the board was complete. They called it the Arduino, after a nearby pub, and it was an instant hit with the students. This article has been written without any fact checking. It certainly doesn't help that the interviewee isn't telling them the right information. IEEE Spectrum Here is a 2011 IEEE Spectrum article , titled \"The Making of Arduino\". Again, the history is taken verbatim from the interviewee. I was not contacted before the article was published, even though I was mentioned. And I doubt that anyone from IDII was contacted. Just one of the many confusing parts of Arduino's history is in this quote: Since the purpose was to create a quick and easily accessible platform, they felt they'd be better off opening up the project to as many people as possible rather than keeping it closed. It was never closed. Circuits Today A 2014 article from Circuits Today has a very confusing opening: It was in the Interactive Design Institute [sic] that a hardware thesis was contributed for a wiring design by a Colombian student named Hernando Barragan. The title of the thesis was \"Arduino\u2013La rivoluzione dell'open hardware\" (\"Arduino \u2013 The Revolution of Open Hardware\"). Yes, it sounded a little different from the usual thesis but none would have imagined that it would carve a niche in the field of electronics. A team of five developers worked on this thesis and when the new wiring platform was complete, they worked to make it much lighter, less expensive, and available to the open source community. The title of my thesis is obviously wrong. There weren't five \"developers\" working on the thesis. And the code was always open source. Again, I wasn't contacted for reference. Makezine In a 2013 interview by Dale Dougherty with Massimo Banzi , once again the story changes: Wiring had an expensive board, about $100, because it used an expensive chip. I didn't like that, and the student developer and I disagreed. In this version of the story by Massimo Banzi, Arduino originated from Wiring, but it is implied that I was insistent on having an expensive board. Regarding the \"disagreement\": I never had a discussion with Massimo Banzi about the board being too expensive. I wish that he and I would have had more discussions on such matters, as I had with other advisors and colleagues, as I find it very enriching. The closest thing to a disagreement took place after a successful thesis presentation event, where Massimo showed some odd behaviour towards me. Because he was my advisor, I was at a disadvantage, but I asked Massimo why he was behaving badly towards me, to which I received no answer. I felt threatened, and it was very awkward. His odd behaviour extended to those who collaborated with me on Wiring later on. I decided that we could make an open source version of Wiring, starting from scratch. I asked Gianluca Martino [now one of the five Arduino partners] to help me manufacture the first prototypes, the first boards. Here, Massimo is again implying that Wiring wasn't open source, which it was. And also that they would build the software from \"scratch\", which they didn't. Academic Mistakes I understand how easy it is to engage people with good storytelling and compelling tales, but academics are expected to do their homework, and at least check the facts behind unsubstantiated statements. In this book, Making Futures: Marginal Notes on Innovation, Design, and Democracy Hardcover \u2013 October 31, 2014 by Pelle Ehn (Editor), Elisabet M. Nilsson (Editor), Richard Topgaard (Editor): Chapter 8: How Deep is Your Love? On Open-Source Hardware (David Cuartielles) Info In 2005, at the Interaction Design Institute Ivrea, we had the vision that making a small prototyping platform aimed at designers would help them getting a better understanding of technology. David Cuartielles' version of Arduino's history doesn't even include Wiring. This book has been released chapter by chapter under Creative Commons: http://dspace.mah.se/handle/2043/17985 More Links for Your Perusal Wiring as predecessor to Arduino: http://ptgmedia.pearsoncmg.com/images/9780321906045/samplepages/9780321906045.pdf Interview with Ben Fry and Casey Reas: http://rhizome.org/editorial/2009/sep/23/interview-with-casey-reas-and-ben-fry/ Safari Books Online, Casey Reas, Getting Started with Processing, Chapter One, Family Tree: https://www.safaribooksonline.com/library/view/getting-started-with/9781449379827/ch01.html Nicholas Zambetti Arduino Project Page: http://www.zambetti.com/projects/arduino/ (Nicholas did a lot of work with both Wiring and Arduino) Articles About Arduino vs. Arduino Wired Italy - What's happening in Arduino? http://www.wired.it/gadget/computer/2015/02/12/arduino-nel-caos-situazione/ Repubblica Italy - Massimo Banzi: \"The Reason of the War for Arduino\" http://playground.blogautore.repubblica.it/2015/02/11/la-guerra-per-arduino-la-perla-hi-tech-italiana-nel-caos/ Makezine - Massimo Banzi Fighting for Arduino http://makezine.com/2015/03/19/massimo-banzi-fighting-for-arduino/ Hackaday - Federico Musto of Arduino SRL discusses Arduino legal situation http://hackaday.com/2015/07/23/hackaday-interviews-federico-musto-of-arduino-srl/ Hackaday - Federico Musto of Arduino SRL shows us new products and new directions http://hackaday.com/2016/01/04/new-products-and-new-directions-an-interview-with-federico-musto-of-arduino-srl/ Video Massimo going to Ted Talk -- candid (2012-08-06) This is a candid view of Massimo just before performing at a TED Talk. You can make your own mind up about the majority of the video, however, the most interesting comment, in my opinion, is at the end , where he says: Massimo going to Ted Talk ... Innovation without asking for permission. So, in a way, Open Source allows you to be innovative without asking for permission. Thank You! Thank you for taking time to read this. I think it is very important, not just in the academic world, to properly acknowledge the origin of things. As I learned from fantastic educators, doing this properly not only enriches your work, but also positions it better to allow others to investigate and see where your ideas come from. Maybe they will find other alternatives or improve what was done and better position their own ideas. Personally, watching the outreach of what I created back in 2003 in so many different contexts, seeing those commands bringing to life people's ideas and creations from all over the world, has brought me so many satisfactions, surprises, new questions, ideas, awareness and friendships. I am thankful for that. I think it is important to know the past to avoid making the same mistakes in the future. Sometimes I wish I would have had a chance to talk about this differently, for a different motif. Instead, many times I have come across journalists and common people compromised in their independence. Either they had direct business with Arduino, or simply wanted to avoid upsetting Massimo Banzi. Or there are the close-minded individuals following a cause and refusing to see or hear anything different from what they believe. And then there are the individuals who are just part of the crowd that reproduce what they are told to reproduce. For those others, this document is an invitation to trust your curiosity, to question, to dig deeper in whatever interests you and is important to you as an individual or as a member of a community. I'll see you soon, Hernando. The notion of a \"Sketch\" within the context of writing programs comes from Processing and previously from Design by Numbers (DBN). It was extended by Wiring within the context of prototyping with electronics or \"sketching\" with hardware. Interactive Telecommunications Program at New York University Page 34, ISBN-13: 978-0596510510 ISBN-10: 0596510519, http://www.amazon.com/Making-Things-Talk-Practical-Connecting/dp/0596510519/ref=sr_1_2?ie=UTF8 sr=8-2 keywords=Making+Things+Talk https://groups.google.com/a/arduino.cc/d/msg/developers/HEKecd0qhS4/nADS2jW6DgAJ","title":"The Untold History of Arduino"},{"location":"blog/2019/the-untold-history-of-arduino/#the-untold-history-of-arduino","text":"","title":"The Untold History of Arduino"},{"location":"blog/2019/the-untold-history-of-arduino/#why-are-you-writing-this","text":"Hello. My name is Hernando Barrag\u00e1n . Through the years, and more recently due to the affairs between Arduino LLC and Arduino S.R.L. , I have received a lot of questions from people about the history of Wiring and, of course, Arduino. I was also shown this US Federal Courts website , which presents documents citing my work to support the plaintiff's claims which, in my opinion, contribute to the distortion of information surrounding my work. The history of Arduino has been told by many people, and no two stories match. I want to clarify some facts around the history of Arduino, with proper supported references and documents, to better communicate to people who are interested, about Arduino's origin. As well, I will attempt to correct some things that have distorted my role or work by pointing out common mistakes, misleading information, and poor journalism. I will go through a summary of the history first, then I will answer a series of questions that I have been often asked over the years.","title":"Why Are You Writing This?"},{"location":"blog/2019/the-untold-history-of-arduino/#why-did-you-create-wiring","text":"I started Wiring in 2003 as my Master's thesis project at the Interaction Design Institute Ivrea (IDII) in Italy. The objective of the thesis was to make it easy for artists and designers to work with electronics, by abstracting away the often complicated details of electronics so they can focus on their own objectives. The full thesis document can be downloaded here: http://people.interactionivrea.org/h.barragan/thesis/thesis_low_res.pdf Massimo Banzi and Casey Reas (known for his work on Processing ) were supervisors for my thesis. The project received plenty of attention at IDII, and was used for several other projects from 2004, up until the closure of the school in 2005. Because of my thesis, I was proud to graduate with distinction; the only individual at IDII in 2004 to receive the distinction. I continued the development of Wiring while working at the Universidad de Los Andes in Colombia, where I began teaching as an instructor in Interaction Design. What Wiring is, and why it was created can be extracted from the abstract section of my thesis document. Please keep in mind that it was 2003, and these premises are not to be taken lightly. You may have heard them before recited as proclamations: \"... Current prototyping tools for electronics and programming are mostly targeted to engineering, robotics and technical audiences. They are hard to learn, and the programming languages are far from useful in contexts outside a specific technology ...\" \"... It can also be used to teach and learn computer programming and prototyping with electronics...\" \"Wiring builds on Processing...\" These were the key resulting elements of Wiring: Simple integrated development environment (IDE), based on the Processing.org IDE running on Microsoft Windows, Mac OS X, and Linux to create software programs or \"sketches\" 1 , with a simple editor Simple \"language\" or programming \"framework\" for microcontrollers Complete toolchain integration (transparent to user) Bootloader for easy uploading of programs Serial monitor to inspect and send data from/to the microcontroller Open source software Open source hardware designs based on an Atmel microcontroller Comprehensive online reference for the commands and libraries, examples, tutorials, forum and a showcase of projects done using Wiring","title":"Why Did You Create Wiring?"},{"location":"blog/2019/the-untold-history-of-arduino/#how-was-wiring-created","text":"Through the thesis document, it is possible to understand the design process I followed. Considerable research and references to prior work has served as a basis for my work. To quickly illustrate the process, a few key points are provided below.","title":"How Was Wiring Created?"},{"location":"blog/2019/the-untold-history-of-arduino/#the-language","text":"Have you ever wondered where those commands come from? Probably one of the most distinctive things, that is widely known and used today by Arduino users in their sketches, is the set of commands I created as the language definition for Wiring. pinMode() digitalRead() digitalWrite() analogRead() analogWrite() delay() millis() etc... Abstracting the microcontroller pins as numbers was, without a doubt, a major decision, possible because the syntax was defined prior to implementation in any hardware platform. All the language command naming and syntax were the result of an exhaustive design process I conducted, which included user testing with students, observation, analysis, adjustment and iteration. As I developed the hardware prototypes, the language also naturally developed. It wasn't until after the final prototype had been made that the language became solid and refined. If you are still curious about the design process, it is detailed in the thesis document, including earlier stages of command naming and syntax that were later discarded.","title":"The Language"},{"location":"blog/2019/the-untold-history-of-arduino/#the-hardware","text":"From a designer's point of view, this was probably the most difficult part to address. I asked for or bought evaluation boards from different microcontroller manufacturers. Here are some key moments in the hardware design for Wiring.","title":"The Hardware"},{"location":"blog/2019/the-untold-history-of-arduino/#prototype-1","text":"The first prototype for Wiring used the Parallax Javelin Stamp microcontroller. It was a natural option since it was programmed in a subset of the Java language, which was already being used by Processing. Problem: as described in the thesis document on page 40, compiling, linking and uploading of user's programs relied on Parallax's proprietary tools. Since Wiring was planned as open source software, the Javelin Stamp was simply not a viable option. Above: Cupcake indexer in progress For the next prototypes, microcontrollers were chosen on a basis of availability of open source tools for compiling, linking and uploading the user's code. This led to discarding the very popular Microchip PIC family of microcontrollers very early, because, at the time (circa 2003), Microchip did not have an open source toolchain.","title":"Prototype 1"},{"location":"blog/2019/the-untold-history-of-arduino/#prototype-2","text":"For the second Wiring hardware prototype, the Atmel ARM-based AT91R40008 microcontroller was selected, which lead to excellent results. The first sketch examples were developed and command naming testing began. For example, pinWrite() used to be the name of the now ubiquitous digitalWrite() . The Atmel R40008 served as a test bed for the digital input/output API and the serial communications API, during my evaluation of its capabilities. The Atmel R40008 was a very powerful microcontroller, but was far too complex for a hands-on approach because it was almost impossible to solder by hand onto a printed circuit board. For more information on this prototype, see page 42 in the thesis document.","title":"Prototype 2"},{"location":"blog/2019/the-untold-history-of-arduino/#prototype-3","text":"The previous prototype experiments led to the third prototype, where the microcontroller was downscaled to one still powerful, yet with the possibility of tinkering with it without the requirements of specialized equipment or on-board extra peripherals. I selected the Atmel ATmega128 microcontroller and bought an Atmel STK500 evaluation board with a special socket for the ATmega128. Photo of Atmel STK500 with ATmega128 expansion. Tests with the STK500 were immediately successful, so I bought a MAVRIC board from BDMICRO with the ATmega128 soldered. Brian Dean's work on his MAVRIC boards were unparalleled at that time, and his work drove him to build a software tool to easily upload new programs to his board. It is still used today in the Arduino software, and is called \"avrdude\". As traditional COM ports were disappearing from computers, I selected FTDI hardware for communication through a USB port on the host computer. FTDI provided drivers for Windows, Mac OS X and Linux which was required for the Wiring environment to work on all platforms. Photo of BDMICRO MAVRIC-II used for the third Wiring hardware prototype. Photo of an FTDI FT232BM evaluation board used in the third Wiring hardware prototype. The FTDI evaluation board was interfaced with the MAVRIC board and tested with the third Wiring prototype. Testing with the BDMICRO MAVRIC-II board and FTDI-FT232BM. In early 2004, based on the prototype using the MAVRIC board (Prototype 3), I used Brian Dean's and Pascal Stang's schematic designs as a reference to create the first Wiring board design. It had the following features: ATmega128 FTDI232BM for serial to USB conversion An on-board LED connected to a pin A power LED and serial RX/TX LEDs I used Eagle PCB from Cadsoft to design the schematic and printed circuit board. Wiring board schematic. Wiring board printed circuit board layout. Along with the third prototype, the final version of the API was tested and refined. More examples were added and I wrote the first LED blink example that is still used today as the first sketch that a user runs on an Arduino board to learn the environment. Even more examples were developed to support liquid crystal displays (LCDs), serial port communication, servo motors, etc. and even to interface Wiring with Processing via serial communication. Details can be found on page 50 in the thesis document. In March 2004, 25 Wiring printed circuit boards were ordered and manufactured at SERP , and paid for by IDII. I hand-soldered these 25 boards and started to conduct usability tests with some of my classmates at IDII. It was an exciting time! Photos of the first Wiring board","title":"Prototype 3"},{"location":"blog/2019/the-untold-history-of-arduino/#continuing-the-development","text":"After graduating from IDII in 2004, I moved back to Colombia, and began teaching as an instructor in Interaction Design at the Universidad de Los Andes. As I continued to develop Wiring, IDII decided to print and assemble a batch of 100 Wiring boards to teach physical computing at IDII in late 2004. Bill Verplank (a former IDII faculty member) asked Massimo Banzi to send 10 of the boards to me for use in my classes in Colombia. In 2004, Faculty member Yaniv Steiner , former student of Giorgio Olivero and Paolo Sancis, started the Instant Soup Project , based on Wiring at IDII.","title":"Continuing the Development"},{"location":"blog/2019/the-untold-history-of-arduino/#first-major-success-strangely-familiar","text":"In the autumn of 2004, Wiring was used to teach physical computing at IDII through a project called Strangely Familiar, consisting of 22 students, and 11 successful projects. Four faculty members ran the 4-week project: Massimo Banzi Heather Martin Yaniv Steiner Reto Wettach It turned out to be a resounding success for both the students as well as the professors and teachers. Strangely Familiar demonstrated the potential of Wiring as an innovation platform for interaction design. On December 16 th , 2004, Bill Verplank sent an email to me saying: [The projects] were wonderful. Everyone had things working. Five of the projects had motors in them! The most advanced (from two MIT grads - architect and mathematician) allowed drawing a profile in Proce55ing and feeling it with a wheel/motor run by Wiring... It is clear that one of the elements of success was [the] use of the Wiring board. Here is the brief for the course: http://wiring.org.co/exhibition/images/brief.pdf Here is a booklet with the resulting projects: http://wiring.org.co/exhibition/images/book01.pdf Tug Tug phones by Haiyan Zhang (with Aram Armstrong) Commitment Radio by David Chiu and Alexandra Deschamps-Sonsino Speak Out by Tristam Sparks and Andreea Cherlaru (with Ana Camila Amorim) Feel the Music I by James Tichenor and David A. Mellis The Amazing All Band Radio by Oren Horev Myriel Milicevic (with Marcos Weskamp)","title":"First Major Success - Strangely Familiar"},{"location":"blog/2019/the-untold-history-of-arduino/#the-rest-of-the-world","text":"In May 2005, I contracted Advanced Circuits in the USA to print the first 200 printed circuit boards outside of IDII, and assembled them in Colombia. I began selling and shipping boards to various schools and universities, and by the end of 2005, Wiring was being used around the world. \"Wiring's Reach by 2005\" graphic, provided by Collin Reisdorf","title":"The Rest of the World"},{"location":"blog/2019/the-untold-history-of-arduino/#when-did-arduino-begin-and-why-werent-you-a-member-of-the-arduino-team","text":"","title":"When Did Arduino Begin and Why Weren't You a Member of the Arduino Team?"},{"location":"blog/2019/the-untold-history-of-arduino/#the-formation-of-arduino","text":"When IDII manufactured the first set of Wiring boards, the cost was probably around USD$50 each. (I don't know what the actual cost was, as I wasn't involved in the process. However, I was selling the boards from Colombia for about USD$60.) This was a considerable drop in price from the boards that were currently available, but it was still a significant cost for most people. In 2005, Massimo Banzi, along with David Mellis (an IDII student at the time) and David Cuartielles, added support for the cheaper ATmega8 microcontroller to Wiring. Then they forked (or copied) the Wiring source code and started running it as a separate project, called Arduino. There was no need to create a separate project, as I would have gladly helped them and developed support for the ATmega8 and any other microcontrollers. I had planned to do this all along. I had inadvertantly taken a photo of some notes about my plans for Wiring, in the photo of Karmen Franinovic (former IDII student from 2002 to 2004) testing a stretch sensor for a lamp in March 2004. Wiring and Arduino shared many of the early development done by Nicholas Zambetti , a former IDII student in the same class as David Mellis. For a brief time, Nicholas had been considered a member of the Arduino Team. Around the same time, Gianluca Martino (he was a consultant at SERP, the printed circuit board factory at Ivrea where the first Wiring boards were made), joined the Arduino Team to help with manufacturing and hardware development. So, to reduce the cost of their boards, Gianluca, with some help from David Cuartielles, developed cheaper hardware by using the ATmega8. Apparently this is the first \"Arduino\" prototype - dubbed Wiring Lite. I think Massimo Banzi designed this one, but I'm unsure. Arduino Extreme v2 - \"Second production version of the Arduino USB boards. This has been properly engineered by Gianluca Martino.\" Tom Igoe (a faculty member at the ITP at NYU 2 ) was invited by Massimo Banzi to IDII for a workshop and became part of the Arduino Team. To this day, I do not know exactly why the Arduino Team forked the code from Wiring. It was also puzzling why we didn't work together. So, to answer the question, I was never asked to become a member of the Arduino Team. Even though I was perplexed by the Arduino Team forking the code, I continued development on Wiring, and almost all of the improvements that had been made to Wiring, by me and plenty of contributors, were merged into the Arduino source code. I tried to ignore the fact that they were still taking my work and also wondered about the redundancy and waste of resources in duplicating efforts. By the end of 2005, I started to work with Casey Reas on a chapter for the book \" Processing: A Programming Handbook for Visual Artists and Designers .\" The chapter presents a short history of electronics in the Arts. It includes examples for interfacing Processing with Wiring and Arduino. I presented those examples in both platforms and made sure the examples included worked for both Wiring and Arduino. The book got a second edition in 2013 and the chapter was revised again by Casey and me, and the extension has been made available online since 2014.","title":"The Formation of Arduino"},{"location":"blog/2019/the-untold-history-of-arduino/#did-the-arduino-team-work-with-wiring-before-arduino","text":"Yes, each of them had experience with Wiring before creating Arduino. Massimo Banzi taught with Wiring at IDII from 2004. Massimo Banzi teaching interaction design at IDII with Wiring boards in 2004. David Mellis was a student at IDII from 2004 to 2005. A blurry version of David Mellis learning physical computing with Wiring in 2004. In January 2005, IDII hired David Cuartielles to develop a couple of plug-in boards for the Wiring board, for motor control and bluetooth connectivity. Two plug-in boards developed at IDII by David Cuartielles and his brother. Bluetooth shield on the left, and a motor controller shield on the right. I showed early versions of Wiring to Tom Igoe during a visit to ITP in New York in 2003. At the time, he had no experience with Atmel hardware, as Tom was using PIC microcontrollers at ITP as an alternative to the costly platforms like Parallax Basic Stamp or Basic X. One of Tom's recommendations at this visit was: \"well, do it for PIC, because this is what we use here.\" Years later, in 2007, Tom Igoe released the first edition of the \"Making Things Talk\" book published by O'Reilly 3 , which presents the use of both Wiring and Arduino. Gianluca Martino originally worked for SERP (the factory that made the first 25 Wiring circuit boards) and later he founded Smart Projects SRL (April 1 st , 2004). Smart Projects made the first batch of 100 Wiring boards for IDII to teach physical computing in 2004.","title":"Did The Arduino Team Work with Wiring Before Arduino?"},{"location":"blog/2019/the-untold-history-of-arduino/#what-is-programma2003-and-how-is-it-related-to-you-or-to-wiring","text":"Programma2003 was a Microchip PIC microcontroller board developed by Massimo Banzi in 2003. After using BasicX to teach Physical computing in the winter of 2002, Massimo decided to do a board using the PIC chip in 2003. The problem with the PIC microcontrollers was that there wasn't an open source toolchain available at the time, to use a language like C to program them. Programma2003 board designed by Massimo Banzi in 2003 Because of the lack of an open source toolchain, Massimo decided to use an environment called JAL (Just Another Language) to program the PIC microcontroller. JAL was created by Wouter van Ooijen. It consisted of the JAL compiler, linker, uploader, bootloader and examples for the PIC. However, the software would only run on Windows. To make JAL easier to use, Massimo used the base examples from JAL and simplified some of them for the distribution package for IDII. However, in 2003, most students at IDII used Mac computers. So I volunteered to help Massimo by making a small and simple environment for Mac OS X so students with a Mac could use it as well. In my thesis document, I characterized Programma2003 as a non-viable model to follow, since other more comprehensive tools were already available in the market. The main problems were: the language is far from useful in any other context (e.g. you can't program your computer using JAL) it's arcane syntax and the hardware design made it highly unlikely to go somewhere in the future for teaching and learning the board didn't have a power LED (a design flaw) It was impossible to know if it was powered or not (frustrating/dangerous in a learning environment) and an additional RS232 to USB expensive converter was required to connect it to a computer. As a gesture to help Massimo's Programma2003 project, I also wrote something I called Programma2003 Interface, which basically interfaced any serial communication between a microcontroller and a computer with the network. This expanded the prototyping toolbox at IDII. It allowed students to use software like Adobe Flash (formerly Macromedia) to communicate with a microcontroller. Programma2003 Interface Code","title":"What is Programma2003 and How is it Related to You or to Wiring?"},{"location":"blog/2019/the-untold-history-of-arduino/#why-hasnt-arduino-acknowledged-wiring-better","text":"I don't know. The reference to Wiring on the Arduino.cc website, although it has improved slightly over time, is misleading as it tries to attribute Wiring to Programma2003. Arduino.cc website version of Arduino's History from https://www.arduino.cc/en/Main/Credits Adding to the confusion is this Flickr photo album by Massimo Banzi: https://www.flickr.com/photos/mbanzi/albums/72157633136997919/with/8610131426/ It is called \"Teaching: IDII 2004 Strangely Familiar\". Strangely Familiar was taught with Wiring (see above). This photo album seems to associate the Programma2003 with the class, but it was, in fact, never used. It is odd that the Wiring boards are absent from the album, however one Wiring board picture does appear. It is no secret that the acknowledgement of Wiring has been very limited in the past. Back in 2013, at Open Hardware Summit at MIT, during the panel \"Implications of Open Source Business: Forking and Attribution\", David Mellis acknowledges, for the first time, that the Arduino Team hadn't done a very good job acknowledging Wiring. Unfortunately, he didn't go into details why they hadn't.","title":"Why Hasn't Arduino Acknowledged Wiring Better?"},{"location":"blog/2019/the-untold-history-of-arduino/#the-plaintiff-vs-the-defendant","text":"I've been quiet about everything that has happened with Arduino for a long time. But now that people are fraudulently saying that my work is their's, I feel like I need to speak up about the past. For example, in the ongoing case between Arduino LLC and Arduino S.R.L., there is a claim , by the Plaintiff, such that: 34. Banzi is the creator of the Programma2003 Development Platform, a precursor of the many ARDUINO-branded products. See: http://sourceforge.net/projects/programma2003/ . Banzi was also the Master's Thesis advisor of Hernando Barragan whose work would result in the Wiring Development Platform which inspired Arduino. Here is what, in my opinion, is wrong with that claim: The Programma2003 was not a Development Platform, it was simply a board. There was no software developed by the Plaintiff to accompany that board. The link is empty, there are no files in that Sourceforge repository, so why present an empty repository as evidence? The idea that the mere fact that Banzi was my thesis advisor gives him some sort of higher claim to the work done on Wiring, is, to say the least, frustrating to read. Further on: 39. The Founders, assisted by Nicholas Zambetti, another student at IDII, undertook and developed a project in which they designed a platform and environment for microcontroller boards (\"Boards\") to replace the Wiring Development Project. Banzi gave the project its name, the ARDUINO project. Here are the questions I'd ask \"The Founders:\" Why did the \"Wiring Development Project\" need to be replaced? Did you ask the developer if he would work with you? Did you not like the original name? (Banzi gave the project its name, after all) I know it might be done now and again, but, in my opinion, it is unethical and a bad example for academics to do something like this with the work of a student. Educators, more than anybody else, should avoid taking advantage of their student's work. In a way, I still feel violated by \"The Founders\" for calling my work their's. It may be legal to take an open source software and hardware project's model, philosophy, discourse, and the thousands of hours of work by its author, exert a branding exercise on it, and release it to the world as something \"new\" or \"inspired\", but... is it right?","title":"The Plaintiff vs. The Defendant"},{"location":"blog/2019/the-untold-history-of-arduino/#continuous-misleading-information","text":"Someone once said: \"If we don't make things ultra clear, people draw their own conclusions and they become facts even if we never said anything like that.\" 4 It seems to me that this is universally true, and especially if you mislead people with only slight alterations of the truth, you can have control over their conclusions. Here are a couple of mainstream examples of misleading information.","title":"Continuous Misleading Information"},{"location":"blog/2019/the-untold-history-of-arduino/#the-infamous-diagram","text":"http://blog.experientia.com/uploads/2013/10/Interaction_Ivrea_arduino.pdf This diagram was produced to tell the story of the prototyping tools developed at IDII. It was beautifully done by Giorgio Olivero, using the content provided by the school in 2005, and released in 2006. The projects presented in the red blobs, although they were made with Wiring, appear to be associated with Arduino at a time when Arduino didn't even exist , nor was even close to being ready to do them. Some of the authors of the projects inquired about the mistake, and why their projects were shifted to Arduino, but received no response. Despite the fact that nothing was changed in this highly public document, I have to thank the support of the students who pointed it out and inquired about it.","title":"The Infamous Diagram"},{"location":"blog/2019/the-untold-history-of-arduino/#the-arduino-documentary","text":"Another very public piece of media from 2010 was The Arduino Documentary (written and directed by Ra\u00fal Alaejos, Rodrigo Calvo). This one is very interesting, especially seeing it today in 2016. I think the idea of doing a documentary is very good, especially for a project with such a rich history. Here are some parts that present some interesting contradictions: 1:45 - \"We wanted it to be open source so that everybody could come and help, and contribute.\" It is suggested here that Wiring was closed source. Because part of Wiring was based on Processing, and Processing was GPL open source, as well as all the libraries, Wiring, and hence Arduino, had to be open source. It was not an option to have it be closed source. Also, the insinuation that they made the software easier is misleading, since nothing changed in the language, which is the essence of the project's simplicity. 3:20 - David Cuartielles already knew about Wiring, as he was hired to design two plug-in boards for it by IDII in 2005 as pointed out earlier in this document. David Mellis learned physical computing using Wiring as a student at IDII in 2004. Interestingly, Gianluca came in as the person who was able to design the board itself (he wasn't just a contractor for manufacturing); he was part of the \"Arduino Team\". 8:53 - David Cuartielles is presenting at the Media Lab in Madrid, in July 2005: \"Arduino is the last project, I finished it last week. I talked to Ivrea's technical director and told him: Wouldn't it be great if we can do something we offer for free? he says - For free? - Yeah!\" David comes across here as the author of a project that he completed \"last week\", and convincing the \"technical director\" at IDII to offer it for free. 18:56 - Massimo Banzi: For us at the beginning it was a specific need: we knew the school was closing and we were afraid that lawyers would show up one day and say - Everything here goes into a box and gets forgotten about. - So we thought - OK, if we open everything about this, then we can survive the closing of the school - So that was the first step. This one is very special. It misleadingly presents the fact of making Arduino open source as the consequence of the school closing. This poses a question: why would a bunch of lawyers \"put in a box\" a project based on other open source projects? It is almost puerile. The problem is, common people might think this is true, forming altruistic reasons for the team to make Arduino open source.","title":"The Arduino Documentary"},{"location":"blog/2019/the-untold-history-of-arduino/#absence-of-recognition-beyond-wiring","text":"There seems to be a trend in how the Arduino Team fails to recognize significant parties that contributed to their success. In October 2013, Jan-Christoph Zoels (a former IDII faculty member) wrote to the IDII community mail list, a message presenting the article released at Core77 about the Intel-Arduino news on Wired UK : A proud moment to see Intel referring to an Interaction Ivrea initiative. And a good investment too: Arduino development was started and developed at Interaction Design Institute Ivrea with an original funding of circa 250.000\u20ac. Another good decision was to keep Arduino as open source at the end of Interaction Ivrea in 2005 before merging with Domus. To which Massimo Banzi responded: I would like to point out that we never got any funding from Ivrea for Arduino (apart from buying 50 of them in the last year of the institute) 250.000 EUR is ridiculous\u2026 This article must be retracted now Sorry JC but you had nothing to do.with this.... You can't possibly try to get credit for.something you hadn't been involved with It was nice, however, to get this a few days later in the same email thread:","title":"Absence of Recognition Beyond Wiring"},{"location":"blog/2019/the-untold-history-of-arduino/#distorted-public-information","text":"In this section, I just wanted to show a fraction of the many different articles (and other press) that have been written about Arduino, which include its history that is rarely told the same way twice. So, please, read them at your leisure, and form your own opinions, and, definitely, ask questions!","title":"Distorted Public Information"},{"location":"blog/2019/the-untold-history-of-arduino/#poor-journalism","text":"It is rare to see well researched journalism these days. The articles below are excellent examples of that postulate.","title":"Poor Journalism"},{"location":"blog/2019/the-untold-history-of-arduino/#wired","text":"In a 2008 Wired interview , Banzi explains how he did Arduino in a weekend: The two decided to design their own board and enlisted one of Banzi's students\u2014David Mellis\u2014to write the programming language for it. In two days, Mellis banged out the code ; three days more and the board was complete. They called it the Arduino, after a nearby pub, and it was an instant hit with the students. This article has been written without any fact checking. It certainly doesn't help that the interviewee isn't telling them the right information.","title":"Wired"},{"location":"blog/2019/the-untold-history-of-arduino/#ieee-spectrum","text":"Here is a 2011 IEEE Spectrum article , titled \"The Making of Arduino\". Again, the history is taken verbatim from the interviewee. I was not contacted before the article was published, even though I was mentioned. And I doubt that anyone from IDII was contacted. Just one of the many confusing parts of Arduino's history is in this quote: Since the purpose was to create a quick and easily accessible platform, they felt they'd be better off opening up the project to as many people as possible rather than keeping it closed. It was never closed.","title":"IEEE Spectrum"},{"location":"blog/2019/the-untold-history-of-arduino/#circuits-today","text":"A 2014 article from Circuits Today has a very confusing opening: It was in the Interactive Design Institute [sic] that a hardware thesis was contributed for a wiring design by a Colombian student named Hernando Barragan. The title of the thesis was \"Arduino\u2013La rivoluzione dell'open hardware\" (\"Arduino \u2013 The Revolution of Open Hardware\"). Yes, it sounded a little different from the usual thesis but none would have imagined that it would carve a niche in the field of electronics. A team of five developers worked on this thesis and when the new wiring platform was complete, they worked to make it much lighter, less expensive, and available to the open source community. The title of my thesis is obviously wrong. There weren't five \"developers\" working on the thesis. And the code was always open source. Again, I wasn't contacted for reference.","title":"Circuits Today"},{"location":"blog/2019/the-untold-history-of-arduino/#makezine","text":"In a 2013 interview by Dale Dougherty with Massimo Banzi , once again the story changes: Wiring had an expensive board, about $100, because it used an expensive chip. I didn't like that, and the student developer and I disagreed. In this version of the story by Massimo Banzi, Arduino originated from Wiring, but it is implied that I was insistent on having an expensive board. Regarding the \"disagreement\": I never had a discussion with Massimo Banzi about the board being too expensive. I wish that he and I would have had more discussions on such matters, as I had with other advisors and colleagues, as I find it very enriching. The closest thing to a disagreement took place after a successful thesis presentation event, where Massimo showed some odd behaviour towards me. Because he was my advisor, I was at a disadvantage, but I asked Massimo why he was behaving badly towards me, to which I received no answer. I felt threatened, and it was very awkward. His odd behaviour extended to those who collaborated with me on Wiring later on. I decided that we could make an open source version of Wiring, starting from scratch. I asked Gianluca Martino [now one of the five Arduino partners] to help me manufacture the first prototypes, the first boards. Here, Massimo is again implying that Wiring wasn't open source, which it was. And also that they would build the software from \"scratch\", which they didn't.","title":"Makezine"},{"location":"blog/2019/the-untold-history-of-arduino/#academic-mistakes","text":"I understand how easy it is to engage people with good storytelling and compelling tales, but academics are expected to do their homework, and at least check the facts behind unsubstantiated statements. In this book, Making Futures: Marginal Notes on Innovation, Design, and Democracy Hardcover \u2013 October 31, 2014 by Pelle Ehn (Editor), Elisabet M. Nilsson (Editor), Richard Topgaard (Editor): Chapter 8: How Deep is Your Love? On Open-Source Hardware (David Cuartielles) Info In 2005, at the Interaction Design Institute Ivrea, we had the vision that making a small prototyping platform aimed at designers would help them getting a better understanding of technology. David Cuartielles' version of Arduino's history doesn't even include Wiring. This book has been released chapter by chapter under Creative Commons: http://dspace.mah.se/handle/2043/17985","title":"Academic Mistakes"},{"location":"blog/2019/the-untold-history-of-arduino/#more-links-for-your-perusal","text":"Wiring as predecessor to Arduino: http://ptgmedia.pearsoncmg.com/images/9780321906045/samplepages/9780321906045.pdf Interview with Ben Fry and Casey Reas: http://rhizome.org/editorial/2009/sep/23/interview-with-casey-reas-and-ben-fry/ Safari Books Online, Casey Reas, Getting Started with Processing, Chapter One, Family Tree: https://www.safaribooksonline.com/library/view/getting-started-with/9781449379827/ch01.html Nicholas Zambetti Arduino Project Page: http://www.zambetti.com/projects/arduino/ (Nicholas did a lot of work with both Wiring and Arduino)","title":"More Links for Your Perusal"},{"location":"blog/2019/the-untold-history-of-arduino/#articles-about-arduino-vs-arduino","text":"Wired Italy - What's happening in Arduino? http://www.wired.it/gadget/computer/2015/02/12/arduino-nel-caos-situazione/ Repubblica Italy - Massimo Banzi: \"The Reason of the War for Arduino\" http://playground.blogautore.repubblica.it/2015/02/11/la-guerra-per-arduino-la-perla-hi-tech-italiana-nel-caos/ Makezine - Massimo Banzi Fighting for Arduino http://makezine.com/2015/03/19/massimo-banzi-fighting-for-arduino/ Hackaday - Federico Musto of Arduino SRL discusses Arduino legal situation http://hackaday.com/2015/07/23/hackaday-interviews-federico-musto-of-arduino-srl/ Hackaday - Federico Musto of Arduino SRL shows us new products and new directions http://hackaday.com/2016/01/04/new-products-and-new-directions-an-interview-with-federico-musto-of-arduino-srl/","title":"Articles About Arduino vs. Arduino"},{"location":"blog/2019/the-untold-history-of-arduino/#video","text":"Massimo going to Ted Talk -- candid (2012-08-06) This is a candid view of Massimo just before performing at a TED Talk. You can make your own mind up about the majority of the video, however, the most interesting comment, in my opinion, is at the end , where he says: Massimo going to Ted Talk ... Innovation without asking for permission. So, in a way, Open Source allows you to be innovative without asking for permission.","title":"Video"},{"location":"blog/2019/the-untold-history-of-arduino/#thank-you","text":"Thank you for taking time to read this. I think it is very important, not just in the academic world, to properly acknowledge the origin of things. As I learned from fantastic educators, doing this properly not only enriches your work, but also positions it better to allow others to investigate and see where your ideas come from. Maybe they will find other alternatives or improve what was done and better position their own ideas. Personally, watching the outreach of what I created back in 2003 in so many different contexts, seeing those commands bringing to life people's ideas and creations from all over the world, has brought me so many satisfactions, surprises, new questions, ideas, awareness and friendships. I am thankful for that. I think it is important to know the past to avoid making the same mistakes in the future. Sometimes I wish I would have had a chance to talk about this differently, for a different motif. Instead, many times I have come across journalists and common people compromised in their independence. Either they had direct business with Arduino, or simply wanted to avoid upsetting Massimo Banzi. Or there are the close-minded individuals following a cause and refusing to see or hear anything different from what they believe. And then there are the individuals who are just part of the crowd that reproduce what they are told to reproduce. For those others, this document is an invitation to trust your curiosity, to question, to dig deeper in whatever interests you and is important to you as an individual or as a member of a community. I'll see you soon, Hernando. The notion of a \"Sketch\" within the context of writing programs comes from Processing and previously from Design by Numbers (DBN). It was extended by Wiring within the context of prototyping with electronics or \"sketching\" with hardware. Interactive Telecommunications Program at New York University Page 34, ISBN-13: 978-0596510510 ISBN-10: 0596510519, http://www.amazon.com/Making-Things-Talk-Practical-Connecting/dp/0596510519/ref=sr_1_2?ie=UTF8 sr=8-2 keywords=Making+Things+Talk https://groups.google.com/a/arduino.cc/d/msg/developers/HEKecd0qhS4/nADS2jW6DgAJ","title":"Thank You!"},{"location":"blog/2019/untrack-files/","text":"Untrack files already added to git repository based on .gitignore Let\u2019s say you have already added/committed some files to your git repository and you then add them to your .gitignore; these files will still be present in your repository index. This article we will see how to get rid of them. Step 1: Commit all your changes Before proceeding, make sure all your changes are committed, including your .gitignore file. Step 2: Remove everything from the repository To clear your repo, use: 1 git rm -r --cached . rm is the remove command -r will allow recursive removal \u2013cached will only remove files from the index. Your files will still be there. The . indicates that all files will be untracked. You can untrack a specific file with git rm --cached foo.txt (thanks @amadeann ). The rm command can be unforgiving. If you wish to try what it does beforehand, add the -n or --dry-run flag to test things out. Step 3: Re add everything 1 git add . Step 4: Commit 1 git commit -m .gitignore fix Your repository is clean :) Push the changes to your remote to see the changes effective there as well.","title":"Untrack Files"},{"location":"blog/2019/untrack-files/#untrack-files-already-added-to-git-repository-based-on-gitignore","text":"Let\u2019s say you have already added/committed some files to your git repository and you then add them to your .gitignore; these files will still be present in your repository index. This article we will see how to get rid of them.","title":"Untrack files already added to git repository based on .gitignore"},{"location":"blog/2019/untrack-files/#step-1-commit-all-your-changes","text":"Before proceeding, make sure all your changes are committed, including your .gitignore file.","title":"Step 1: Commit all your changes"},{"location":"blog/2019/untrack-files/#step-2-remove-everything-from-the-repository","text":"To clear your repo, use: 1 git rm -r --cached . rm is the remove command -r will allow recursive removal \u2013cached will only remove files from the index. Your files will still be there. The . indicates that all files will be untracked. You can untrack a specific file with git rm --cached foo.txt (thanks @amadeann ). The rm command can be unforgiving. If you wish to try what it does beforehand, add the -n or --dry-run flag to test things out.","title":"Step 2: Remove everything from the repository"},{"location":"blog/2019/untrack-files/#step-3-re-add-everything","text":"1 git add .","title":"Step 3: Re add everything"},{"location":"blog/2019/untrack-files/#step-4-commit","text":"1 git commit -m .gitignore fix Your repository is clean :) Push the changes to your remote to see the changes effective there as well.","title":"Step 4: Commit"},{"location":"extensions/admonition/","text":"Admonition Admonition atau Nasehat adalah ekstensi yang disertakan ke dalam pustaka standar Markdown yang memungkinkan untuk menambahkan konten samping bergaya blok ke dokumentasi Anda, misalnya ringkasan, catatan, petunjuk atau peringatan. Instalasi Tambahkan baris berikut ke dalam mkdocs.yml : 1 2 markdown_extensions : - admonition Penggunaan Blok Admonition mengikuti sintaksis sederhana: setiap blok dimulai dengan !!! , diikuti oleh satu kata kunci yang digunakan sebagai tipe kualifikasi blok. Isi blok kemudian mengikuti pada baris berikutnya, dijorok dengan empat spasi. Contoh: 1 2 3 4 !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Hasil: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Mengubah Judul Secara default, judul blok akan sama dengan tipe kualifikasi jenis dalam titlecase. Namun, ini dapat diubah dengan menambahkan string yang dikutip setelah tipe kualifikasi. Contoh: 1 2 3 4 !!! note Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Hasil: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Removing the title Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Menghapus Judul Mirip dengan pengaturan judul khusus , ikon dan judul dapat dihilangkan dengan memberikan string kosong setelah kualifikasi jenis: Contoh: 1 2 3 4 !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Hasil: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Embedded code blocks Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks, respectively Admonition blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. 1 2 3 4 5 6 7 8 9 10 11 12 13 SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = 087652 ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Collapsible blocks The Details extension which is also part of the PyMdown Extensions package adds support for rendering collapsible Admonition blocks. This is useful for FAQs or content that is of secondary nature. Example: 1 2 3 4 ??? note Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. By adding a + sign directly after the start marker, blocks can be rendered open by default. Types Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers provided by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note . Note Example: 1 2 3 4 !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso Abstract Example: 1 2 3 4 !!! abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: abstract summary tldr Info Example: 1 2 3 4 !!! info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: info todo Tip Example: 1 2 3 4 !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important Success Example: 1 2 3 4 !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done Question Example: 1 2 3 4 !!! question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: question help faq Warning Example: 1 2 3 4 !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention Failure Example: 1 2 3 4 !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing Danger Example: 1 2 3 4 !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error Bug Example: 1 2 3 4 !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug Example Example: 1 2 3 4 !!! example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: example snippet Quote Example: 1 2 3 4 !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Admonition"},{"location":"extensions/admonition/#admonition","text":"Admonition atau Nasehat adalah ekstensi yang disertakan ke dalam pustaka standar Markdown yang memungkinkan untuk menambahkan konten samping bergaya blok ke dokumentasi Anda, misalnya ringkasan, catatan, petunjuk atau peringatan.","title":"Admonition"},{"location":"extensions/admonition/#instalasi","text":"Tambahkan baris berikut ke dalam mkdocs.yml : 1 2 markdown_extensions : - admonition","title":"Instalasi"},{"location":"extensions/admonition/#penggunaan","text":"Blok Admonition mengikuti sintaksis sederhana: setiap blok dimulai dengan !!! , diikuti oleh satu kata kunci yang digunakan sebagai tipe kualifikasi blok. Isi blok kemudian mengikuti pada baris berikutnya, dijorok dengan empat spasi. Contoh: 1 2 3 4 !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Hasil: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Penggunaan"},{"location":"extensions/admonition/#mengubah-judul","text":"Secara default, judul blok akan sama dengan tipe kualifikasi jenis dalam titlecase. Namun, ini dapat diubah dengan menambahkan string yang dikutip setelah tipe kualifikasi. Contoh: 1 2 3 4 !!! note Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Hasil: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Mengubah Judul"},{"location":"extensions/admonition/#removing-the-title","text":"Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier:","title":"Removing the title"},{"location":"extensions/admonition/#menghapus-judul","text":"Mirip dengan pengaturan judul khusus , ikon dan judul dapat dihilangkan dengan memberikan string kosong setelah kualifikasi jenis: Contoh: 1 2 3 4 !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Hasil: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Menghapus Judul"},{"location":"extensions/admonition/#embedded-code-blocks","text":"Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks, respectively Admonition blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. 1 2 3 4 5 6 7 8 9 10 11 12 13 SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = 087652 ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.","title":"Embedded code blocks"},{"location":"extensions/admonition/#collapsible-blocks","text":"The Details extension which is also part of the PyMdown Extensions package adds support for rendering collapsible Admonition blocks. This is useful for FAQs or content that is of secondary nature. Example: 1 2 3 4 ??? note Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. By adding a + sign directly after the start marker, blocks can be rendered open by default.","title":"Collapsible blocks"},{"location":"extensions/admonition/#types","text":"Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers provided by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note .","title":"Types"},{"location":"extensions/admonition/#note","text":"Example: 1 2 3 4 !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso","title":"Note"},{"location":"extensions/admonition/#abstract","text":"Example: 1 2 3 4 !!! abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: abstract summary tldr","title":"Abstract"},{"location":"extensions/admonition/#info","text":"Example: 1 2 3 4 !!! info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: info todo","title":"Info"},{"location":"extensions/admonition/#tip","text":"Example: 1 2 3 4 !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important","title":"Tip"},{"location":"extensions/admonition/#success","text":"Example: 1 2 3 4 !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done","title":"Success"},{"location":"extensions/admonition/#question","text":"Example: 1 2 3 4 !!! question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: question help faq","title":"Question"},{"location":"extensions/admonition/#warning","text":"Example: 1 2 3 4 !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention","title":"Warning"},{"location":"extensions/admonition/#failure","text":"Example: 1 2 3 4 !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing","title":"Failure"},{"location":"extensions/admonition/#danger","text":"Example: 1 2 3 4 !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error","title":"Danger"},{"location":"extensions/admonition/#bug","text":"Example: 1 2 3 4 !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug","title":"Bug"},{"location":"extensions/admonition/#example","text":"Example: 1 2 3 4 !!! example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: example snippet","title":"Example"},{"location":"extensions/admonition/#quote","text":"Example: 1 2 3 4 !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Quote"},{"location":"extensions/codehilite/","text":"CodeHilite CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed. Installation CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages , CodeHilite will also highlight the code block. Pygments can be installed with the following command: 1 pip install pygments To enable CodeHilite, add the following lines to your mkdocs.yml : 1 2 markdown_extensions : - codehilite Usage Specifying the language The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways. via Markdown syntax recommended In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block. Example: 1 2 3 `` ` python import tensorflow as tf `` ` Result: 1 import tensorflow as tf via Shebang Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: 1 2 #!/usr/bin/python import tensorflow as tf Result: 1 2 #!/usr/bin/python import tensorflow as tf via three colons If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: 1 2 ::: python import tensorflow as tf Result: 1 import tensorflow as tf Adding line numbers Line numbers can be added by enabling the linenums flag in your mkdocs.yml : 1 2 3 markdown_extensions : - codehilite : linenums : true Example: 1 2 3 4 5 6 7 8 ``` python Bubble sort def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 Bubble sort def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] gt ; items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Grouping code blocks The SuperFences extension which is part of the PyMdown Extensions package adds support for grouping code blocks with tabs. This is especially useful for documenting projects with multiple language bindings. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 ``` bash tab= Bash #!/bin/bash echo Hello world! ``` ``` c tab= C #include stdio.h int main(void) { printf( Hello world! \\ n ); } ``` ``` c++ tab= C++ #include iostream int main() { std::cout Hello world! std::endl; return 0; } ``` ``` c# tab= C# using System; class Program { static void Main(string[] args) { Console.WriteLine( Hello world! ); } } ``` Result: Bash 1 2 3 #!/bin/bash echo Hello world! C 1 2 3 4 5 #include stdio.h int main ( void ) { printf ( Hello world! \\n ); } C++ 1 2 3 4 5 6 #include iostream int main () { std :: cout Hello world! std :: endl ; return 0 ; } C# 1 2 3 4 5 6 7 using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( Hello world! ); } } Highlighting specific lines Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language identifier. Line counts start at 1. Example: 1 2 3 4 5 6 7 8 ``` python hl_lines= 3 4 Bubble sort def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 Bubble sort def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] gt ; items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ] Supported languages excerpt CodeHilite uses Pygments , a generic syntax highlighter with support for over 300 languages , so the following list of examples is just an excerpt. Bash 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/bin/bash for OPT in $@ do case $OPT in -f ) canonicalize = 1 ;; -n ) switchlf = -n ;; esac done # readlink -f function __readlink_f { target = $1 while test -n $target ; do filepath = $target cd ` dirname $filepath ` target = ` readlink $filepath ` done /bin/echo $switchlf ` pwd -P ` / ` basename $filepath ` } if [ ! $canonicalize ] ; then readlink $switchlf $@ else for file in $@ do case $file in -* ) ;; * ) __readlink_f $file ;; esac done fi exit $? C 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 extern size_t pb_varint_scan ( const uint8_t data [], size_t left ) { assert ( data left ); left = left 10 ? 10 : left ; #ifdef __SSE2__ /* Mapping: remaining bytes == bitmask */ static const int mask_map [] = { 0x0000 , 0x0001 , 0x0003 , 0x0007 , 0x000F , 0x001F , 0x003F , 0x007F , 0x00FF , 0x01FF , 0x03FF }; /* Load buffer into 128-bit integer and create high-bit mask */ __m128i temp = _mm_loadu_si128 (( const __m128i * ) data ); __m128i high = _mm_set1_epi8 ( 0x80 ); /* Intersect and extract mask with high-bits set */ int mask = _mm_movemask_epi8 ( _mm_and_si128 ( temp , high )); mask = ( mask mask_map [ left ]) ^ mask_map [ left ]; /* Count trailing zeroes */ return mask ? __builtin_ctz ( mask ) + 1 : 0 ; #else /* Linear scan */ size_t size = 0 ; while ( data [ size ++ ] 0x80 ) if ( !-- left ) return 0 ; return size ; #endif /* __SSE2__ */ } C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ signature ] = descriptor_ - full_name (); /* Prepare message symbol */ variables_ [ message ] = StringReplace ( variables_ [ signature ], . , _ , true ); LowerString ( ( variables_ [ message ])); /* Suffix scope to identifiers, if given */ string suffix ( ); if ( scope_ ) { suffix = scope_ - full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ - file () - package (). compare ( descriptor_ - file () - package ())) suffix = StripPrefixString ( suffix , scope_ - file () - package () + . ); /* Append to signature */ variables_ [ signature ] += .[ + suffix + ] ; suffix = _ + suffix ; } /* Prepare extension symbol */ variables_ [ extension ] = StringReplace ( suffix , . , _ , true ); LowerString ( ( variables_ [ extension ])); } C #35 ; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public static void Send ( Socket socket , byte [] buffer , int offset , int size , int timeout ) { int startTickCount = Environment . TickCount ; int sent = 0 ; do { if ( Environment . TickCount startTickCount + timeout ) throw new Exception ( Timeout. ); try { sent += socket . Send ( buffer , offset + sent , size - sent , SocketFlags . None ); } catch ( SocketException ex ) { if ( ex . SocketErrorCode == SocketError . WouldBlock || ex . SocketErrorCode == SocketError . IOPending || ex . SocketErrorCode == SocketError . NoBufferSpaceAvailable ) { /* Socket buffer is probably full, wait and try again */ Thread . Sleep ( 30 ); } else { throw ex ; } } } while ( sent size ); } Clojure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ( clojure-version ) ( defn partition-when [ f ] ( fn [ rf ] ( let [ a ( java.util.ArrayList. ) fval ( volatile! false )] ( fn ([] ( rf )) ([ result ] ( let [ result ( if ( .isEmpty a ) result ( let [ v ( vec ( .toArray a ))] ;; Clear first ( .clear a ) ( unreduced ( rf result v ))))] ( rf result ))) ([ result input ] ( if-not ( and ( f input ) @ fval ) ( do ( vreset! fval true ) ( .add a input ) result ) ( let [ v ( vec ( .toArray a ))] ( .clear a ) ( let [ ret ( rf result v )] ( when-not ( reduced? ret ) ( .add a input )) ret )))))))) ( into [] ( partition-when # ( .startsWith % )) [ 1d 33 1 2 22 3 ]) Diff 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log( hello world ); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ packages/services.web/{!(test)/**/,}*.js , packages/error/**/*.js ], - scripts: [ - grunt.js , - db/**/*.js - ], browser: [ packages/web/server.js , packages/web/server/**/*.js , Docker 1 2 3 4 5 6 7 8 9 10 11 12 13 14 FROM ubuntu # Install vnc, xvfb in order to create a fake display and firefox RUN apt-get update apt-get install -y x11vnc xvfb firefox RUN mkdir ~/.vnc # Setup a password RUN x11vnc -storepasswd 1234 ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick) RUN bash -c echo firefox /.bashrc EXPOSE 5900 CMD [ x11vnc , -forever , -usepw , -create ] Elixir 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 require Logger def accept ( port ) do { :ok , socket } = :gen_tcp . listen ( port , [ :binary , packet : :line , active : false , reuseaddr : true ]) Logger . info Accepting connections on port #{ port } loop_acceptor ( socket ) end defp loop_acceptor ( socket ) do { :ok , client } = :gen_tcp . accept ( socket ) serve ( client ) loop_acceptor ( socket ) end defp serve ( socket ) do socket | read_line () | write_line ( socket ) serve ( socket ) end defp read_line ( socket ) do { :ok , data } = :gen_tcp . recv ( socket , 0 ) data end defp write_line ( line , socket ) do :gen_tcp . send ( socket , line ) end Erlang 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 circular ( Defs ) - [ { { Type , Base }, Fields } || { { Type , Base }, Fields } - Defs , Type == msg , circular ( Base , Defs ) ]. circular ( Base , Defs ) - Fields = proplists : get_value ({ msg , Base }, Defs ), circular ( Defs , Fields , [ Base ]). circular (_ Defs , [], _ Path ) - false ; circular ( Defs , [ Field | Fields ], Path ) - case Field #field.type of { msg , Type } - case lists : member ( Type , Path ) of false - Children = proplists : get_value ({ msg , Type }, Defs ), case circular ( Defs , Children , [ Type | Path ]) of false - circular ( Defs , Fields , Path ); true - true end ; true - Type == lists : last ( Path ) andalso ( length ( Path ) == 1 orelse not is_tree ( Path )) end ; _ - circular ( Defs , Fields , Path ) end . F #35 ; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /// Asynchronously download retangles from the server /// and decode the JSON format to F# Rectangle record let [ Js ] getRectangles () : Async Rectangle [] = async { let req = XMLHttpRequest () req . Open ( POST , /get , true ) let! resp = req . AsyncSend () return JSON . parse ( resp ) } /// Repeatedly update rectangles after 0.5 sec let [ Js ] updateLoop () = async { while true do do ! Async . Sleep ( 500 ) let! rects = getRectangles () cleanRectangles () rects | Array . iter createRectangle } Go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import fmt func counter ( id int , channel chan int , closer bool ) { for i := 0 ; i 10000000 ; i ++ { fmt . Println ( process , id , send , i ) channel - 1 } if closer { close ( channel ) } } func main () { channel := make ( chan int ) go counter ( 1 , channel , false ) go counter ( 2 , channel , true ) x := 0 // receiving data from channel for i := range channel { fmt . Println ( receiving ) x += i } fmt . Println ( x ) } HTML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 !doctype html html class = no-js lang = head meta charset = utf-8 meta http-equiv = x-ua-compatible content = ie=edge title HTML5 Boilerplate / title meta name = description content = meta name = viewport content = width=device-width, initial-scale=1 link rel = apple-touch-icon href = apple-touch-icon.png link rel = stylesheet href = css/normalize.css link rel = stylesheet href = css/main.css script src = js/vendor/modernizr-2.8.3.min.js / script / head body p Hello world! This is HTML5 Boilerplate. / p / body / html Java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import java.util.LinkedList ; import java.lang.reflect.Array ; public class UnsortedHashSet E { private static final double LOAD_FACTOR_LIMIT = 0.7 ; private int size ; private LinkedList E [] con ; public UnsortedHashSet () { con = ( LinkedList E [])( new LinkedList [ 10 ]); } public boolean add ( E obj ) { int oldSize = size ; int index = Math . abs ( obj . hashCode ()) % con . length ; if ( con [ index ] == null ) con [ index ] = new LinkedList E (); if (! con [ index ]. contains ( obj )) { con [ index ]. add ( obj ); size ++; } if ( 1.0 * size / con . length LOAD_FACTOR_LIMIT ) resize (); return oldSize != size ; } private void resize () { UnsortedHashSet E temp = new UnsortedHashSet E (); temp . con = ( LinkedList E [])( new LinkedList [ con . length * 2 + 1 ]); for ( int i = 0 ; i con . length ; i ++) { if ( con [ i ] != null ) for ( E e : con [ i ]) temp . add ( e ); } con = temp . con ; } public int size () { return size ; } } JavaScript 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var Math = require ( lib/math ); var _extends = function ( target ) { for ( var i = 1 ; i arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; var e = exports . e = 2.71828182846 ; exports [ default ] = function ( x ) { return Math . exp ( x ); }; module . exports = _extends ( exports [ default ], exports ); JSON 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { name : mkdocs-material , version : 0.2.4 , description : A Material Design theme for MkDocs , homepage : http://squidfunk.github.io/mkdocs-material/ , authors : [ squidfunk martin.donath@squidfunk.com ], license : MIT , main : Gulpfile.js , scripts : { start : ./node_modules/.bin/gulp watch --mkdocs , build : ./node_modules/.bin/gulp build --production } ... } Julia 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 using MXNet mlp = @mx . chain mx . Variable ( : data ) = mx . FullyConnected ( name =: fc1 , num_hidden = 128 ) = mx . Activation ( name =: relu1 , act_type =: relu ) = mx . FullyConnected ( name =: fc2 , num_hidden = 64 ) = mx . Activation ( name =: relu2 , act_type =: relu ) = mx . FullyConnected ( name =: fc3 , num_hidden = 10 ) = mx . SoftmaxOutput ( name =: softmax ) # data provider batch_size = 100 include ( Pkg . dir ( MXNet , examples , mnist , mnist-data.jl )) train_provider , eval_provider = get_mnist_providers ( batch_size ) # setup model model = mx . FeedForward ( mlp , context = mx . cpu ()) # optimization algorithm optimizer = mx . SGD ( lr = 0.1 , momentum = 0.9 ) # fit parameters mx . fit ( model , optimizer , train_provider , n_epoch = 20 , eval_data = eval_provider ) Lua 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 local ffi = require ( ffi ) ffi . cdef [[ void Sleep(int ms); int poll(struct pollfd *fds, unsigned long nfds, int timeout); ]] local sleep if ffi . os == Windows then function sleep ( s ) ffi . C . Sleep ( s * 1000 ) end else function sleep ( s ) ffi . C . poll ( nil , 0 , s * 1000 ) end end for i = 1 , 160 do io.write ( . ); io.flush () sleep ( 0.01 ) end io.write ( \\n ) MySQL 1 2 3 4 5 6 7 8 9 10 11 12 13 SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = 087652 ; PHP 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ?php // src/AppBundle/Controller/LuckyController.php namespace AppBundle\\Controller ; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route ; use Symfony\\Component\\HttpFoundation\\Response ; class LuckyController { /** * @Route( /lucky/number ) */ public function numberAction () { $number = mt_rand ( 0 , 100 ); return new Response ( html body Lucky number: . $number . /body /html ); } } Protocol Buffers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 syntax = proto2 ; package caffe ; // Specifies the shape (dimensions) of a Blob. message BlobShape { repeated int64 dim = 1 [ packed = true ]; } message BlobProto { optional BlobShape shape = 7 ; repeated float data = 5 [ packed = true ]; repeated float diff = 6 [ packed = true ]; // 4D dimensions -- deprecated. Use shape instead. optional int32 num = 1 [ default = 0 ]; optional int32 channels = 2 [ default = 0 ]; optional int32 height = 3 [ default = 0 ]; optional int32 width = 4 [ default = 0 ]; } Python 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 A very simple MNIST classifier. See extensive documentation at http://tensorflow.org/tutorials/mnist/beginners/index.md from __future__ import absolute_import from __future__ import division from __future__ import print_function # Import data from tensorflow.examples.tutorials.mnist import input_data import tensorflow as tf flags = tf . app . flags FLAGS = flags . FLAGS flags . DEFINE_string ( data_dir , /tmp/data/ , Directory for storing data ) mnist = input_data . read_data_sets ( FLAGS . data_dir , one_hot = True ) sess = tf . InteractiveSession () # Create the model x = tf . placeholder ( tf . float32 , [ None , 784 ]) W = tf . Variable ( tf . zeros ([ 784 , 10 ])) b = tf . Variable ( tf . zeros ([ 10 ])) y = tf . nn . softmax ( tf . matmul ( x , W ) + b ) Ruby 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 require finity/event require finity/machine require finity/state require finity/transition require finity/version module Finity class InvalidCallback StandardError ; end class MissingCallback StandardError ; end class InvalidState StandardError ; end # Class methods to be injected into the including class upon inclusion. module ClassMethods # Instantiate a new state machine for the including class by accepting a # block with state and event (and subsequent transition) definitions. def finity options = {}, block @finity ||= Machine . new self , options , block end # Return the names of all registered states. def states @finity . states . map { | name , _ | name } end # Return the names of all registered events. def events @finity . events . map { | name , _ | name } end end # Inject methods into the including class upon inclusion. def self . included base base . extend ClassMethods end end XML 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ?xml version= 1.0 encoding= UTF-8 ? !DOCTYPE mainTag SYSTEM some.dtd [ENTITY % entity] ?oxygen RNGSchema= some.rng type= xml ? xs:main-Tag xmlns:xs= http://www.w3.org/2001/XMLSchema !-- This is a sample comment -- childTag attribute= Quoted Value another-attribute= Single quoted value a-third-attribute= 123 withTextContent Some text content /withTextContent withEntityContent Some text content with lt; entities gt; and mentioning uint8_t and int32_t /withEntityContent otherTag attribute= Single quoted Value / /childTag ![CDATA[ some CData ]] /main-Tag","title":"CodeHilite"},{"location":"extensions/codehilite/#codehilite","text":"CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed.","title":"CodeHilite"},{"location":"extensions/codehilite/#installation","text":"CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages , CodeHilite will also highlight the code block. Pygments can be installed with the following command: 1 pip install pygments To enable CodeHilite, add the following lines to your mkdocs.yml : 1 2 markdown_extensions : - codehilite","title":"Installation"},{"location":"extensions/codehilite/#usage","text":"","title":"Usage"},{"location":"extensions/codehilite/#specifying-the-language","text":"The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways.","title":"Specifying the language"},{"location":"extensions/codehilite/#via-markdown-syntax-recommended","text":"In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block. Example: 1 2 3 `` ` python import tensorflow as tf `` ` Result: 1 import tensorflow as tf","title":"via Markdown syntax recommended"},{"location":"extensions/codehilite/#via-shebang","text":"Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: 1 2 #!/usr/bin/python import tensorflow as tf Result: 1 2 #!/usr/bin/python import tensorflow as tf","title":"via Shebang"},{"location":"extensions/codehilite/#via-three-colons","text":"If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: 1 2 ::: python import tensorflow as tf Result: 1 import tensorflow as tf","title":"via three colons"},{"location":"extensions/codehilite/#adding-line-numbers","text":"Line numbers can be added by enabling the linenums flag in your mkdocs.yml : 1 2 3 markdown_extensions : - codehilite : linenums : true Example: 1 2 3 4 5 6 7 8 ``` python Bubble sort def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 Bubble sort def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] gt ; items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Adding line numbers"},{"location":"extensions/codehilite/#grouping-code-blocks","text":"The SuperFences extension which is part of the PyMdown Extensions package adds support for grouping code blocks with tabs. This is especially useful for documenting projects with multiple language bindings. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 ``` bash tab= Bash #!/bin/bash echo Hello world! ``` ``` c tab= C #include stdio.h int main(void) { printf( Hello world! \\ n ); } ``` ``` c++ tab= C++ #include iostream int main() { std::cout Hello world! std::endl; return 0; } ``` ``` c# tab= C# using System; class Program { static void Main(string[] args) { Console.WriteLine( Hello world! ); } } ``` Result: Bash 1 2 3 #!/bin/bash echo Hello world! C 1 2 3 4 5 #include stdio.h int main ( void ) { printf ( Hello world! \\n ); } C++ 1 2 3 4 5 6 #include iostream int main () { std :: cout Hello world! std :: endl ; return 0 ; } C# 1 2 3 4 5 6 7 using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( Hello world! ); } }","title":"Grouping code blocks"},{"location":"extensions/codehilite/#highlighting-specific-lines","text":"Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language identifier. Line counts start at 1. Example: 1 2 3 4 5 6 7 8 ``` python hl_lines= 3 4 Bubble sort def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: 1 2 3 4 5 6 Bubble sort def bubble_sort ( items ): for i in range ( len ( items )): for j in range ( len ( items ) - 1 - i ): if items [ j ] gt ; items [ j + 1 ]: items [ j ], items [ j + 1 ] = items [ j + 1 ], items [ j ]","title":"Highlighting specific lines"},{"location":"extensions/codehilite/#supported-languages-excerpt","text":"CodeHilite uses Pygments , a generic syntax highlighter with support for over 300 languages , so the following list of examples is just an excerpt.","title":"Supported languages excerpt"},{"location":"extensions/codehilite/#bash","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!/bin/bash for OPT in $@ do case $OPT in -f ) canonicalize = 1 ;; -n ) switchlf = -n ;; esac done # readlink -f function __readlink_f { target = $1 while test -n $target ; do filepath = $target cd ` dirname $filepath ` target = ` readlink $filepath ` done /bin/echo $switchlf ` pwd -P ` / ` basename $filepath ` } if [ ! $canonicalize ] ; then readlink $switchlf $@ else for file in $@ do case $file in -* ) ;; * ) __readlink_f $file ;; esac done fi exit $?","title":"Bash"},{"location":"extensions/codehilite/#c","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 extern size_t pb_varint_scan ( const uint8_t data [], size_t left ) { assert ( data left ); left = left 10 ? 10 : left ; #ifdef __SSE2__ /* Mapping: remaining bytes == bitmask */ static const int mask_map [] = { 0x0000 , 0x0001 , 0x0003 , 0x0007 , 0x000F , 0x001F , 0x003F , 0x007F , 0x00FF , 0x01FF , 0x03FF }; /* Load buffer into 128-bit integer and create high-bit mask */ __m128i temp = _mm_loadu_si128 (( const __m128i * ) data ); __m128i high = _mm_set1_epi8 ( 0x80 ); /* Intersect and extract mask with high-bits set */ int mask = _mm_movemask_epi8 ( _mm_and_si128 ( temp , high )); mask = ( mask mask_map [ left ]) ^ mask_map [ left ]; /* Count trailing zeroes */ return mask ? __builtin_ctz ( mask ) + 1 : 0 ; #else /* Linear scan */ size_t size = 0 ; while ( data [ size ++ ] 0x80 ) if ( !-- left ) return 0 ; return size ; #endif /* __SSE2__ */ }","title":"C"},{"location":"extensions/codehilite/#c_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ signature ] = descriptor_ - full_name (); /* Prepare message symbol */ variables_ [ message ] = StringReplace ( variables_ [ signature ], . , _ , true ); LowerString ( ( variables_ [ message ])); /* Suffix scope to identifiers, if given */ string suffix ( ); if ( scope_ ) { suffix = scope_ - full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ - file () - package (). compare ( descriptor_ - file () - package ())) suffix = StripPrefixString ( suffix , scope_ - file () - package () + . ); /* Append to signature */ variables_ [ signature ] += .[ + suffix + ] ; suffix = _ + suffix ; } /* Prepare extension symbol */ variables_ [ extension ] = StringReplace ( suffix , . , _ , true ); LowerString ( ( variables_ [ extension ])); }","title":"C++"},{"location":"extensions/codehilite/#c35","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public static void Send ( Socket socket , byte [] buffer , int offset , int size , int timeout ) { int startTickCount = Environment . TickCount ; int sent = 0 ; do { if ( Environment . TickCount startTickCount + timeout ) throw new Exception ( Timeout. ); try { sent += socket . Send ( buffer , offset + sent , size - sent , SocketFlags . None ); } catch ( SocketException ex ) { if ( ex . SocketErrorCode == SocketError . WouldBlock || ex . SocketErrorCode == SocketError . IOPending || ex . SocketErrorCode == SocketError . NoBufferSpaceAvailable ) { /* Socket buffer is probably full, wait and try again */ Thread . Sleep ( 30 ); } else { throw ex ; } } } while ( sent size ); }","title":"C&#35;"},{"location":"extensions/codehilite/#clojure","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 ( clojure-version ) ( defn partition-when [ f ] ( fn [ rf ] ( let [ a ( java.util.ArrayList. ) fval ( volatile! false )] ( fn ([] ( rf )) ([ result ] ( let [ result ( if ( .isEmpty a ) result ( let [ v ( vec ( .toArray a ))] ;; Clear first ( .clear a ) ( unreduced ( rf result v ))))] ( rf result ))) ([ result input ] ( if-not ( and ( f input ) @ fval ) ( do ( vreset! fval true ) ( .add a input ) result ) ( let [ v ( vec ( .toArray a ))] ( .clear a ) ( let [ ret ( rf result v )] ( when-not ( reduced? ret ) ( .add a input )) ret )))))))) ( into [] ( partition-when # ( .startsWith % )) [ 1d 33 1 2 22 3 ])","title":"Clojure"},{"location":"extensions/codehilite/#diff","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log( hello world ); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ packages/services.web/{!(test)/**/,}*.js , packages/error/**/*.js ], - scripts: [ - grunt.js , - db/**/*.js - ], browser: [ packages/web/server.js , packages/web/server/**/*.js ,","title":"Diff"},{"location":"extensions/codehilite/#docker","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 FROM ubuntu # Install vnc, xvfb in order to create a fake display and firefox RUN apt-get update apt-get install -y x11vnc xvfb firefox RUN mkdir ~/.vnc # Setup a password RUN x11vnc -storepasswd 1234 ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick) RUN bash -c echo firefox /.bashrc EXPOSE 5900 CMD [ x11vnc , -forever , -usepw , -create ]","title":"Docker"},{"location":"extensions/codehilite/#elixir","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 require Logger def accept ( port ) do { :ok , socket } = :gen_tcp . listen ( port , [ :binary , packet : :line , active : false , reuseaddr : true ]) Logger . info Accepting connections on port #{ port } loop_acceptor ( socket ) end defp loop_acceptor ( socket ) do { :ok , client } = :gen_tcp . accept ( socket ) serve ( client ) loop_acceptor ( socket ) end defp serve ( socket ) do socket | read_line () | write_line ( socket ) serve ( socket ) end defp read_line ( socket ) do { :ok , data } = :gen_tcp . recv ( socket , 0 ) data end defp write_line ( line , socket ) do :gen_tcp . send ( socket , line ) end","title":"Elixir"},{"location":"extensions/codehilite/#erlang","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 circular ( Defs ) - [ { { Type , Base }, Fields } || { { Type , Base }, Fields } - Defs , Type == msg , circular ( Base , Defs ) ]. circular ( Base , Defs ) - Fields = proplists : get_value ({ msg , Base }, Defs ), circular ( Defs , Fields , [ Base ]). circular (_ Defs , [], _ Path ) - false ; circular ( Defs , [ Field | Fields ], Path ) - case Field #field.type of { msg , Type } - case lists : member ( Type , Path ) of false - Children = proplists : get_value ({ msg , Type }, Defs ), case circular ( Defs , Children , [ Type | Path ]) of false - circular ( Defs , Fields , Path ); true - true end ; true - Type == lists : last ( Path ) andalso ( length ( Path ) == 1 orelse not is_tree ( Path )) end ; _ - circular ( Defs , Fields , Path ) end .","title":"Erlang"},{"location":"extensions/codehilite/#f35","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /// Asynchronously download retangles from the server /// and decode the JSON format to F# Rectangle record let [ Js ] getRectangles () : Async Rectangle [] = async { let req = XMLHttpRequest () req . Open ( POST , /get , true ) let! resp = req . AsyncSend () return JSON . parse ( resp ) } /// Repeatedly update rectangles after 0.5 sec let [ Js ] updateLoop () = async { while true do do ! Async . Sleep ( 500 ) let! rects = getRectangles () cleanRectangles () rects | Array . iter createRectangle }","title":"F&#35;"},{"location":"extensions/codehilite/#go","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 package main import fmt func counter ( id int , channel chan int , closer bool ) { for i := 0 ; i 10000000 ; i ++ { fmt . Println ( process , id , send , i ) channel - 1 } if closer { close ( channel ) } } func main () { channel := make ( chan int ) go counter ( 1 , channel , false ) go counter ( 2 , channel , true ) x := 0 // receiving data from channel for i := range channel { fmt . Println ( receiving ) x += i } fmt . Println ( x ) }","title":"Go"},{"location":"extensions/codehilite/#html","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 !doctype html html class = no-js lang = head meta charset = utf-8 meta http-equiv = x-ua-compatible content = ie=edge title HTML5 Boilerplate / title meta name = description content = meta name = viewport content = width=device-width, initial-scale=1 link rel = apple-touch-icon href = apple-touch-icon.png link rel = stylesheet href = css/normalize.css link rel = stylesheet href = css/main.css script src = js/vendor/modernizr-2.8.3.min.js / script / head body p Hello world! This is HTML5 Boilerplate. / p / body / html","title":"HTML"},{"location":"extensions/codehilite/#java","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 import java.util.LinkedList ; import java.lang.reflect.Array ; public class UnsortedHashSet E { private static final double LOAD_FACTOR_LIMIT = 0.7 ; private int size ; private LinkedList E [] con ; public UnsortedHashSet () { con = ( LinkedList E [])( new LinkedList [ 10 ]); } public boolean add ( E obj ) { int oldSize = size ; int index = Math . abs ( obj . hashCode ()) % con . length ; if ( con [ index ] == null ) con [ index ] = new LinkedList E (); if (! con [ index ]. contains ( obj )) { con [ index ]. add ( obj ); size ++; } if ( 1.0 * size / con . length LOAD_FACTOR_LIMIT ) resize (); return oldSize != size ; } private void resize () { UnsortedHashSet E temp = new UnsortedHashSet E (); temp . con = ( LinkedList E [])( new LinkedList [ con . length * 2 + 1 ]); for ( int i = 0 ; i con . length ; i ++) { if ( con [ i ] != null ) for ( E e : con [ i ]) temp . add ( e ); } con = temp . con ; } public int size () { return size ; } }","title":"Java"},{"location":"extensions/codehilite/#javascript","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 var Math = require ( lib/math ); var _extends = function ( target ) { for ( var i = 1 ; i arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; var e = exports . e = 2.71828182846 ; exports [ default ] = function ( x ) { return Math . exp ( x ); }; module . exports = _extends ( exports [ default ], exports );","title":"JavaScript"},{"location":"extensions/codehilite/#json","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 { name : mkdocs-material , version : 0.2.4 , description : A Material Design theme for MkDocs , homepage : http://squidfunk.github.io/mkdocs-material/ , authors : [ squidfunk martin.donath@squidfunk.com ], license : MIT , main : Gulpfile.js , scripts : { start : ./node_modules/.bin/gulp watch --mkdocs , build : ./node_modules/.bin/gulp build --production } ... }","title":"JSON"},{"location":"extensions/codehilite/#julia","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 using MXNet mlp = @mx . chain mx . Variable ( : data ) = mx . FullyConnected ( name =: fc1 , num_hidden = 128 ) = mx . Activation ( name =: relu1 , act_type =: relu ) = mx . FullyConnected ( name =: fc2 , num_hidden = 64 ) = mx . Activation ( name =: relu2 , act_type =: relu ) = mx . FullyConnected ( name =: fc3 , num_hidden = 10 ) = mx . SoftmaxOutput ( name =: softmax ) # data provider batch_size = 100 include ( Pkg . dir ( MXNet , examples , mnist , mnist-data.jl )) train_provider , eval_provider = get_mnist_providers ( batch_size ) # setup model model = mx . FeedForward ( mlp , context = mx . cpu ()) # optimization algorithm optimizer = mx . SGD ( lr = 0.1 , momentum = 0.9 ) # fit parameters mx . fit ( model , optimizer , train_provider , n_epoch = 20 , eval_data = eval_provider )","title":"Julia"},{"location":"extensions/codehilite/#lua","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 local ffi = require ( ffi ) ffi . cdef [[ void Sleep(int ms); int poll(struct pollfd *fds, unsigned long nfds, int timeout); ]] local sleep if ffi . os == Windows then function sleep ( s ) ffi . C . Sleep ( s * 1000 ) end else function sleep ( s ) ffi . C . poll ( nil , 0 , s * 1000 ) end end for i = 1 , 160 do io.write ( . ); io.flush () sleep ( 0.01 ) end io.write ( \\n )","title":"Lua"},{"location":"extensions/codehilite/#mysql","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = 087652 ;","title":"MySQL"},{"location":"extensions/codehilite/#php","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 ?php // src/AppBundle/Controller/LuckyController.php namespace AppBundle\\Controller ; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route ; use Symfony\\Component\\HttpFoundation\\Response ; class LuckyController { /** * @Route( /lucky/number ) */ public function numberAction () { $number = mt_rand ( 0 , 100 ); return new Response ( html body Lucky number: . $number . /body /html ); } }","title":"PHP"},{"location":"extensions/codehilite/#protocol-buffers","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 syntax = proto2 ; package caffe ; // Specifies the shape (dimensions) of a Blob. message BlobShape { repeated int64 dim = 1 [ packed = true ]; } message BlobProto { optional BlobShape shape = 7 ; repeated float data = 5 [ packed = true ]; repeated float diff = 6 [ packed = true ]; // 4D dimensions -- deprecated. Use shape instead. optional int32 num = 1 [ default = 0 ]; optional int32 channels = 2 [ default = 0 ]; optional int32 height = 3 [ default = 0 ]; optional int32 width = 4 [ default = 0 ]; }","title":"Protocol Buffers"},{"location":"extensions/codehilite/#python","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 A very simple MNIST classifier. See extensive documentation at http://tensorflow.org/tutorials/mnist/beginners/index.md from __future__ import absolute_import from __future__ import division from __future__ import print_function # Import data from tensorflow.examples.tutorials.mnist import input_data import tensorflow as tf flags = tf . app . flags FLAGS = flags . FLAGS flags . DEFINE_string ( data_dir , /tmp/data/ , Directory for storing data ) mnist = input_data . read_data_sets ( FLAGS . data_dir , one_hot = True ) sess = tf . InteractiveSession () # Create the model x = tf . placeholder ( tf . float32 , [ None , 784 ]) W = tf . Variable ( tf . zeros ([ 784 , 10 ])) b = tf . Variable ( tf . zeros ([ 10 ])) y = tf . nn . softmax ( tf . matmul ( x , W ) + b )","title":"Python"},{"location":"extensions/codehilite/#ruby","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 require finity/event require finity/machine require finity/state require finity/transition require finity/version module Finity class InvalidCallback StandardError ; end class MissingCallback StandardError ; end class InvalidState StandardError ; end # Class methods to be injected into the including class upon inclusion. module ClassMethods # Instantiate a new state machine for the including class by accepting a # block with state and event (and subsequent transition) definitions. def finity options = {}, block @finity ||= Machine . new self , options , block end # Return the names of all registered states. def states @finity . states . map { | name , _ | name } end # Return the names of all registered events. def events @finity . events . map { | name , _ | name } end end # Inject methods into the including class upon inclusion. def self . included base base . extend ClassMethods end end","title":"Ruby"},{"location":"extensions/codehilite/#xml","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 ?xml version= 1.0 encoding= UTF-8 ? !DOCTYPE mainTag SYSTEM some.dtd [ENTITY % entity] ?oxygen RNGSchema= some.rng type= xml ? xs:main-Tag xmlns:xs= http://www.w3.org/2001/XMLSchema !-- This is a sample comment -- childTag attribute= Quoted Value another-attribute= Single quoted value a-third-attribute= 123 withTextContent Some text content /withTextContent withEntityContent Some text content with lt; entities gt; and mentioning uint8_t and int32_t /withEntityContent otherTag attribute= Single quoted Value / /childTag ![CDATA[ some CData ]] /main-Tag","title":"XML"},{"location":"extensions/footnotes/","text":"Footnotes Footnotes is another extension included in the standard Markdown library. As the name says, it adds the ability to add footnotes to your documentation. Installation Add the following lines to your mkdocs.yml : 1 2 markdown_extensions : - footnotes Usage The markup for footnotes is similar to the standard Markdown markup for links. A reference is inserted in the text, which can then be defined at any point in the document. Inserting the reference The footnote reference is enclosed in square brackets and starts with a caret, followed by an arbitrary label which may contain numeric identifiers [1, 2, 3, ...] or names [Granovetter et al. 1998]. The rendered references are always consecutive superscripted numbers. Example: 1 Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Result: Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2 Inserting the content The footnote content is also declared with a label, which must match the label used for the footnote reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink is automatically added to the footnote reference. on a single line Short statements can be written on the same line. Example: 1 [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Result: Jump to footnote at the bottom of the page on multiple lines Paragraphs should be written on the next line. As with all Markdown blocks, the content must be indented by four spaces. Example: 1 2 3 4 [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Jump to footnote at the bottom of the page Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Footnotes"},{"location":"extensions/footnotes/#footnotes","text":"Footnotes is another extension included in the standard Markdown library. As the name says, it adds the ability to add footnotes to your documentation.","title":"Footnotes"},{"location":"extensions/footnotes/#installation","text":"Add the following lines to your mkdocs.yml : 1 2 markdown_extensions : - footnotes","title":"Installation"},{"location":"extensions/footnotes/#usage","text":"The markup for footnotes is similar to the standard Markdown markup for links. A reference is inserted in the text, which can then be defined at any point in the document.","title":"Usage"},{"location":"extensions/footnotes/#inserting-the-reference","text":"The footnote reference is enclosed in square brackets and starts with a caret, followed by an arbitrary label which may contain numeric identifiers [1, 2, 3, ...] or names [Granovetter et al. 1998]. The rendered references are always consecutive superscripted numbers. Example: 1 Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2] Result: Lorem ipsum 1 dolor sit amet, consectetur adipiscing elit. 2","title":"Inserting the reference"},{"location":"extensions/footnotes/#inserting-the-content","text":"The footnote content is also declared with a label, which must match the label used for the footnote reference. It can be inserted at an arbitrary position in the document and is always rendered at the bottom of the page. Furthermore, a backlink is automatically added to the footnote reference.","title":"Inserting the content"},{"location":"extensions/footnotes/#on-a-single-line","text":"Short statements can be written on the same line. Example: 1 [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Result: Jump to footnote at the bottom of the page","title":"on a single line"},{"location":"extensions/footnotes/#on-multiple-lines","text":"Paragraphs should be written on the next line. As with all Markdown blocks, the content must be indented by four spaces. Example: 1 2 3 4 [^2]: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Jump to footnote at the bottom of the page Lorem ipsum dolor sit amet, consectetur adipiscing elit. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"on multiple lines"},{"location":"extensions/metadata/","text":"Metadata The Metadata extension makes it possible to add metadata to a document which gives more control over the theme in a page-specific context. Installation Add the following lines to your mkdocs.yml : 1 2 markdown_extensions : - meta Usage Metadata is written as a series of key-value pairs at the beginning of the Markdown document, delimited by a blank line which ends the metadata context. Naturally, the metadata is stripped from the document before rendering the actual page content and made available to the theme. Example: 1 2 3 4 5 6 7 8 title : Lorem ipsum dolor sit amet description : Nullam urna elit , malesuada eget finibus ut , ac tortor . path : path /to/ file source : file . js # Headline ... See the next section which covers the metadata that is supported by Material. Setting a hero text Material exposes a simple text-only page-local hero via Metadata, as you can see on the current page when you scroll to the top. It's as simple as: 1 hero : Metadata enables hero teaser texts Linking sources When a document is related to a specific set of source files and the repo_url is defined inside the project's mkdocs.yml , the files can be linked using the source key: 1 source : file . js The filename is appended to the repo_url set in your mkdocs.yml , but can be prefixed with a path to ensure correct path resolving: Example: 1 2 path : tree /master/docs/ extensions source : metadata . md Result: See the source section for the resulting output. Redirecting to another page It's sometimes necessary to move documents around in the navigation tree and redirect user from the old URL to the new one. The redirect meta-tag allows to create a redirection from the current document to the address specified in the tag. For instance, if your document contains: 1 redirect: /new/url accessing that document's URL will automatically redirect to /new/url . Overrides Page title The page title can be overridden on a per-document level: 1 title : Lorem ipsum dolor sit amet This will set the title tag inside the document head for the current page to the provided value. It will also override the default behavior of Material for MkDocs which appends the site title using a dash as a separator to the page title. Page description The page description can also be overridden on a per-document level: 1 description : Nullam urna elit, malesuada eget finibus ut, ac tortor. This will set the meta tag containing the site description inside the document head for the current page to the provided value. Disqus As describe in the getting started guide, the Disqus comments section can be enabled on a per-document level: 1 disqus : your - shortname Disqus can be disabled for a specific page by setting it to an empty value: 1 disqus:","title":"Metadata"},{"location":"extensions/metadata/#metadata","text":"The Metadata extension makes it possible to add metadata to a document which gives more control over the theme in a page-specific context.","title":"Metadata"},{"location":"extensions/metadata/#installation","text":"Add the following lines to your mkdocs.yml : 1 2 markdown_extensions : - meta","title":"Installation"},{"location":"extensions/metadata/#usage","text":"Metadata is written as a series of key-value pairs at the beginning of the Markdown document, delimited by a blank line which ends the metadata context. Naturally, the metadata is stripped from the document before rendering the actual page content and made available to the theme. Example: 1 2 3 4 5 6 7 8 title : Lorem ipsum dolor sit amet description : Nullam urna elit , malesuada eget finibus ut , ac tortor . path : path /to/ file source : file . js # Headline ... See the next section which covers the metadata that is supported by Material.","title":"Usage"},{"location":"extensions/metadata/#setting-a-hero-text","text":"Material exposes a simple text-only page-local hero via Metadata, as you can see on the current page when you scroll to the top. It's as simple as: 1 hero : Metadata enables hero teaser texts","title":"Setting a hero text"},{"location":"extensions/metadata/#linking-sources","text":"When a document is related to a specific set of source files and the repo_url is defined inside the project's mkdocs.yml , the files can be linked using the source key: 1 source : file . js The filename is appended to the repo_url set in your mkdocs.yml , but can be prefixed with a path to ensure correct path resolving: Example: 1 2 path : tree /master/docs/ extensions source : metadata . md Result: See the source section for the resulting output.","title":"Linking sources"},{"location":"extensions/metadata/#redirecting-to-another-page","text":"It's sometimes necessary to move documents around in the navigation tree and redirect user from the old URL to the new one. The redirect meta-tag allows to create a redirection from the current document to the address specified in the tag. For instance, if your document contains: 1 redirect: /new/url accessing that document's URL will automatically redirect to /new/url .","title":"Redirecting to another page"},{"location":"extensions/metadata/#overrides","text":"","title":"Overrides"},{"location":"extensions/metadata/#page-title","text":"The page title can be overridden on a per-document level: 1 title : Lorem ipsum dolor sit amet This will set the title tag inside the document head for the current page to the provided value. It will also override the default behavior of Material for MkDocs which appends the site title using a dash as a separator to the page title.","title":"Page title"},{"location":"extensions/metadata/#page-description","text":"The page description can also be overridden on a per-document level: 1 description : Nullam urna elit, malesuada eget finibus ut, ac tortor. This will set the meta tag containing the site description inside the document head for the current page to the provided value.","title":"Page description"},{"location":"extensions/metadata/#disqus","text":"As describe in the getting started guide, the Disqus comments section can be enabled on a per-document level: 1 disqus : your - shortname Disqus can be disabled for a specific page by setting it to an empty value: 1 disqus:","title":"Disqus"},{"location":"extensions/permalinks/","text":"Permalinks Permalinks are a feature of the Table of Contents extension, which is part of the standard Markdown library. The extension inserts an anchor at the end of each headline, which makes it possible to directly link to a subpart of the document. Installation To enable permalinks, add the following to your mkdocs.yml : 1 2 3 markdown_extensions : - toc : permalink : true This will add a link containing the paragraph symbol \u00b6 at the end of each headline (exactly like on the page you're currently viewing), which the Material theme will make appear on hover. In order to change the text of the permalink, a string can be passed, e.g.: 1 2 3 markdown_extensions: - toc: permalink: Link Usage When enabled, permalinks are inserted automatically.","title":"Permalinks"},{"location":"extensions/permalinks/#permalinks","text":"Permalinks are a feature of the Table of Contents extension, which is part of the standard Markdown library. The extension inserts an anchor at the end of each headline, which makes it possible to directly link to a subpart of the document.","title":"Permalinks"},{"location":"extensions/permalinks/#installation","text":"To enable permalinks, add the following to your mkdocs.yml : 1 2 3 markdown_extensions : - toc : permalink : true This will add a link containing the paragraph symbol \u00b6 at the end of each headline (exactly like on the page you're currently viewing), which the Material theme will make appear on hover. In order to change the text of the permalink, a string can be passed, e.g.: 1 2 3 markdown_extensions: - toc: permalink: Link","title":"Installation"},{"location":"extensions/permalinks/#usage","text":"When enabled, permalinks are inserted automatically.","title":"Usage"},{"location":"extensions/pymdown/","text":"PyMdown Extensions PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme. Installation The PyMdown Extensions package can be installed with the following command: 1 pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 markdown_extensions : - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde Usage BetterEm BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes . Caret Caret makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ . Critic Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content. Details Details adds collapsible Admonition-style blocks which can contain arbitrary content using the HTML5 details and summary tags. Additionally, all Admonition qualifiers can be used, e.g. note , question , warning etc.: How many Prolog programmers does it take to change a lightbulb? Yes. Emoji Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution. InlineHilite InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js . MagicLink MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses. Mark Mark adds the ability to highlight text like it was marked with a text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== . SmartSymbols SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows ( , , ), trademark and copyright symbols ( , , ) and fractions ( , , ...). SuperFences SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly. SuperFences does also allow grouping code blocks with tabs . Tasklist Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: 1 2 3 4 5 6 7 8 9 10 * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Tilde Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest.","title":"PyMdown"},{"location":"extensions/pymdown/#pymdown-extensions","text":"PyMdown Extensions is a collection of Markdown extensions that add some great features to the standard Markdown library. For this reason, the installation of this package is highly recommended as it's well-integrated with the Material theme.","title":"PyMdown Extensions"},{"location":"extensions/pymdown/#installation","text":"The PyMdown Extensions package can be installed with the following command: 1 pip install pymdown-extensions The following list of extensions that are part of the PyMdown Extensions package are recommended to be used together with the Material theme: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 markdown_extensions : - pymdownx.betterem : smart_enable : all - pymdownx.caret - pymdownx.critic - pymdownx.details - pymdownx.emoji : emoji_generator : !!python/name:pymdownx.emoji.to_svg - pymdownx.inlinehilite - pymdownx.magiclink - pymdownx.mark - pymdownx.smartsymbols - pymdownx.superfences - pymdownx.tasklist : custom_checkbox : true - pymdownx.tilde","title":"Installation"},{"location":"extensions/pymdown/#usage","text":"","title":"Usage"},{"location":"extensions/pymdown/#betterem","text":"BetterEm improves the handling of emphasis markup ( bold and italic ) within Markdown by providing a more sophisticated parser for better detecting start and end tokens. Read the documentation for usage notes .","title":"BetterEm"},{"location":"extensions/pymdown/#caret","text":"Caret makes it possible to highlight inserted text . The portion of text that should be marked as added must be enclosed in two carets ^^...^^ .","title":"Caret"},{"location":"extensions/pymdown/#critic","text":"Critic implements Critic Markup , a Markdown extension that enables the tracking of changes (additions, deletions and comments) on documents. During compilation of the Markdown document, changes can be rendered (default), accepted or rejected. Text can be deleted and replacement text added . This can also be combined into one a single operation. Highlighting is also possible and comments can be added inline . Formatting can also be applied to blocks, by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.","title":"Critic"},{"location":"extensions/pymdown/#details","text":"Details adds collapsible Admonition-style blocks which can contain arbitrary content using the HTML5 details and summary tags. Additionally, all Admonition qualifiers can be used, e.g. note , question , warning etc.: How many Prolog programmers does it take to change a lightbulb? Yes.","title":"Details"},{"location":"extensions/pymdown/#emoji","text":"Emoji adds the ability to insert a -load of emojis that we use in our daily lives. See the EmojiOne demo for a list of all available emojis. Happy scrolling Legal disclaimer Material has no affiliation with EmojiOne which is released under CC BY 4.0 . When including EmojiOne images or CSS, please read the EmojiOne license to ensure proper usage and attribution.","title":"Emoji"},{"location":"extensions/pymdown/#inlinehilite","text":"InlineHilite adds support for inline code highlighting. It's useful for short snippets included within body copy, e.g. var test = 0 ; and can be achived by prefixing inline code with a shebang and language identifier, e.g. #!js .","title":"InlineHilite"},{"location":"extensions/pymdown/#magiclink","text":"MagicLink detects links in Markdown and auto-generates the necessary markup, so no special syntax is required. It auto-links http[s]:// and ftp:// links, as well as references to email addresses.","title":"MagicLink"},{"location":"extensions/pymdown/#mark","text":"Mark adds the ability to highlight text like it was marked with a text marker . The portion of text that should be highlighted must be enclosed in two equal signs ==...== .","title":"Mark"},{"location":"extensions/pymdown/#smartsymbols","text":"SmartSymbols converts markup for special characters into their corresponding symbols, e.g. arrows ( , , ), trademark and copyright symbols ( , , ) and fractions ( , , ...).","title":"SmartSymbols"},{"location":"extensions/pymdown/#superfences","text":"SuperFences provides the ability to nest code blocks under blockquotes, lists and other block elements, which the Fenced Code Blocks extension from the standard Markdown library doesn't parse correctly. SuperFences does also allow grouping code blocks with tabs .","title":"SuperFences"},{"location":"extensions/pymdown/#tasklist","text":"Tasklist adds support for styled checkbox lists. This is useful for keeping track of tasks and showing what has been done and has yet to be done. Checkbox lists are like regular lists, but prefixed with [ ] for empty or [x] for filled checkboxes. Example: 1 2 3 4 5 6 7 8 9 10 * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit * [x] Nulla lobortis egestas semper * [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est * [ ] Vestibulum convallis sit amet nisi a tincidunt * [x] In hac habitasse platea dictumst * [x] In scelerisque nibh non dolor mollis congue sed et metus * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis * [ ] Praesent sed risus massa * [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque * [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi","title":"Tasklist"},{"location":"extensions/pymdown/#tilde","text":"Tilde provides an easy way to strike through cross out text. The portion of text that should be erased must be enclosed in two tildes ~~...~~ and the extension will take care of the rest.","title":"Tilde"},{"location":"papan/apa-itu-arduino/","text":"Mengenal Arduino Arduino merupakan salah satu platform mikrokontroler yang sangat populer akhir-akhir ini. Para pegiat mikrokontroler dari segala penjuru dunia sebagian besar terpusat untuk membahas pembahasan Arduino. Sifatnya yang Open Source Hardware membuatnya berkembang sangat pesat. Orang-orang begitu bersemangat untuk saling berbagi kode-kode yang sudah disusun oleh mereka untuk dibagikan keseluruh dunia. Selain itu, perangkat keras yang tersedia pun semakin melimpah dan semakin murah. Para pecinta mikrokontroler berlomba-lomba untuk membuat platform Arduino ini dengan berbagai fasilitas dan fungsi yang lebih namun dengan tetap menjualnya dengan harga murah. Setiap pecinta mikrokontroler diperbolehkan untuk membuat Arduino sesuai dengan selera dan kebutuhannya masing-masing, inilah yang membuat Arduini menjadi sangat menarik untuk dipelajari. Lalu apa Arduino? Apa itu Arduino? Arduino adalah sebuah platform open source (sumber terbuka) yang digunakan untuk membuat proyek-proyek elektronika. Arduino terdiri dari dua bagian utama yaitu sebuah papan sirkuit fisik (sering disebut juga dengan mikrokontroler) dan sebuah perangkat lunak atau IDE (Integrated Development Environment) yang berjalan pada komputer. Perangkat lunak ini sering disebut Arduino IDE yang digunakan untuk menulis dan meng-upload kode dari komputer ke papan fisik (hardware) Arduino. Ketika membicarakan Arduino maka ada dua hal yang terlintas dalam pikiran para penggunanya, yaitu hardware dan software. Dua bagian ini seakan satu kesatuan utuh yang tidak bisa di pisahkan. Platform Arduino sekarang ini menjadi sangat populer dengan pertambahan jumlah pengguna baru yang terus meningkat. Hal ini karena kemudahannya dalam penggunaan dan penulisan kode. Tidak seperti kebanyakan papan sirkuit pemrograman sebelumnya, Arduino tidak lagi membutuhkan perangkat keras terpisah (disebut programmer atau downloader) untuk memuat atau meng-upload kode baru ke dalam mikrokontroler. Cukup dengan menggunakan kabel USB untuk mulai menggunakan Arduino. Selain itu, Arduino IDE menggunakan bahasa pemrograman C++ dengan versi yang telah disederhanakan, sehingga lebih mudah dalam belajar pemrograman. Arduino akhirnya berhasil menjadi papan sirkuit pemrograman paling disukai hingga menjadikannya sebagai bentuk standar dari fungsi mikrokontroler dengan paket yang mudah untuk diakses. Gambar diatas menunjukan papan Arduino Uno yang merupakan salah satu papan paling populer diantara keluarga Arduino dan papan ini merupakan pilihan yang sangat cocok bagi para pemula. Dan selanjutnya artikel ini akan membahas lebih dalam mengenai Arduino terutama Arduino Uno. Sebelum Arduino diciptakan, menulis kode mikrokontroler adalah hal yang sangat rumit dan memusingkan, tapi sekarang, hal yang sangat rumit itu menjadi lebih sederhana. Bahkan sebagian orang menyebutnya tidak mungkin, ketika hanya dengan 10 baris kode kita mampu membuat LED berkedip. Apa Itu Mikrokontroler? Berbagai jenis komputer dirancang dan dibangun dengan tujuan berbeda. Komputer yang menjadi jantung laptop Anda dioptimalkan untuk tujuan berbeda dari apa yang ada didalam ponsel atau didalam mouse yang anda pegang sekarang. Komputer sederhana adalah perangkat yang dirancang untuk mengambil perangkat inpu (masukan) dari dunia fisik dan atau mengendalikan perangkat output (keluaran) di dunia fisik. Inilah yang disebut mikrokontroler. Sebagian perangkat elektronik yang ada sekarang ini memiliki mikrokontroler pada bagian intinya. Mikrokontroler yang dioptimalkan untuk mengendalikan input saja atau output saja. Mereka pada umumnya memiliki kemampuan komputasi yang rendah jika dibandingkan dengan prosesor yang digunakan pada komputer multimedia atau komputer server. Mikrokontroler membutuhkan daya yang lebih rendah dibanding prosesor lainnya dan lebih mudah untuk berinteraksi dengan dunia fisik melalui sirkuit input yang disebut sensor dan sirkuit output yang disebut aktuator. Mikrokontroler juga dapat berkomunikkasi dengan prosesor lain melalui berbagai antarmuka komunikasi (communication interface). Komputer, mikrokontroler, prosesor? Jadi yang mana? Kita sering mendengar istilah-istilah ini disebutkan silih berganti disekitar kita. Komputer dan Prosesor adalah istilah umum untuk apapun yang pada dasarnya mampu menjalankan program. Sedangkan Kontroler atau Mikrokontroler biasanya diperuntukan bagi prosesor sederhana yang hanya mampu menjalankan satu tugas saja, seperti membaca sensor. Apa Yang Bisa Dilakukan Arduino? Hardware dan software Arduino dirancang bagi para seniman, desainer, pe-hobi, hacker, pemula dan siapapun yang tertarik untuk menciptakan objek interaktif dan pengembangan lingkungan. Arduino mampu berinteraksi dengan tombol, LED, motor, speaker, GPS, kamera, internet, ponsel pintar bahkan dengan televisi anda. Fleksibilitas ini dihasilkan dari kombinasi ketersediaan software Arduino yang gratis, papan perangkat keras yang murah, dan keduanya yang mudah untuk dipelajari. Hal inilah yang menciptakan jumlah pengguna menjadi sebuah komunitas besar dengan berbagai kontribusinya yang telah dirilis pada berbagai proyek dengan berbasiskan Arduino. Jika Anda ingin mengetahui dimana kita bisa menemukan berbagai contoh proyek Arduino yang telah tercipta, dibawah ini adalah beberapa sumber daya yang bagus untuk proyek-proyek berbasis Arduino, yang bisa memicu cara berfikir Anda dan menggugah kreatifitas: Sparkfun Instructables Bildr Arduino Playground Adafruit Make Projects Dan tentu saja anda dapat menemukan banyak tutorial menarik disini di https://henduino.github.io/library/ Apa Yang Ada Pada Papan Arduino? Ada banyak jenis papan Arduino yang dapat digunakan untuk tujuan yang berbeda. Beberapa papan memiliki ukuran, jumlah pin, mikrokontroler yang berbeda seperti pada gambar dibawah ini. Namun, sebagian besar Arduino memiliki komponen utama yang sama. Daya (USB/Barrel Jack) Setiap papan Arduino membutuhkan jalur untuk terhubung ke sumber listrik. Arduino Uno dapat diaktifkan melalui kable USB ang berasal dari komputer atau power supply terpisah yang dihubungkan ke Barrel Jack. Pada gambar diatas koneksi USB diberi label (1) dan Barrel Jack diberi label (2). Koneksi USB selain digunakan sebagai jalur listrik untuk mengaktifkan papan, juga digunakan untuk meng-upload kode dari komputer ke papan Arduino. Dua fungsi melalui satu jalur atau 2 in 1 (seperti iklan Shampo). Perhatian!: JANGAN menggunakan power supply lebih dari 20 Volt untuk mengaktifkan papan Arduino melalui Barrel Jack karena itu tegangan berlebihan yang cukup untuk menghacurkan papan Arduino Anda. Tegangan yang dianjurkan untuk sebagian besar keluarga Arduino adalah antara 6 Volt sampai dengan 12 Volt. Pin (5V, 3.3V, GND, Analog, Digital, PWM, AREF) Pin pada Arduino adalah tempat dimana kita menghubungkan kabel untuk membuat suatu rangkaian (menghubungkan satu titik dengan titik lainnya pada breadboard dengan sejumlah kabel penghubung). Kabel penghubung (jumper wire) yang digunakan dalam membuat rangkaian biasanya memiliki kepala yang terbuat dari plastik berwarna hitam yang memungkin kawat dari kabel penghubungnya saja yang terhubung langsung ke papan. Arduino memiliki beberapa jenis pin yang masing-masing diberi label pada papan dan digunakan untuk fungsi yang berbeda-beda. GND (3) : GND merupakan singkatan dari GROUND. Ada beberapa pin GND pada Arduino, dan semuanya dapat digunakan untuk hubungan ke ground. 5V (4) dan 3.3V (5) : Pin 5V digunakan untuk menyediakan tegangan sebesar 5 volt. Sedangkan pin 3.3V digunakan untuk menyediakan tegangan 3,3 volt. Sebagian besar komponen sederhana yang digunakan bersama dengan Arduino berjalan pada kisaran tegangan 3,3 volt hingga 5 volt. Analog (6) : Pin yang berada pada area berlabel \"ANALOG IN\" (A0 sampai A5 pada Arduino Uno) digunakan sebagai pin analog. Yaitu pin yang digunakan untuk membaca sinyal-sinyal analog dari sensor-sensor analog (misal; sensor suhu) dan mengubahnya menjadi nilai digital yang dapat kita baca. Digital (7) : Pin digital berada diseberang pin analog (0 sampai 13 pada Arduino Uno). Pin ini dapat digunakan dalam 2 arah digital yaitu input digital (misal untuk melihat kondisi bahwa tombol sedang ditekan) dan output digital (memberikan tegangan sebuah LED). PWM (8) : Perhatikanlah simbol tilde (~) disamping beberapa pin digital (yaitu pada pin 3, 5, 6, 9, 10 dan 11 pada Arduino Uno). Pin ini dapat digunakan sebagai pin digital biasa, tetapi juga dapat digunakan sebagai pin PWM (Pulse Width Modulation). PWM biasanya digunakan sebagai pin yang mampu mensimulasikan output analog (seperti mengatur pemudaran cahaya dan warna LED saat datang dan pergi). PWM bukan analog, hanya mampu mensimulasikan analog saja. Jadi tidaklah sama antara analog dengan PWM. (Bahasan di artikel lain). AREF (9) : Kepanjangan dari Analog Reference atau Referensi Analog. Selama belajar, tinggalkan saja pin ini. Pin ini terkadang digunakan sebagai referensi dalam mengatur tegangan eksternal (antara 0 sampai 5 volt) untuk memberikan limit (batasan akhir) pada input pin analog. Tombol Reset Menekan tombol Reset (10) beberapa saat pada papan Arduino akan menghubungkan pin Reset ke Ground. Ini digunakan untuk me-restart kode yang telah dimuat oleh Arduino. Ini sangat bermanfaat untuk menguji ulang kode, jika kode tersebut ditulis tanpa pengulangan (repeat) atau sekali jalan. Jika anda pernah menggunakan Nintendo pasti tahu fungsi tombol Reset ini. Pada Nintendo ketika menekan tombol Reset maka hal itu digunakan untuk memperbaiki masalah, tetapi tidak demikian pada Arduino. LED Indikator Daya Tepat di bawah dan di sebelah kanan kata \"UNO\" pada papan Arduino Uno, terdapat sebuah LED kecil berlabel \"ON\" (11). LED ini harus menyala setiap kita mengubungkan papan Arduino pada sumber listrik. Jika lampu LED ini tidak menyala, kemungkinan ada papan mengalami kerusakan atau terjadi kesalahan. Periksa ulang rankaian yang anda buat. TX RX LED TX adalah singkatan dari 'transmit' (kirim), dan RX adalah singkatan dari 'receive' (terima). LED indikator TX dan RX (12) ini akan berkedip redup atau terang dengan jeda tak tentu untuk memberitahukan bahwa telah terjadi komunikasi serial. Kedipan LED ini sebagai indikasi visual yang merupakan pertanda baik bahwa telah terjadi pengiriman dan penerimaan data pada papan Arduino (misal ketika kita meng-upload kode baru ke dalam papan). IC Utama Sesuatu yang berwarna hitam dengan semua kakinya terbuat dari logam inilah yang sebut IC atau Integrated Circuit (13). Ini adalah otak dari papan Arduino. IC utama Arduino berbeda-beda sesuai dengan jenis papan, tetapi biasanya memiliki ciri khas bertuliskan ATmega yang merupakan IC buatan perusahaan ATMEL. Ini merupakan hal penting, karena kita perlu untuk memahami jenis IC (sesuai juga dengan jenis papan Arduino) sebelum memuat atau meng-upload sekumpulan kode program yang telah kita buat dari perangkat lunak Arduino IDE kedalam papan Arduino. Informasi tentang tipe IC dapat kita temukan pada permukaan IC tersebut. Jika kita ingin tahu lebih jauh tentang perbedaan jenis IC yang digunakan pada keluarga Arduino maka sebaiknya selalu unduh datasheet dari masing-masing tipe IC. Regulator Tegangan Voltage Regulator (14) bukanlah sesuatu yang mampu berinteraksi dengan papan Arduino. Tetapi kita harus mengetahui fungsi dari voltage regulator. Voltage Regulator atau Regulator Tegangan akan mengalirkan sejumlah tegangan teregulati ke dalam papan Arduino. Voltage Regulator berperan sebagai penjaga pintu gerbang, dia akan membalikan atau membuang tegangan berlebihan yang bisa membahayan rangkaian. Tapi tentu saja ada batasnya, pastikan bahwa tegangan yang masuk ke dalam papan tidak lebih besar dari 20 volt. Keluarga Arduino Perusahaan Arduino telah membuat beberapa tipe papan yang berbeda-beda, masing-masing tipe tersebut memiliki kemampuan yang berbeda pula. Selain itu, Arduino merupakan Open Source Hardware yang berarti bahwa siapa saja dapat memodifikasi dan menghasilkan turunan Arduino dengan bentuk dan fungsi yang lebih beragam. Jika Anda belum begitu paham mengenai papan Arduino, berikut adalah beberapa pilihan yang cocok untuk mereka yang baru saja ingin berkenalan dengan Arduino. Arduino Uno (R3) Arduino Uno adalah pilihan yang tepat bagi mereka yang baru pertama kali ingin mempelajari Arduino. Karena Uno merupakan paket lengkap untuk memulai belajar Arduino. Memiliki 14 pin input/output digital (dimana 6 pin dapat digunakan sebagai output PWM), 6 pin input analog, koneksi USB, jack daya, tombol reset, dan masih banyak lagi. Ini semua sudah cukup untuk keperluan belajar mikrokontroler. Hanya dengan menghubungkan papan Arduino ke komputer melalui kabel USB, atau menggunakan adaptor AC-DC, atau menggunakan baterai untuk mengaktifkan papan Arduino. Arduino Leonardo Arduino Leonardo adalah tipe papan yang dikembangkan pertama kali oleh Arduino dengan menggunakan satu mikrokontroler dengan fungsi komunikasi USB yang terintegrasi didalamnya. Ini membuat Leonardo lebih sederhana dan lebih murah. Karena Leonardo dapat menanganai komunikasi USB secara langsung, kode perpustakaan yang tersedia pun memungkinkan Leonardo dapat meniru keyboard komputer, mouse dan masih banyak lagi. Arduino Mega Arduino Mega itu seperti halnya kakak UNO. Memiliki banyak (54) pin digital input/output (14 pin digunakan sebagai output PWM), 16 pin analog, koneksi USB, jack daya, tombol reset, dan masih banyak lagi. Ini merupakan papan lengkap yang diperlukan untuk mendukung pembelajaran mikrokontroler. Jumlah pin yang banyak membuat Arduino Mega digunakan untuk proyek-proyke yang memerlukan banyak input dan ouput digital. Bagian Pelengkap Jika anda sudah yakin dengan papan Arduino yang akan digunakan, maka selanjutnya adalah menentukan bagian pelengkap, karena papan Arduino tidak bisa berdiri sendiri tanpa sesuatu terpasang pada papan. Anda bisa menghubungkan sensor atau shield Arduino. Peralatan ini sangat berguna untuk digunakan pada proyek yang akan anda buat. Sensor dengan beberapa baris kode sederhana, Arduino dapat mengontrol dan berinteraksi dengan berbagai sensor, misalnya; pengukur intensitas cahaya, suhu, tekanan, akselerasi, kandungan karbon monoksida, aktifitas radioaktif, kelembaban, tekanan udara, dan mungkin suatu sensor yang bisa anda buat dan beri nama sendiri. Shield Selain sensor, ada juga yang sebut shield (marilah kita sebut dengan perisai). Pada dasarnya shield adalah papan rangkaian yang tidak belum disempurnakan atau dilengkapi secara keseluruhan dan dibuat dengan pin yang sesuai dengan papan Ardiuno agar mudah saat digunakan atau dihubungkan. Shield memberikan kemampuan tambahan seperti halnya; pengendari motor, menghubungkan dengan internet, komunikasi seluler, komunikasi nirkabel, mengontrol layar LCD dan masih banyak lagi shield dengan berbagai fungsi yang bisa dipilih sesuai dengan proyek yang akan anda buat. Untuk mengetahui lebih jauh tentang shield yang banyak digunakan para pengguna Arduino anda bisa memeriksanya pada situs ShieldList.org . Kesimpulan Penulis berharap sekarang anda mulai memahami tentang Arduino, keluarga Arduino, dan beberapa informasi tentang Arduino sebagai awalan untuk belajar tentang mikrokontroler. Ada ribuan sensor dan shield yang bisa anda manfaatkan untuk membantu proyek anda ke tingkat selanjutnya. Selamat belajar... Referensi Learn the basics Arduino Tutorials Beginner Arduino Learn Electronics and Microcontrollers Physical Computing The Complete Arduino Guide For Beginners The Absolute Beginner's Guide to Arduino","title":"Mengenal Arduino"},{"location":"papan/apa-itu-arduino/#mengenal-arduino","text":"Arduino merupakan salah satu platform mikrokontroler yang sangat populer akhir-akhir ini. Para pegiat mikrokontroler dari segala penjuru dunia sebagian besar terpusat untuk membahas pembahasan Arduino. Sifatnya yang Open Source Hardware membuatnya berkembang sangat pesat. Orang-orang begitu bersemangat untuk saling berbagi kode-kode yang sudah disusun oleh mereka untuk dibagikan keseluruh dunia. Selain itu, perangkat keras yang tersedia pun semakin melimpah dan semakin murah. Para pecinta mikrokontroler berlomba-lomba untuk membuat platform Arduino ini dengan berbagai fasilitas dan fungsi yang lebih namun dengan tetap menjualnya dengan harga murah. Setiap pecinta mikrokontroler diperbolehkan untuk membuat Arduino sesuai dengan selera dan kebutuhannya masing-masing, inilah yang membuat Arduini menjadi sangat menarik untuk dipelajari. Lalu apa Arduino?","title":"Mengenal Arduino"},{"location":"papan/apa-itu-arduino/#apa-itu-arduino","text":"Arduino adalah sebuah platform open source (sumber terbuka) yang digunakan untuk membuat proyek-proyek elektronika. Arduino terdiri dari dua bagian utama yaitu sebuah papan sirkuit fisik (sering disebut juga dengan mikrokontroler) dan sebuah perangkat lunak atau IDE (Integrated Development Environment) yang berjalan pada komputer. Perangkat lunak ini sering disebut Arduino IDE yang digunakan untuk menulis dan meng-upload kode dari komputer ke papan fisik (hardware) Arduino. Ketika membicarakan Arduino maka ada dua hal yang terlintas dalam pikiran para penggunanya, yaitu hardware dan software. Dua bagian ini seakan satu kesatuan utuh yang tidak bisa di pisahkan. Platform Arduino sekarang ini menjadi sangat populer dengan pertambahan jumlah pengguna baru yang terus meningkat. Hal ini karena kemudahannya dalam penggunaan dan penulisan kode. Tidak seperti kebanyakan papan sirkuit pemrograman sebelumnya, Arduino tidak lagi membutuhkan perangkat keras terpisah (disebut programmer atau downloader) untuk memuat atau meng-upload kode baru ke dalam mikrokontroler. Cukup dengan menggunakan kabel USB untuk mulai menggunakan Arduino. Selain itu, Arduino IDE menggunakan bahasa pemrograman C++ dengan versi yang telah disederhanakan, sehingga lebih mudah dalam belajar pemrograman. Arduino akhirnya berhasil menjadi papan sirkuit pemrograman paling disukai hingga menjadikannya sebagai bentuk standar dari fungsi mikrokontroler dengan paket yang mudah untuk diakses. Gambar diatas menunjukan papan Arduino Uno yang merupakan salah satu papan paling populer diantara keluarga Arduino dan papan ini merupakan pilihan yang sangat cocok bagi para pemula. Dan selanjutnya artikel ini akan membahas lebih dalam mengenai Arduino terutama Arduino Uno. Sebelum Arduino diciptakan, menulis kode mikrokontroler adalah hal yang sangat rumit dan memusingkan, tapi sekarang, hal yang sangat rumit itu menjadi lebih sederhana. Bahkan sebagian orang menyebutnya tidak mungkin, ketika hanya dengan 10 baris kode kita mampu membuat LED berkedip.","title":"Apa itu Arduino?"},{"location":"papan/apa-itu-arduino/#apa-itu-mikrokontroler","text":"Berbagai jenis komputer dirancang dan dibangun dengan tujuan berbeda. Komputer yang menjadi jantung laptop Anda dioptimalkan untuk tujuan berbeda dari apa yang ada didalam ponsel atau didalam mouse yang anda pegang sekarang. Komputer sederhana adalah perangkat yang dirancang untuk mengambil perangkat inpu (masukan) dari dunia fisik dan atau mengendalikan perangkat output (keluaran) di dunia fisik. Inilah yang disebut mikrokontroler. Sebagian perangkat elektronik yang ada sekarang ini memiliki mikrokontroler pada bagian intinya. Mikrokontroler yang dioptimalkan untuk mengendalikan input saja atau output saja. Mereka pada umumnya memiliki kemampuan komputasi yang rendah jika dibandingkan dengan prosesor yang digunakan pada komputer multimedia atau komputer server. Mikrokontroler membutuhkan daya yang lebih rendah dibanding prosesor lainnya dan lebih mudah untuk berinteraksi dengan dunia fisik melalui sirkuit input yang disebut sensor dan sirkuit output yang disebut aktuator. Mikrokontroler juga dapat berkomunikkasi dengan prosesor lain melalui berbagai antarmuka komunikasi (communication interface). Komputer, mikrokontroler, prosesor? Jadi yang mana? Kita sering mendengar istilah-istilah ini disebutkan silih berganti disekitar kita. Komputer dan Prosesor adalah istilah umum untuk apapun yang pada dasarnya mampu menjalankan program. Sedangkan Kontroler atau Mikrokontroler biasanya diperuntukan bagi prosesor sederhana yang hanya mampu menjalankan satu tugas saja, seperti membaca sensor.","title":"Apa Itu Mikrokontroler?"},{"location":"papan/apa-itu-arduino/#apa-yang-bisa-dilakukan-arduino","text":"Hardware dan software Arduino dirancang bagi para seniman, desainer, pe-hobi, hacker, pemula dan siapapun yang tertarik untuk menciptakan objek interaktif dan pengembangan lingkungan. Arduino mampu berinteraksi dengan tombol, LED, motor, speaker, GPS, kamera, internet, ponsel pintar bahkan dengan televisi anda. Fleksibilitas ini dihasilkan dari kombinasi ketersediaan software Arduino yang gratis, papan perangkat keras yang murah, dan keduanya yang mudah untuk dipelajari. Hal inilah yang menciptakan jumlah pengguna menjadi sebuah komunitas besar dengan berbagai kontribusinya yang telah dirilis pada berbagai proyek dengan berbasiskan Arduino. Jika Anda ingin mengetahui dimana kita bisa menemukan berbagai contoh proyek Arduino yang telah tercipta, dibawah ini adalah beberapa sumber daya yang bagus untuk proyek-proyek berbasis Arduino, yang bisa memicu cara berfikir Anda dan menggugah kreatifitas: Sparkfun Instructables Bildr Arduino Playground Adafruit Make Projects Dan tentu saja anda dapat menemukan banyak tutorial menarik disini di https://henduino.github.io/library/","title":"Apa Yang Bisa Dilakukan Arduino?"},{"location":"papan/apa-itu-arduino/#apa-yang-ada-pada-papan-arduino","text":"Ada banyak jenis papan Arduino yang dapat digunakan untuk tujuan yang berbeda. Beberapa papan memiliki ukuran, jumlah pin, mikrokontroler yang berbeda seperti pada gambar dibawah ini. Namun, sebagian besar Arduino memiliki komponen utama yang sama.","title":"Apa Yang Ada Pada Papan Arduino?"},{"location":"papan/apa-itu-arduino/#daya-usbbarrel-jack","text":"Setiap papan Arduino membutuhkan jalur untuk terhubung ke sumber listrik. Arduino Uno dapat diaktifkan melalui kable USB ang berasal dari komputer atau power supply terpisah yang dihubungkan ke Barrel Jack. Pada gambar diatas koneksi USB diberi label (1) dan Barrel Jack diberi label (2). Koneksi USB selain digunakan sebagai jalur listrik untuk mengaktifkan papan, juga digunakan untuk meng-upload kode dari komputer ke papan Arduino. Dua fungsi melalui satu jalur atau 2 in 1 (seperti iklan Shampo). Perhatian!: JANGAN menggunakan power supply lebih dari 20 Volt untuk mengaktifkan papan Arduino melalui Barrel Jack karena itu tegangan berlebihan yang cukup untuk menghacurkan papan Arduino Anda. Tegangan yang dianjurkan untuk sebagian besar keluarga Arduino adalah antara 6 Volt sampai dengan 12 Volt.","title":"Daya (USB/Barrel Jack)"},{"location":"papan/apa-itu-arduino/#pin-5v-33v-gnd-analog-digital-pwm-aref","text":"Pin pada Arduino adalah tempat dimana kita menghubungkan kabel untuk membuat suatu rangkaian (menghubungkan satu titik dengan titik lainnya pada breadboard dengan sejumlah kabel penghubung). Kabel penghubung (jumper wire) yang digunakan dalam membuat rangkaian biasanya memiliki kepala yang terbuat dari plastik berwarna hitam yang memungkin kawat dari kabel penghubungnya saja yang terhubung langsung ke papan. Arduino memiliki beberapa jenis pin yang masing-masing diberi label pada papan dan digunakan untuk fungsi yang berbeda-beda. GND (3) : GND merupakan singkatan dari GROUND. Ada beberapa pin GND pada Arduino, dan semuanya dapat digunakan untuk hubungan ke ground. 5V (4) dan 3.3V (5) : Pin 5V digunakan untuk menyediakan tegangan sebesar 5 volt. Sedangkan pin 3.3V digunakan untuk menyediakan tegangan 3,3 volt. Sebagian besar komponen sederhana yang digunakan bersama dengan Arduino berjalan pada kisaran tegangan 3,3 volt hingga 5 volt. Analog (6) : Pin yang berada pada area berlabel \"ANALOG IN\" (A0 sampai A5 pada Arduino Uno) digunakan sebagai pin analog. Yaitu pin yang digunakan untuk membaca sinyal-sinyal analog dari sensor-sensor analog (misal; sensor suhu) dan mengubahnya menjadi nilai digital yang dapat kita baca. Digital (7) : Pin digital berada diseberang pin analog (0 sampai 13 pada Arduino Uno). Pin ini dapat digunakan dalam 2 arah digital yaitu input digital (misal untuk melihat kondisi bahwa tombol sedang ditekan) dan output digital (memberikan tegangan sebuah LED). PWM (8) : Perhatikanlah simbol tilde (~) disamping beberapa pin digital (yaitu pada pin 3, 5, 6, 9, 10 dan 11 pada Arduino Uno). Pin ini dapat digunakan sebagai pin digital biasa, tetapi juga dapat digunakan sebagai pin PWM (Pulse Width Modulation). PWM biasanya digunakan sebagai pin yang mampu mensimulasikan output analog (seperti mengatur pemudaran cahaya dan warna LED saat datang dan pergi). PWM bukan analog, hanya mampu mensimulasikan analog saja. Jadi tidaklah sama antara analog dengan PWM. (Bahasan di artikel lain). AREF (9) : Kepanjangan dari Analog Reference atau Referensi Analog. Selama belajar, tinggalkan saja pin ini. Pin ini terkadang digunakan sebagai referensi dalam mengatur tegangan eksternal (antara 0 sampai 5 volt) untuk memberikan limit (batasan akhir) pada input pin analog.","title":"Pin (5V, 3.3V, GND, Analog, Digital, PWM, AREF)"},{"location":"papan/apa-itu-arduino/#tombol-reset","text":"Menekan tombol Reset (10) beberapa saat pada papan Arduino akan menghubungkan pin Reset ke Ground. Ini digunakan untuk me-restart kode yang telah dimuat oleh Arduino. Ini sangat bermanfaat untuk menguji ulang kode, jika kode tersebut ditulis tanpa pengulangan (repeat) atau sekali jalan. Jika anda pernah menggunakan Nintendo pasti tahu fungsi tombol Reset ini. Pada Nintendo ketika menekan tombol Reset maka hal itu digunakan untuk memperbaiki masalah, tetapi tidak demikian pada Arduino.","title":"Tombol Reset"},{"location":"papan/apa-itu-arduino/#led-indikator-daya","text":"Tepat di bawah dan di sebelah kanan kata \"UNO\" pada papan Arduino Uno, terdapat sebuah LED kecil berlabel \"ON\" (11). LED ini harus menyala setiap kita mengubungkan papan Arduino pada sumber listrik. Jika lampu LED ini tidak menyala, kemungkinan ada papan mengalami kerusakan atau terjadi kesalahan. Periksa ulang rankaian yang anda buat.","title":"LED Indikator Daya"},{"location":"papan/apa-itu-arduino/#tx-rx-led","text":"TX adalah singkatan dari 'transmit' (kirim), dan RX adalah singkatan dari 'receive' (terima). LED indikator TX dan RX (12) ini akan berkedip redup atau terang dengan jeda tak tentu untuk memberitahukan bahwa telah terjadi komunikasi serial. Kedipan LED ini sebagai indikasi visual yang merupakan pertanda baik bahwa telah terjadi pengiriman dan penerimaan data pada papan Arduino (misal ketika kita meng-upload kode baru ke dalam papan).","title":"TX RX LED"},{"location":"papan/apa-itu-arduino/#ic-utama","text":"Sesuatu yang berwarna hitam dengan semua kakinya terbuat dari logam inilah yang sebut IC atau Integrated Circuit (13). Ini adalah otak dari papan Arduino. IC utama Arduino berbeda-beda sesuai dengan jenis papan, tetapi biasanya memiliki ciri khas bertuliskan ATmega yang merupakan IC buatan perusahaan ATMEL. Ini merupakan hal penting, karena kita perlu untuk memahami jenis IC (sesuai juga dengan jenis papan Arduino) sebelum memuat atau meng-upload sekumpulan kode program yang telah kita buat dari perangkat lunak Arduino IDE kedalam papan Arduino. Informasi tentang tipe IC dapat kita temukan pada permukaan IC tersebut. Jika kita ingin tahu lebih jauh tentang perbedaan jenis IC yang digunakan pada keluarga Arduino maka sebaiknya selalu unduh datasheet dari masing-masing tipe IC.","title":"IC Utama"},{"location":"papan/apa-itu-arduino/#regulator-tegangan","text":"Voltage Regulator (14) bukanlah sesuatu yang mampu berinteraksi dengan papan Arduino. Tetapi kita harus mengetahui fungsi dari voltage regulator. Voltage Regulator atau Regulator Tegangan akan mengalirkan sejumlah tegangan teregulati ke dalam papan Arduino. Voltage Regulator berperan sebagai penjaga pintu gerbang, dia akan membalikan atau membuang tegangan berlebihan yang bisa membahayan rangkaian. Tapi tentu saja ada batasnya, pastikan bahwa tegangan yang masuk ke dalam papan tidak lebih besar dari 20 volt.","title":"Regulator Tegangan"},{"location":"papan/apa-itu-arduino/#keluarga-arduino","text":"Perusahaan Arduino telah membuat beberapa tipe papan yang berbeda-beda, masing-masing tipe tersebut memiliki kemampuan yang berbeda pula. Selain itu, Arduino merupakan Open Source Hardware yang berarti bahwa siapa saja dapat memodifikasi dan menghasilkan turunan Arduino dengan bentuk dan fungsi yang lebih beragam. Jika Anda belum begitu paham mengenai papan Arduino, berikut adalah beberapa pilihan yang cocok untuk mereka yang baru saja ingin berkenalan dengan Arduino.","title":"Keluarga Arduino"},{"location":"papan/apa-itu-arduino/#arduino-uno-r3","text":"Arduino Uno adalah pilihan yang tepat bagi mereka yang baru pertama kali ingin mempelajari Arduino. Karena Uno merupakan paket lengkap untuk memulai belajar Arduino. Memiliki 14 pin input/output digital (dimana 6 pin dapat digunakan sebagai output PWM), 6 pin input analog, koneksi USB, jack daya, tombol reset, dan masih banyak lagi. Ini semua sudah cukup untuk keperluan belajar mikrokontroler. Hanya dengan menghubungkan papan Arduino ke komputer melalui kabel USB, atau menggunakan adaptor AC-DC, atau menggunakan baterai untuk mengaktifkan papan Arduino.","title":"Arduino Uno (R3)"},{"location":"papan/apa-itu-arduino/#arduino-leonardo","text":"Arduino Leonardo adalah tipe papan yang dikembangkan pertama kali oleh Arduino dengan menggunakan satu mikrokontroler dengan fungsi komunikasi USB yang terintegrasi didalamnya. Ini membuat Leonardo lebih sederhana dan lebih murah. Karena Leonardo dapat menanganai komunikasi USB secara langsung, kode perpustakaan yang tersedia pun memungkinkan Leonardo dapat meniru keyboard komputer, mouse dan masih banyak lagi.","title":"Arduino Leonardo"},{"location":"papan/apa-itu-arduino/#arduino-mega","text":"Arduino Mega itu seperti halnya kakak UNO. Memiliki banyak (54) pin digital input/output (14 pin digunakan sebagai output PWM), 16 pin analog, koneksi USB, jack daya, tombol reset, dan masih banyak lagi. Ini merupakan papan lengkap yang diperlukan untuk mendukung pembelajaran mikrokontroler. Jumlah pin yang banyak membuat Arduino Mega digunakan untuk proyek-proyke yang memerlukan banyak input dan ouput digital.","title":"Arduino Mega"},{"location":"papan/apa-itu-arduino/#bagian-pelengkap","text":"Jika anda sudah yakin dengan papan Arduino yang akan digunakan, maka selanjutnya adalah menentukan bagian pelengkap, karena papan Arduino tidak bisa berdiri sendiri tanpa sesuatu terpasang pada papan. Anda bisa menghubungkan sensor atau shield Arduino. Peralatan ini sangat berguna untuk digunakan pada proyek yang akan anda buat.","title":"Bagian Pelengkap"},{"location":"papan/apa-itu-arduino/#sensor","text":"dengan beberapa baris kode sederhana, Arduino dapat mengontrol dan berinteraksi dengan berbagai sensor, misalnya; pengukur intensitas cahaya, suhu, tekanan, akselerasi, kandungan karbon monoksida, aktifitas radioaktif, kelembaban, tekanan udara, dan mungkin suatu sensor yang bisa anda buat dan beri nama sendiri.","title":"Sensor"},{"location":"papan/apa-itu-arduino/#shield","text":"Selain sensor, ada juga yang sebut shield (marilah kita sebut dengan perisai). Pada dasarnya shield adalah papan rangkaian yang tidak belum disempurnakan atau dilengkapi secara keseluruhan dan dibuat dengan pin yang sesuai dengan papan Ardiuno agar mudah saat digunakan atau dihubungkan. Shield memberikan kemampuan tambahan seperti halnya; pengendari motor, menghubungkan dengan internet, komunikasi seluler, komunikasi nirkabel, mengontrol layar LCD dan masih banyak lagi shield dengan berbagai fungsi yang bisa dipilih sesuai dengan proyek yang akan anda buat. Untuk mengetahui lebih jauh tentang shield yang banyak digunakan para pengguna Arduino anda bisa memeriksanya pada situs ShieldList.org .","title":"Shield"},{"location":"papan/apa-itu-arduino/#kesimpulan","text":"Penulis berharap sekarang anda mulai memahami tentang Arduino, keluarga Arduino, dan beberapa informasi tentang Arduino sebagai awalan untuk belajar tentang mikrokontroler. Ada ribuan sensor dan shield yang bisa anda manfaatkan untuk membantu proyek anda ke tingkat selanjutnya. Selamat belajar...","title":"Kesimpulan"},{"location":"papan/apa-itu-arduino/#referensi","text":"Learn the basics Arduino Tutorials Beginner Arduino Learn Electronics and Microcontrollers Physical Computing The Complete Arduino Guide For Beginners The Absolute Beginner's Guide to Arduino","title":"Referensi"},{"location":"papan/mengenal-arduino-leonardo/","text":"Mengenal Arduino Leonardo Arduino Leonardo adalah papan mikrokontroler berbasis ATmega32u4 (datasheet ATmega32U4) . Arduino Leonardo memiliki 20 digital pin input/output (yang mana 7 pin dapat digunakan sebagai output PWM dan 12 pin sebagai input analog), 16 MHz kristal osilator, koneksi micro USB, jack power suplai tegangan, header ICSP, dan tombol reset. Ini semua yang diperlukan untuk mendukung mikrokontroler. Cukup dengan menghubungkannya ke komputer melalui kabel USB atau power dihubungkan dengan adaptor AC-DC atau baterai untuk mulai mengaktifkannya. Leonardo berbeda dari semua papan Arduino yang lainnya karena ATmega32u4 secara terintegrasi ( built-in ) telah memiliki komunikasi USB, sehingga tidak lagi membutuhkan prosesor sekunder (tanpa chip ATmega16U2 sebagai konverter USB-to-serial). Hal ini memungkinkan Arduino Leonardo yang terhubung ke komputer digunakan sebagai mouse dan keyboard, selain bisa digunakan sebagai virtual (CDC) serial/COM port. Spesifikasi Dibawah ini spesifikasi sederhana dari Arduino Leonardo: Info Spesifikasi Mikrokontroler ATmega32u4 Tegangan Operasi 5V Input Voltage (disarankan) 7-12V Input Voltage (limit) 6-20V Digital I/O Pins 20 pin Channel PWM 7 pin Input Analog 12 pin Arus DC per pin I/O 40 mA Arus DC untuk pin 3.3V 50 mA Flash Memory 32 KB (ATmega32u4) 4 KB digunakan bootloader SRAM 2.5 KB (ATmega32u4) EEPROM 1 KB (ATmega32u4) Clock Speed 16 MHz Skema Referensi Desain Dibawah ini file skema dan desain PCB untuk Arduino Leonardo: Skema Arduino Leonardo (EagleCAD): Arduino-leonardo-referensi-design.zip Skema Arduino Leonardo (PDF): Arduino-leonardo-skema-rev3b.pdf Untuk membuka file EagleCAD disarankan menggunakan EagleCAD versi 6.0 keatas Sumber Daya (Tegangan) Arduino Leonardo dapat diaktifkan melalui koneksi USB mikro atau dengan catu daya eksternal. Sumber daya dipilih secara otomatis. Sumber daya Eksternal (non-USB) dapat berasal baik dari adaptor AC-DC atau baterai. Adaptor dapat dihubungkan dengan mencolokkan steker 2.1 mm denan pusat-positif ke jack power pada papan. Sumber tegangan dari baterai dapat dihubungkan ke header pin Gnd dan Vin pin sebagai konektor sumber daya tegangan papan. Papan Arduino Leonardo dapat beroperasi dengan pasokan daya eksternal 6 Volt sampai 20 volt. Jika diberi tegangan kurang dari 7 Volt, maka, pin 5 Volt mungkin akan menghasilkan tegangan kurang dari 5 Volt dan ini akan membuat papan menjadi tidak stabil. Jika sumber tegangan menggunakan lebih dari 12 Volt, regulator tegangan akan mengalami panas berlebihan dan bisa merusak papan. Rentang sumber tegangan yang dianjurkan adalah 7 Volt sampai 12 Volt. Pin tegangan yang tersedia pada papan Arduino Leonardo adalah sebagai berikut: VIN : Adalah input tegangan untuk papan Arduino ketika menggunakan sumber daya eksternal (sebagai 'saingan' tegangan 5 Volt dari koneksi USB atau sumber daya ter-regulator lainnya). Anda dapat memberikan tegangan melalui pin ini, atau jika memasok tegangan untuk papan melalui jack power, kita bisa mengakses/mengambil tegangan melalui pin ini. 5V : Tegangan listrik ter-regulator yang digunakan untuk daya mikrokontroler dan komponen lainnya pada papan Arduino. Tegangan dapat menggunakan pin VIN melalui regulator on-board, atau dipasok oleh USB atau power suplai lain dengan besar tegangan 5V ter-regulator. 3V3 : Sebuah pin yang menghasilkan tegangan 3,3 Volt. Tegangan ini dihasilkan oleh regulator yang terdapat pada papan (on-board). Arus maksimum yang dihasilkan adalah 50 mA. GND : Pin Ground atau Massa. IOREF : Pin ini pada papan Arduino berfungsi untuk memberikan referensi tegangan yang beroperasi pada mikrokontroler (atau VCC untuk papan). Pin ini bertegangan 5V pada Leonardo. Memori ATmega32u4 memiliki memori sebesar 32 KB (4 KB digunakan untuk bootloader). Juga memiliki 2,5 KB SRAM dan 1 KB EEPROM (yang dapat dibaca dan ditulis dengan perpustakaan EEPROM). Input dan Output 20 pin digital I/O pada Leonardo dapat digunakan sebagai input atau output, menggunakan fungsi pinMode() , digitalWrite() , dan digitalRead( . Mereka beroperasi pada tegangan 5 volt. Setiap pin dapat memberikan atau menerima maksimum 40 mA dan memiliki resistor pull-up internal sebesar 20-50 kOhm yang terputus secara default. Selain itu, beberapa pin memiliki fungsi khusus, yaitu: Serial : Pin 0 (RX) dan pin 1 (TX). Digunakan untuk menerima (RX) dan mengirimkan (TX) data serial TTL menggunakan hardware ATmega32U4 yang memiliki kemampuan serial didalamnya. Perhatikan bahwa pada Leonardo, kelas Serial mengacu pada komunikasi USB (CDC); untuk TTL serial pada pin 0 dan 1, menggunakan kelas Serial 1. TWI : Pin 2 (SDA) dan pin 3 (SCL). Dukungan komunikasi TWI menggunakan perpustakaan Wire. Eksternal Interupsi : Pin 3 (interrupt 0), pin 2 (interrupt 1), pin 0 (interrupt 2), pin 1 (interrupt 3) dan pin 7 (interrupt 4). Pin ini dapat dikonfigurasi untuk memicu sebuah interupsi pada nilai yang rendah, meningkat atau menurun, atau merubah nilai. PWM : Pin 3, 5, 6, 9, 10, 11, dan 13. Menyediakan 8-bit output PWM dengan fungsi analogWrite() . SPI : Pin pada header ICSP ini mendukung komunikasi SPI menggunakan perpustakaan SPI. Perhatikan bahwa pin SPI tidak terhubung ke salah satu pun pin digital I/O karena yang terhubung langsung hanya pada Arduino Uno, Mereka hanya menyediakan konektor ICSP. Ini berarti bahwa jika Anda memiliki shield yang menggunakan SPI, tetapi tidak terdapat 6 pin konektor ICSP yang terhubung ke 6 pin ICSP header Leonardo, maka shield tidak akan bekerja. LED : Pin 13. Tersedia secara built-in pada papan Arduino ATmega2560. LED terhubung ke pin digital 13. Ketika pin diset bernilai HIGH, maka LED menyala (ON), dan ketika pin diset bernilai LOW, maka LED padam (OFF). Input Analog : Pin A0-A5, Pin A6 - A11 (pada pin digital 4, 6, 8, 9, 10, dan 12). Leonardo memiliki 12 input analog, berlabel A0 sampai A11, yang semuanya juga dapat digunakan sebagai digital I/O. Pin A0-A5 terdapat di lokasi yang sama seperti pada Arduino Uno; Pin input A6-A11 masing-masing ada pada digital I/O pin 4, 6, 8, 9, 10, dan 12. Masing-masing pin menyediakan resolusi 10 bit (yaitu 1024 nilai yang berbeda). Secara default pin ini dapat diukur/diatur dari mulai Ground sampai dengan 5 Volt, juga memungkinkan untuk mengubah titik jangkauan tertinggi atau terendah mereka menggunakan pin AREF dan fungsi analogReference() . Masih ada beberapa pin lainnya pada Arduino Leonardo, yaitu: AREF : Referensi tegangan untuk input analog. Digunakan dengan fungsi analogReference() . RESET : Jalur LOW ini digunakan untuk me-reset (menghidupkan ulang) mikrokontroler. Jalur ini biasanya digunakan untuk menambahkan tombol reset pada shield yang menghalangi papan utama Arduino. Gambar 1. Arduino Leonardo dari Atas Pemetaaan Dibawah ini pemetaan Pin ATmega32U4 dan Pin Arduino Leonardo: Gambar 2. Pemetaan Pin ATmega32U4 Pin Number Pin Name Mapped Pin Name 1 PE6 (INT.6/AIN0) Digital pin 7 2 UVcc +5V 3 D- RD- 4 D+ RD+ 5 UGnd UGND 6 UCap UCAP 7 VUSB VBus 8 (SS/PCINT0) PB0 RXLED 9 (PCINT1/SCLK) PB1 SCK 10 (PDI/PCINT2/MOSI) PB2 MOSI 11 (PDO/PCINT3/MISO) PB3 MISO 12 (PCINT7/OCA0/OC1C/#RTS) PB7 Digital pin 11 (PWM) 13 RESET RESET 14 Vcc +5V 15 GND GND 16 XTAL2 XTAL2 17 XTAL1 XTAL1 18 (OC0B/SCL/INT0) PD0 Digital pin 3 (SCL)(PWM) 19 (SDA/INT1) PD1 Digital pin 2 (SDA) 20 (RX D1/AIN1/INT2) PD2 Digital pin 0 (RX) 21 (TXD1/INT3) PD3 Digital pin 1 (TX) 22 (XCK1/#CTS) PD5 TXLED 23 GND1 GND 24 AVCC AVCC 25 (ICP1/ADC8) PD4 Digital pin 4 26 (T1/#OC4D/ADC9) PD6 Digital pin 12 27 (T0/OC4D/ADC10) PD7 Digital Pin 6 (PWM) 28 (ADC11/PCINT4) PB4 Digital pin 8 29 (PCINT5/OC1A/#OC4B/ADC12) PB5 Digital Pin 9 (PWM) 30 (PCINT6/OC1B/OC4B/ADC13) PB6 Digital Pin 10 (PWM) 31 (OC3A/#0C4A) PC6 Digital Pin 5 (PWM) 32 (ICP3/CLK0/)C4A) PC7 Digital Pin 13 (PWM) 33 (#HWB) PE2 HWB 34 Vcc1 +5V 35 GND2 GND 36 (ADC7/TDI) PF7 Analog In 0 37 (ADC6/TDO) PF6 Analog In 1 38 (ADC5/TMS) PF5 Analog In 2 39 (ADC4/TCK) PF4 Analog In 3 40 (ADC1) PF1 Analog In 4 41 (ADC0) PF0 Analog In 5 42 AREF AEF 43 GND3 GND 44 AVCC1 AVCC Komunikasi Leonardo memiliki sejumlah fasilitas untuk berkomunikasi dengan komputer, dengan Arduino lain, atau dengan mikrokontroler lainnya. ATmega32U4 mampu menyediakan komunikasi serial UART TTL (5V), yang tersedia pada pin digital 0 (RX) dan 1 (TX). ATmega32U4 juga memungkinkan untuk komunikasi serial (CDC) melalui USB dan muncul sebagai com port virtual pada perangkat lunak komputer. Chip ini juga bertindak sebagai perangkat USB 2.0 dengan kecepatan tinggi, serta menggunakan standar driver USB COM, tetapi ntuk sistem operasi Windows masih tetap memerlukan file inf. Perangkat lunak Arduino termasuk didalamnya serial monitor memungkinkan data tekstual sederhana dikirim ke dan dari papan Arduino. LED RX dan TX yang tersedia pada papan akan berkedip ketika data sedang dikirim atau diterima melalui chip USB-to-serial yang terhubung melalui USB komputer (tetapi tidak untuk komunikasi serial seperti pada pin 0 dan 1). Sebuah perpustakaan SoftwareSerial memungkinkan komunikasi serial pada beberapa pin digital Leonardo. ATmega32U4 juga mendukung komunikasi I2C (TWI) dan SPI. Perangkat lunak Arduino termasuk perpustakaan Wire digunakan untuk menyederhanakan penggunaan bus I2C. Untuk komunikasi SPI, menggunakan perpustakaan SPI. Leonardo muncul pada komputer sebagai keyboard dan mouse generik, dan dapat diprogram untuk mengontrol perangkat input menggunakan kelas/kelompok Keyboard dan Mouse. Pemrograman Arduino Mega dapat diprogram dengan software Arduino (Unduh perangkat lunak Arduino) . (Mengenai pemahasan lebih rinci tentang perangkat lunak Arduino akan dibahas pada artikel terpisah). ATmega32U4 pada Arduino Leonardo sudah tersedia preburned dengan bootloader ( preburned dan bootloader apa bahasa Indonesianya?) yang memungkinkan Anda untuk meng-upload kode baru tanpa menggunakan programmer hardware eksternal. Hal ini karena komunikasi yang terjadi menggunakan protokol AVR109. Anda juga dapat melewati ( bypass ) bootloader dan program mikrokontroler melalui pin header ICSP ( In-Circuit Serial Programming ). Reset (Software) Otomatis dan Inisiasi Bootloader Daripada menekan tombol reset sebelum upload, Arduino Leonardo didesain dengan cara yang memungkinkan Anda untuk me-reset melalui perangkat lunak yang berjalan pada komputer yang terhubung. Reset dipicu ketika virtual (CDC) port serial/COM Leonardo dibuka pada 1200 baud dan kemudian ditutup. Ketika ini terjadi, prosesor akan mengatur ular (reset), memutuskan hubungan koneksi USB ke komputer (virtual port serial/COM akan hilang dari komputer). Setelah prosesor melakukan reset, bootlader akan dimuat, yang akan segera aktif dalam waktu sekitar 8 detik. Bootloader juga dapat dimuat dengan menekan tombol Reset pada Leonardo. Perhatikan bahwa ketika pertama kali papan diaktifkan, ia akan melompat langsung ke sketch, jika tersedia, dari pada harus memuat bootloader. Karena itu metode yang terbaik untuk melakukan reset pada Leonardo adalah dengan membiarkan software arduino melakukan reset sebelum upload sketch, terutama bagi mereka yang terbiasa menekan tombol reset sebelum melakukan upload. Jika software Arduino tidak dapat melakukan reset terhadap papan, kita bisa memulai bootloader dengan menekan tombol reset yang tersedia pada papan. Perlindungan Beban Berlebih pada USB Arduino Leonardo memiliki polyfuse reset yang melindungi port USB komputer Anda dari hubungan singkat dan arus lebih. Meskipun pada dasarnya komputer telah memiliki perlindungan internal pada port USB mereka sendiri, sekring memberikan lapisan perlindungan tambahan. Jika arus lebih dari 500 mA dihubungkan ke port USB, sekring secara otomatis akan memutuskan sambungan sampai hubungan singkat atau overload dihapus/dibuang. Karakteristik Fisik Maksimum panjang dan lebar PCB Arduino Leonardo sama dengan Arduino Uno yaitu 2.7 x 2.1 inch (6,8 x 5,3 cm), dengan konektor USB dan jack power menonjol melampaui batas dimensi. Empat lubang sekrup memungkinkan papan terpasang pada suatu permukaan atau wadah. Perhatikan bahwa jarak antara pin digital 7 dan 8 adalah 160 mil (0.16 inch), tidak seperti pin lainnya dengan kelipatan genap berjarak 100 mil.","title":"Mengenal Arduino Leonardo"},{"location":"papan/mengenal-arduino-leonardo/#mengenal-arduino-leonardo","text":"Arduino Leonardo adalah papan mikrokontroler berbasis ATmega32u4 (datasheet ATmega32U4) . Arduino Leonardo memiliki 20 digital pin input/output (yang mana 7 pin dapat digunakan sebagai output PWM dan 12 pin sebagai input analog), 16 MHz kristal osilator, koneksi micro USB, jack power suplai tegangan, header ICSP, dan tombol reset. Ini semua yang diperlukan untuk mendukung mikrokontroler. Cukup dengan menghubungkannya ke komputer melalui kabel USB atau power dihubungkan dengan adaptor AC-DC atau baterai untuk mulai mengaktifkannya. Leonardo berbeda dari semua papan Arduino yang lainnya karena ATmega32u4 secara terintegrasi ( built-in ) telah memiliki komunikasi USB, sehingga tidak lagi membutuhkan prosesor sekunder (tanpa chip ATmega16U2 sebagai konverter USB-to-serial). Hal ini memungkinkan Arduino Leonardo yang terhubung ke komputer digunakan sebagai mouse dan keyboard, selain bisa digunakan sebagai virtual (CDC) serial/COM port.","title":"Mengenal Arduino Leonardo"},{"location":"papan/mengenal-arduino-leonardo/#spesifikasi","text":"Dibawah ini spesifikasi sederhana dari Arduino Leonardo: Info Spesifikasi Mikrokontroler ATmega32u4 Tegangan Operasi 5V Input Voltage (disarankan) 7-12V Input Voltage (limit) 6-20V Digital I/O Pins 20 pin Channel PWM 7 pin Input Analog 12 pin Arus DC per pin I/O 40 mA Arus DC untuk pin 3.3V 50 mA Flash Memory 32 KB (ATmega32u4) 4 KB digunakan bootloader SRAM 2.5 KB (ATmega32u4) EEPROM 1 KB (ATmega32u4) Clock Speed 16 MHz","title":"Spesifikasi"},{"location":"papan/mengenal-arduino-leonardo/#skema-referensi-desain","text":"Dibawah ini file skema dan desain PCB untuk Arduino Leonardo: Skema Arduino Leonardo (EagleCAD): Arduino-leonardo-referensi-design.zip Skema Arduino Leonardo (PDF): Arduino-leonardo-skema-rev3b.pdf Untuk membuka file EagleCAD disarankan menggunakan EagleCAD versi 6.0 keatas","title":"Skema &amp; Referensi Desain"},{"location":"papan/mengenal-arduino-leonardo/#sumber-daya-tegangan","text":"Arduino Leonardo dapat diaktifkan melalui koneksi USB mikro atau dengan catu daya eksternal. Sumber daya dipilih secara otomatis. Sumber daya Eksternal (non-USB) dapat berasal baik dari adaptor AC-DC atau baterai. Adaptor dapat dihubungkan dengan mencolokkan steker 2.1 mm denan pusat-positif ke jack power pada papan. Sumber tegangan dari baterai dapat dihubungkan ke header pin Gnd dan Vin pin sebagai konektor sumber daya tegangan papan. Papan Arduino Leonardo dapat beroperasi dengan pasokan daya eksternal 6 Volt sampai 20 volt. Jika diberi tegangan kurang dari 7 Volt, maka, pin 5 Volt mungkin akan menghasilkan tegangan kurang dari 5 Volt dan ini akan membuat papan menjadi tidak stabil. Jika sumber tegangan menggunakan lebih dari 12 Volt, regulator tegangan akan mengalami panas berlebihan dan bisa merusak papan. Rentang sumber tegangan yang dianjurkan adalah 7 Volt sampai 12 Volt. Pin tegangan yang tersedia pada papan Arduino Leonardo adalah sebagai berikut: VIN : Adalah input tegangan untuk papan Arduino ketika menggunakan sumber daya eksternal (sebagai 'saingan' tegangan 5 Volt dari koneksi USB atau sumber daya ter-regulator lainnya). Anda dapat memberikan tegangan melalui pin ini, atau jika memasok tegangan untuk papan melalui jack power, kita bisa mengakses/mengambil tegangan melalui pin ini. 5V : Tegangan listrik ter-regulator yang digunakan untuk daya mikrokontroler dan komponen lainnya pada papan Arduino. Tegangan dapat menggunakan pin VIN melalui regulator on-board, atau dipasok oleh USB atau power suplai lain dengan besar tegangan 5V ter-regulator. 3V3 : Sebuah pin yang menghasilkan tegangan 3,3 Volt. Tegangan ini dihasilkan oleh regulator yang terdapat pada papan (on-board). Arus maksimum yang dihasilkan adalah 50 mA. GND : Pin Ground atau Massa. IOREF : Pin ini pada papan Arduino berfungsi untuk memberikan referensi tegangan yang beroperasi pada mikrokontroler (atau VCC untuk papan). Pin ini bertegangan 5V pada Leonardo.","title":"Sumber Daya (Tegangan)"},{"location":"papan/mengenal-arduino-leonardo/#memori","text":"ATmega32u4 memiliki memori sebesar 32 KB (4 KB digunakan untuk bootloader). Juga memiliki 2,5 KB SRAM dan 1 KB EEPROM (yang dapat dibaca dan ditulis dengan perpustakaan EEPROM).","title":"Memori"},{"location":"papan/mengenal-arduino-leonardo/#input-dan-output","text":"20 pin digital I/O pada Leonardo dapat digunakan sebagai input atau output, menggunakan fungsi pinMode() , digitalWrite() , dan digitalRead( . Mereka beroperasi pada tegangan 5 volt. Setiap pin dapat memberikan atau menerima maksimum 40 mA dan memiliki resistor pull-up internal sebesar 20-50 kOhm yang terputus secara default. Selain itu, beberapa pin memiliki fungsi khusus, yaitu: Serial : Pin 0 (RX) dan pin 1 (TX). Digunakan untuk menerima (RX) dan mengirimkan (TX) data serial TTL menggunakan hardware ATmega32U4 yang memiliki kemampuan serial didalamnya. Perhatikan bahwa pada Leonardo, kelas Serial mengacu pada komunikasi USB (CDC); untuk TTL serial pada pin 0 dan 1, menggunakan kelas Serial 1. TWI : Pin 2 (SDA) dan pin 3 (SCL). Dukungan komunikasi TWI menggunakan perpustakaan Wire. Eksternal Interupsi : Pin 3 (interrupt 0), pin 2 (interrupt 1), pin 0 (interrupt 2), pin 1 (interrupt 3) dan pin 7 (interrupt 4). Pin ini dapat dikonfigurasi untuk memicu sebuah interupsi pada nilai yang rendah, meningkat atau menurun, atau merubah nilai. PWM : Pin 3, 5, 6, 9, 10, 11, dan 13. Menyediakan 8-bit output PWM dengan fungsi analogWrite() . SPI : Pin pada header ICSP ini mendukung komunikasi SPI menggunakan perpustakaan SPI. Perhatikan bahwa pin SPI tidak terhubung ke salah satu pun pin digital I/O karena yang terhubung langsung hanya pada Arduino Uno, Mereka hanya menyediakan konektor ICSP. Ini berarti bahwa jika Anda memiliki shield yang menggunakan SPI, tetapi tidak terdapat 6 pin konektor ICSP yang terhubung ke 6 pin ICSP header Leonardo, maka shield tidak akan bekerja. LED : Pin 13. Tersedia secara built-in pada papan Arduino ATmega2560. LED terhubung ke pin digital 13. Ketika pin diset bernilai HIGH, maka LED menyala (ON), dan ketika pin diset bernilai LOW, maka LED padam (OFF). Input Analog : Pin A0-A5, Pin A6 - A11 (pada pin digital 4, 6, 8, 9, 10, dan 12). Leonardo memiliki 12 input analog, berlabel A0 sampai A11, yang semuanya juga dapat digunakan sebagai digital I/O. Pin A0-A5 terdapat di lokasi yang sama seperti pada Arduino Uno; Pin input A6-A11 masing-masing ada pada digital I/O pin 4, 6, 8, 9, 10, dan 12. Masing-masing pin menyediakan resolusi 10 bit (yaitu 1024 nilai yang berbeda). Secara default pin ini dapat diukur/diatur dari mulai Ground sampai dengan 5 Volt, juga memungkinkan untuk mengubah titik jangkauan tertinggi atau terendah mereka menggunakan pin AREF dan fungsi analogReference() . Masih ada beberapa pin lainnya pada Arduino Leonardo, yaitu: AREF : Referensi tegangan untuk input analog. Digunakan dengan fungsi analogReference() . RESET : Jalur LOW ini digunakan untuk me-reset (menghidupkan ulang) mikrokontroler. Jalur ini biasanya digunakan untuk menambahkan tombol reset pada shield yang menghalangi papan utama Arduino. Gambar 1. Arduino Leonardo dari Atas","title":"Input dan Output"},{"location":"papan/mengenal-arduino-leonardo/#pemetaaan","text":"Dibawah ini pemetaan Pin ATmega32U4 dan Pin Arduino Leonardo: Gambar 2. Pemetaan Pin ATmega32U4 Pin Number Pin Name Mapped Pin Name 1 PE6 (INT.6/AIN0) Digital pin 7 2 UVcc +5V 3 D- RD- 4 D+ RD+ 5 UGnd UGND 6 UCap UCAP 7 VUSB VBus 8 (SS/PCINT0) PB0 RXLED 9 (PCINT1/SCLK) PB1 SCK 10 (PDI/PCINT2/MOSI) PB2 MOSI 11 (PDO/PCINT3/MISO) PB3 MISO 12 (PCINT7/OCA0/OC1C/#RTS) PB7 Digital pin 11 (PWM) 13 RESET RESET 14 Vcc +5V 15 GND GND 16 XTAL2 XTAL2 17 XTAL1 XTAL1 18 (OC0B/SCL/INT0) PD0 Digital pin 3 (SCL)(PWM) 19 (SDA/INT1) PD1 Digital pin 2 (SDA) 20 (RX D1/AIN1/INT2) PD2 Digital pin 0 (RX) 21 (TXD1/INT3) PD3 Digital pin 1 (TX) 22 (XCK1/#CTS) PD5 TXLED 23 GND1 GND 24 AVCC AVCC 25 (ICP1/ADC8) PD4 Digital pin 4 26 (T1/#OC4D/ADC9) PD6 Digital pin 12 27 (T0/OC4D/ADC10) PD7 Digital Pin 6 (PWM) 28 (ADC11/PCINT4) PB4 Digital pin 8 29 (PCINT5/OC1A/#OC4B/ADC12) PB5 Digital Pin 9 (PWM) 30 (PCINT6/OC1B/OC4B/ADC13) PB6 Digital Pin 10 (PWM) 31 (OC3A/#0C4A) PC6 Digital Pin 5 (PWM) 32 (ICP3/CLK0/)C4A) PC7 Digital Pin 13 (PWM) 33 (#HWB) PE2 HWB 34 Vcc1 +5V 35 GND2 GND 36 (ADC7/TDI) PF7 Analog In 0 37 (ADC6/TDO) PF6 Analog In 1 38 (ADC5/TMS) PF5 Analog In 2 39 (ADC4/TCK) PF4 Analog In 3 40 (ADC1) PF1 Analog In 4 41 (ADC0) PF0 Analog In 5 42 AREF AEF 43 GND3 GND 44 AVCC1 AVCC","title":"Pemetaaan"},{"location":"papan/mengenal-arduino-leonardo/#komunikasi","text":"Leonardo memiliki sejumlah fasilitas untuk berkomunikasi dengan komputer, dengan Arduino lain, atau dengan mikrokontroler lainnya. ATmega32U4 mampu menyediakan komunikasi serial UART TTL (5V), yang tersedia pada pin digital 0 (RX) dan 1 (TX). ATmega32U4 juga memungkinkan untuk komunikasi serial (CDC) melalui USB dan muncul sebagai com port virtual pada perangkat lunak komputer. Chip ini juga bertindak sebagai perangkat USB 2.0 dengan kecepatan tinggi, serta menggunakan standar driver USB COM, tetapi ntuk sistem operasi Windows masih tetap memerlukan file inf. Perangkat lunak Arduino termasuk didalamnya serial monitor memungkinkan data tekstual sederhana dikirim ke dan dari papan Arduino. LED RX dan TX yang tersedia pada papan akan berkedip ketika data sedang dikirim atau diterima melalui chip USB-to-serial yang terhubung melalui USB komputer (tetapi tidak untuk komunikasi serial seperti pada pin 0 dan 1). Sebuah perpustakaan SoftwareSerial memungkinkan komunikasi serial pada beberapa pin digital Leonardo. ATmega32U4 juga mendukung komunikasi I2C (TWI) dan SPI. Perangkat lunak Arduino termasuk perpustakaan Wire digunakan untuk menyederhanakan penggunaan bus I2C. Untuk komunikasi SPI, menggunakan perpustakaan SPI. Leonardo muncul pada komputer sebagai keyboard dan mouse generik, dan dapat diprogram untuk mengontrol perangkat input menggunakan kelas/kelompok Keyboard dan Mouse.","title":"Komunikasi"},{"location":"papan/mengenal-arduino-leonardo/#pemrograman","text":"Arduino Mega dapat diprogram dengan software Arduino (Unduh perangkat lunak Arduino) . (Mengenai pemahasan lebih rinci tentang perangkat lunak Arduino akan dibahas pada artikel terpisah). ATmega32U4 pada Arduino Leonardo sudah tersedia preburned dengan bootloader ( preburned dan bootloader apa bahasa Indonesianya?) yang memungkinkan Anda untuk meng-upload kode baru tanpa menggunakan programmer hardware eksternal. Hal ini karena komunikasi yang terjadi menggunakan protokol AVR109. Anda juga dapat melewati ( bypass ) bootloader dan program mikrokontroler melalui pin header ICSP ( In-Circuit Serial Programming ).","title":"Pemrograman"},{"location":"papan/mengenal-arduino-leonardo/#reset-software-otomatis-dan-inisiasi-bootloader","text":"Daripada menekan tombol reset sebelum upload, Arduino Leonardo didesain dengan cara yang memungkinkan Anda untuk me-reset melalui perangkat lunak yang berjalan pada komputer yang terhubung. Reset dipicu ketika virtual (CDC) port serial/COM Leonardo dibuka pada 1200 baud dan kemudian ditutup. Ketika ini terjadi, prosesor akan mengatur ular (reset), memutuskan hubungan koneksi USB ke komputer (virtual port serial/COM akan hilang dari komputer). Setelah prosesor melakukan reset, bootlader akan dimuat, yang akan segera aktif dalam waktu sekitar 8 detik. Bootloader juga dapat dimuat dengan menekan tombol Reset pada Leonardo. Perhatikan bahwa ketika pertama kali papan diaktifkan, ia akan melompat langsung ke sketch, jika tersedia, dari pada harus memuat bootloader. Karena itu metode yang terbaik untuk melakukan reset pada Leonardo adalah dengan membiarkan software arduino melakukan reset sebelum upload sketch, terutama bagi mereka yang terbiasa menekan tombol reset sebelum melakukan upload. Jika software Arduino tidak dapat melakukan reset terhadap papan, kita bisa memulai bootloader dengan menekan tombol reset yang tersedia pada papan.","title":"Reset (Software) Otomatis dan Inisiasi Bootloader"},{"location":"papan/mengenal-arduino-leonardo/#perlindungan-beban-berlebih-pada-usb","text":"Arduino Leonardo memiliki polyfuse reset yang melindungi port USB komputer Anda dari hubungan singkat dan arus lebih. Meskipun pada dasarnya komputer telah memiliki perlindungan internal pada port USB mereka sendiri, sekring memberikan lapisan perlindungan tambahan. Jika arus lebih dari 500 mA dihubungkan ke port USB, sekring secara otomatis akan memutuskan sambungan sampai hubungan singkat atau overload dihapus/dibuang.","title":"Perlindungan Beban Berlebih pada USB"},{"location":"papan/mengenal-arduino-leonardo/#karakteristik-fisik","text":"Maksimum panjang dan lebar PCB Arduino Leonardo sama dengan Arduino Uno yaitu 2.7 x 2.1 inch (6,8 x 5,3 cm), dengan konektor USB dan jack power menonjol melampaui batas dimensi. Empat lubang sekrup memungkinkan papan terpasang pada suatu permukaan atau wadah. Perhatikan bahwa jarak antara pin digital 7 dan 8 adalah 160 mil (0.16 inch), tidak seperti pin lainnya dengan kelipatan genap berjarak 100 mil.","title":"Karakteristik Fisik"},{"location":"papan/mengenal-arduino-mega2560/","text":"Mengenal Arduino Mega2560 Arduino Mega2560 adalah papan mikrokontroler berbasiskan ATmega2560 ( datasheet ATmega2560 ). Arduino Mega2560 memiliki 54 pin digital input/output, dimana 15 pin dapat digunakan sebagai output PWM, 16 pin sebagai input analog, dan 4 pin sebagai UART (port serial hardware), 16 MHz kristal osilator, koneksi USB, jack power, header ICSP, dan tombol reset. Ini semua yang diperlukan untuk mendukung mikrokontroler. Cukup dengan menghubungkannya ke komputer melalui kabel USB atau power dihubungkan dengan adaptor AC-DC atau baterai untuk mulai mengaktifkannya. Arduino Mega2560 kompatibel dengan sebagian besar shield yang dirancang untuk Arduino Duemilanove atau Arduino Diecimila. Arduino Mega2560 adalah versi terbaru yang menggantikan versi Arduino Mega. Arduino Mega2560 berbeda dari papan sebelumnya, karena versi terbaru sudah tidak menggunakan chip driver FTDI USB-to-serial. Tapi, menggunakan chip ATmega16U2 (ATmega8U2 pada papan Revisi 1 dan Revisi 2) yang diprogram sebagai konverter USB-to-serial. Arduino Mega2560 Revisi 2 memiliki resistor pull-down HWB 8U2 ke Ground, sehingga lebih mudah untuk dimasukkan ke dalam mode DFU. Arduino Mega2560 Revisi 3 memiliki fitur-fitur baru berikut: * 1.0 pinout : Ditambahkan pin SDA dan pin SCL yang dekat dengan pin AREF dan dua pin baru lainnya ditempatkan dekat dengan pin RESET, IOREF memungkinkan shield untuk beradaptasi dengan tegangan yang tersedia pada papan. Di masa depan, shield akan kompatibel baik dengan papan yang menggunakan AVR yang beroperasi dengan 5 Volt dan dengan Arduino Due yang beroperasi dengan tegangan 3.3 Volt. Dan ada dua pin yang tidak terhubung, yang disediakan untuk tujuan masa depan. * Sirkuit RESET. * Chip ATmega16U2 menggantikan chip ATmega8U2. Skema Referensi Desain Dibawah ini Skema dan Referensi Arduino Mega2560: Skema Arduino Mega2560 EagleCAD : Arduino-mega2560_R3-referensi-design.zip Skema Arduino Mega2560 PDF : Arduino-mega2560_R3-schematic.pdf Pemetaan Pin Dibawah ini pemetaan pin ATmega2560 dengan Arduino Mega2560: Nomor Pin Nama Pin Peta Nama Pin 1 PG5 (OC0B) Digital pin 4 (PWM) 2 PE0 (RXD0/PCINT8) Digital pin 0 (RX0) 3 PE1 (TXD0) Digital pin 1 (TX0) 4 PE2 (XCK0/AIN0) - 5 PE3 (OC3A/AIN1) Digital pin 5 (PWM) 6 PE4 (OC3B/INT4) Digital pin 2 (PWM) 7 PE5 (OC3C/INT5) Digital pin 3 (PWM) 8 PE6 (T3/INT6) - 9 PE7 (CLKO/ICP3/INT7) - 10 VCC VCC 11 GND GND 12 PH0 (RXD2) Digital pin 17 (RX2) 13 PH1 (TXD2) Digital pin 16 (TX2) 14 PH2 (XCK2) - 15 PH3 (OC4A) Digital pin 6 (PWM) 16 PH4 (OC4B) Digital pin 7 (PWM) 17 PH5 (OC4C) Digital pin 8 (PWM) 18 PH6 (OC2B) Digital pin 9 (PWM) 19 PB0 (SS/PCINT0) Digital pin 53 (SS) 20 PB1 (SCK/PCINT1) Digital pin 52 (SCK) 21 PB2 (MOSI/PCINT2) Digital pin 51 (MOSI) 22 PB3 (MISO/PCINT3) Digital pin 50 (MISO) 23 PB4 (OC2A/PCINT4) Digital pin 10 (PWM) 24 PB5 (OC1A/PCINT5) Digital pin 11 (PWM) 25 PB6 (OC1B/PCINT6) Digital pin 12 (PWM) 26 PB7 (OC0A/OC1C/PCINT7) Digital pin 13 (PWM) 27 PH7 (T4 ) - 28 PG3 (TOSC2) - 29 PG4 (TOSC1) - 30 RESET RESET 31 VCC VCC 32 GND GND 33 XTAL2 XTAL2 34 XTAL1 XTAL1 35 PL0 (ICP4) Digital pin 49 36 PL1 (ICP5) Digital pin 48 37 PL2 (T5 ) Digital pin 47 38 PL3 (OC5A) Digital pin 46 (PWM) 39 PL4 (OC5B) Digital pin 45 (PWM) 40 PL5 (OC5C) Digital pin 44 (PWM) 41 PL6 Digital pin 43 42 PL7 Digital pin 42 43 PD0 (SCL/INT0) Digital pin 21 (SCL) 44 PD1 (SDA/INT1) Digital pin 20 (SDA) 45 PD2 (RXDI/INT2) Digital pin 19 (RX1) 46 PD3 (TXD1/INT3) Digital pin 18 (TX1) 47 PD4 (ICP1) - 48 PD5 (XCK1) - 49 PD6 (T1) - 50 PD7 (T0) Digital pin 38 51 PG0 (WR) Digital pin 41 52 PG1 (RD) Digital pin 40 53 PC0 (A8) Digital pin 37 54 PC1 (A9) Digital pin 36 55 PC2 (A10) Digital pin 35 56 PC3 (A11) Digital pin 34 57 PC4 (A12) Digital pin 33 58 PC5 (A13) Digital pin 32 59 PC6 (A14) Digital pin 31 60 PC7 (A15) Digital pin 30 61 VCC VCC 62 GND GND 63 PJ0 (RXD3/PCINT9) Digital pin 15 (RX3) 64 PJ1 (TXD3/PCINT10) Digital pin 14 (TX3) 65 PJ2 (XCK3/PCINT11) - 66 PJ3 (PCINT12) - 67 PJ4 (PCINT13) - 68 PJ5 (PCINT14) - 69 PJ6 (PCINT 15) - 70 PG2 (ALE) Digital pin 39 71 PA7 (AD7) Digital pin 29 72 PA6 (AD6) Digital pin 28 73 PA5 (AD5) Digital pin 27 74 PA4 (AD4) Digital pin 26 75 PA3 (AD3) Digital pin 25 76 PA2 (AD2) Digital pin 24 77 PA1 (AD1) Digital pin 23 78 PA0 (AD0) Digital pin 22 79 PJ7 - 80 VCC VCC 81 GND GND 82 PK7 (ADC15/PCINT23) Analog pin 15 83 PK6 (ADC14/PCINT22) Analog pin 14 84 PK5 (ADC13/PCINT21) Analog pin 13 85 PK4 (ADC12/PCINT20) Analog pin 12 86 PK3 (ADC11/PCINT19) Analog pin 11 87 PK2 (ADC10/PCINT18) Analog pin 10 88 PK1 (ADC9/PCINT17) Analog pin 9 89 PK0 (ADC8/PCINT16) Analog pin 8 90 PF7 (ADC7) Analog pin 7 91 PF6 (ADC6) Analog pin 6 92 PF5 (ADC5/TMS) Analog pin 5 93 PF4 (ADC4/TMK) Analog pin 4 94 PF3 (ADC3) Analog pin 3 95 PF2 (ADC2) Analog pin 2 96 PF1 (ADC1) Analog pin 1 97 PF0 (ADC0) Analog pin 0 98 AREF Analog Reference 99 GND GND 100 AVCC VCC Ringkasan Spesifikasi Dibawah ini spesifikasi sederhana dari Arduino Mega2560: Informasi Spesifikasi Mikrokontroler ATmega2560 Tegangan Operasi 5V Input Voltage (disarankan) 7-12V Input Voltage (limit) 6-20V Pin Digital I/O 54 (yang 15 pin digunakan sebagai output PWM) Pins Input Analog 16 Arus DC per pin I/O 40 mA Arus DC untuk pin 3.3V 50 mA Flash Memory 256 KB (8 KB digunakan untuk bootloader) SRAM 8 KB EEPROM 4 KB Clock Speed 16 MHz Sumber Daya Arduino Mega dapat diaktifkan melalui koneksi USB atau dengan catu daya eksternal. Sumber daya dipilih secara otomatis. Sumber daya eksternal (non-USB) dapat berasal baik dari adaptor AC-DC atau baterai. Adaptor dapat dihubungkan dengan mencolokkan steker 2,1 mm yang bagian tengahnya terminal positif ke ke jack sumber tegangan pada papan. Jika tegangan berasal dari baterai dapat langsung dihubungkan melalui header pin Gnd dan pin Vin dari konektor POWER. Papan Arduino ATmega2560 dapat beroperasi dengan pasokan daya eksternal 6 Volt sampai 20 volt. Jika diberi tegangan kurang dari 7 Volt, maka, pin 5 Volt mungkin akan menghasilkan tegangan kurang dari 5 Volt dan ini akan membuat papan menjadi tidak stabil. Jika sumber tegangan menggunakan lebih dari 12 Volt, regulator tegangan akan mengalami panas berlebihan dan bisa merusak papan. Rentang sumber tegangan yang dianjurkan adalah 7 Volt sampai 12 Volt. Pin tegangan yang tersedia pada papan Arduino adalah sebagai berikut: VIN : Adalah input tegangan untuk papan Arduino ketika menggunakan sumber daya eksternal (sebagai 'saingan' tegangan 5 Volt dari koneksi USB atau sumber daya ter-regulator lainnya). Anda dapat memberikan tegangan melalui pin ini, atau jika memasok tegangan untuk papan melalui jack power, kita bisa mengakses/mengambil tegangan melalui pin ini. 5V : Sebuah pin yang mengeluarkan tegangan ter-regulator 5 Volt, dari pin ini tegangan sudah diatur (ter-regulator) dari regulator yang tersedia (built-in) pada papan. Arduino dapat diaktifkan dengan sumber daya baik berasal dari jack power DC (7-12 Volt), konektor USB (5 Volt), atau pin VIN pada board (7-12 Volt). Memberikan tegangan melalui pin 5V atau 3.3V secara langsung tanpa melewati regulator dapat merusak papan Arduino. 3V3 : Sebuah pin yang menghasilkan tegangan 3,3 Volt. Tegangan ini dihasilkan oleh regulator yang terdapat pada papan (on-board). Arus maksimum yang dihasilkan adalah 50 mA. GND : Pin Ground atau Massa. IOREF : Pin ini pada papan Arduino berfungsi untuk memberikan referensi tegangan yang beroperasi pada mikrokontroler. Sebuah perisai (shield) dikonfigurasi dengan benar untuk dapat membaca pin tegangan IOREF dan memilih sumber daya yang tepat atau mengaktifkan penerjemah tegangan (voltage translator) pada output untuk bekerja pada tegangan 5 Volt atau 3,3 Volt. Memori Arduino ATmega2560 memiliki 256 KB flash memory untuk menyimpan kode (yang 8 KB digunakan untuk bootloader), 8 KB SRAM dan 4 KB EEPROM (yang dapat dibaca dan ditulis dengan perpustakaan EEPROM). Input dan Output Masing-masing dari 54 digital pin pada Arduino Mega dapat digunakan sebagai input atau output, menggunakan fungsi pinMode() , digitalWrite() , dan digitalRead() . Arduino Mega beroperasi pada tegangan 5 volt. Setiap pin dapat memberikan atau menerima arus maksimum 40 mA dan memiliki resistor pull-up internal (yang terputus secara default) sebesar 20-50 kOhms. Selain itu, beberapa pin memiliki fungsi khusus, antara lain: Serial : 0 (RX) dan 1 (TX); Serial 1 : 19 (RX) dan 18 (TX); Serial 2 : 17 (RX) dan 16 (TX); Serial 3 : 15 (RX) dan 14 (TX). Digunakan untuk menerima (RX) dan mengirimkan (TX) data serial TTL. Pins 0 dan 1 juga terhubung ke pin chip ATmega16U2 Serial USB-to-TTL. Eksternal Interupsi : Pin 2 (interrupt 0), pin 3 (interrupt 1), pin 18 (interrupt 5), pin 19 (interrupt 4), pin 20 (interrupt 3), dan pin 21 (interrupt 2). Pin ini dapat dikonfigurasi untuk memicu sebuah interupsi pada nilai yang rendah, meningkat atau menurun, atau perubah nilai. SPI : Pin 50 (MISO), pin 51 (MOSI), pin 52 (SCK), pin 53 (SS). Pin ini mendukung komunikasi SPI menggunakan perpustakaan SPI. Pin SPI juga terhubung dengan header ICSP, yang secara fisik kompatibel dengan Arduino Uno, Arduino Duemilanove dan Arduino Diecimila. LED : Pin 13. Tersedia secara built-in pada papan Arduino ATmega2560. LED terhubung ke pin digital 13. Ketika pin diset bernilai HIGH, maka LED menyala (ON), dan ketika pin diset bernilai LOW, maka LED padam (OFF). TWI : Pin 20 (SDA) dan pin 21 (SCL). Yang mendukung komunikasi TWI menggunakan perpustakaan Wire. Perhatikan bahwa pin ini tidak di lokasi yang sama dengan pin TWI pada Arduino Duemilanove atau Arduino Diecimila. Arduino Mega2560 memiliki 16 pin sebagai analog input, yang masing-masing menyediakan resolusi 10 bit (yaitu 1024 nilai yang berbeda). Secara default pin ini dapat diukur/diatur dari mulai Ground sampai dengan 5 Volt, juga memungkinkan untuk mengubah titik jangkauan tertinggi atau terendah mereka menggunakan pin AREF dan fungsi analogReference() . Ada beberapa pin lainnya yang tersedia, antara lain: AREF : Referensi tegangan untuk input analog. Digunakan dengan fungsi analogReference() . RESET : Jalur LOW ini digunakan untuk me-reset (menghidupkan ulang) mikrokontroler. Jalur ini biasanya digunakan untuk menambahkan tombol reset pada shield yang menghalangi papan utama Arduino. Komunikasi Arduino Mega2560 memiliki sejumlah fasilitas untuk berkomunikasi dengan komputer, dengan Arduino lain, atau dengan mikrokontroler lainnya. Arduino ATmega328 menyediakan 4 hardware komunikasi serial UART TTL (5 Volt). Sebuah chip ATmega16U2 (ATmega8U2 pada papan Revisi 1 dan Revisi 2) yang terdapat pada papan digunakan sebagai media komunikasi serial melalui USB dan muncul sebagai COM Port Virtual (pada Device komputer) untuk berkomunikasi dengan perangkat lunak pada komputer, untuk sistem operasi Windows masih tetap memerlukan file inf, tetapi untuk sistem operasi OS X dan Linux akan mengenali papan sebagai port COM secara otomatis. Perangkat lunak Arduino termasuk didalamnya serial monitor memungkinkan data tekstual sederhana dikirim ke dan dari papan Arduino. LED RX dan TX yang tersedia pada papan akan berkedip ketika data sedang dikirim atau diterima melalui chip USB-to-serial yang terhubung melalui USB komputer (tetapi tidak untuk komunikasi serial seperti pada pin 0 dan 1). Sebuah perpustakaan SoftwareSerial memungkinkan untuk komunikasi serial pada salah satu pin digital Mega2560. ATmega2560 juga mendukung komunikasi TWI dan SPI. Perangkat lunak Arduino termasuk perpustakaan Wire digunakan untuk menyederhanakan penggunaan bus TWI. Untuk komunikasi SPI, menggunakan perpustakaan SPI. Pemrograman Arduino Mega dapat diprogram dengan software Arduino ( Unduh perangkat lunak Arduino ). (Mengenai pemahasan lebih rinci tentang perangkat lunak Arduino akan dibahas pada artikel terpisah). ATmega2560 pada Arduino Mega sudah tersedia preburned dengan bootloader (preburned dan bootloader apa bahasa Indonesianya?) yang memungkinkan Anda untuk meng-upload kode baru tanpa menggunakan programmer hardware eksternal. Hal ini karena komunikasi yang terjadi menggunakan protokol asli STK500. Anda juga dapat melewati (bypass) bootloader dan program mikrokontroler melalui pin header ICSP ( In-Circuit Serial Programming ). Chip ATmega16U2 (atau 8U2 pada board Rev. 1 dan Rev. 2) source code firmware tersedia pada repositori Arduino. ATmega16U2/8U2 dapat dimuat dengan bootloader DFU, yang dapat diaktifkan melalui: Pada papan Revisi 1: Menghubungkan jumper solder di bagian belakang papan (dekat dengan peta Italia) dan kemudian akan me-reset 8U2. Pada papan Revisi 2: Ada resistor yang menghubungkan jalur HWB 8U2/16U2 ke ground, sehingga lebih mudah untuk dimasukkan ke dalam mode DFU. Kemudian Anda dapat menggunakan Atmel FLIP software (sistem operasi Windows) atau DFU programmer (sistem operasi Mac OS X dan Linux) untuk memuat firmware baru. Atau Anda dapat menggunakan pin header ISP dengan programmer eksternal (overwrite DFU bootloader). Reset (Software) Otomatis Daripada menekan tombol reset sebelum upload, Arduino Mega2560 didesain dengan cara yang memungkinkan Anda untuk me-reset melalui perangkat lunak yang berjalan pada komputer yang terhubung. Salah satu jalur kontrol hardware (DTR) mengalir dari ATmega8U2/16U2 dan terhubung ke jalur reset dari ATmega2560 melalui kapasitor 100 nanofarad. Bila jalur ini di-set rendah/low, jalur reset drop cukup lama untuk me-reset chip. Perangkat lunak Arduino menggunakan kemampuan ini untuk memungkinkan Anda meng-upload kode dengan hanya menekan tombol upload pada perangkat lunak Arduino. Ini berarti bahwa bootloader memiliki rentang waktu yang lebih pendek, seperti menurunkan DTR dapat terkoordinasi (berjalan beriringan) dengan dimulainya upload. Pengaturan ini juga memiliki implikasi lain. Ketika Mega2560 terhubung dengan komputer yang menggunakan sistem operasi Mac OS X atau Linux, papan Arduino akan di-reset setiap kali dihubungkan dengan software komputer (melalui USB). Dan setengah detik kemudian atau lebih, bootloader berjalan pada papan Mega2560. Proses reset melalui program ini digunakan untuk mengabaikan data yang cacat (yaitu apapun selain meng-upload kode baru), ia akan memotong dan membuang beberapa byte pertama dari data yang dikirim ke papan setelah sambungan dibuka. Jika sebuah sketsa dijalankan pada papan untuk menerima satu kali konfigurasi atau menerima data lain ketika pertama kali dijalankan, pastikan bahwa perangkat lunak diberikan waktu untuk berkomunikasi dengan menunggu satu detik setelah terkoneksi dan sebelum mengirim data. Mega2560 memiliki trek jalur yang dapat dipotong untuk menonaktifkan fungsi auto-reset. Pad di kedua sisi jalur dapat hubungkan dengan disolder untuk mengaktifkan kembali fungsi auto-reset. Pad berlabel \"RESET-EN\". Anda juga dapat menonaktifkan auto-reset dengan menghubungkan resistor 110 ohm dari 5V ke jalur reset. Perlindungan Beban Berlebih pada USB Arduino Mega2560 memiliki polyfuse reset yang melindungi port USB komputer Anda dari hubungan singkat dan arus lebih. Meskipun pada dasarnya komputer telah memiliki perlindungan internal pada port USB mereka sendiri, sekring memberikan lapisan perlindungan tambahan. Jika arus lebih dari 500 mA dihubungkan ke port USB, sekring secara otomatis akan memutuskan sambungan sampai hubungan singkat atau overload dihapus/dibuang. Karakteristik Fisik dan Kompatibilitas Shield Maksimum panjang dan lebar PCB Mega2560 adalah 4 x 2.1 inch (10,16 x 5,3 cm), dengan konektor USB dan jack power menonjol melampaui batas dimensi. Empat lubang sekrup memungkinkan papan terpasang pada suatu permukaan atau wadah. Perhatikan bahwa jarak antara pin digital 7 dan 8 adalah 160 mil (0.16\"), tidak seperti pin lainnya dengan kelipatan genap berjarak 100 mil. Arduino Mega2560 dirancang agar kompatibel dengan sebagian shield yang dirancang untuk Arduino Uno, Arduino Diecimila atau Arduino Duemilanove. Pin Digital 0-13 (pin AREF berdekatan dan pin GND), input analog 0 sampai 5, header power, dan header ICSP berada di lokasi yang ekuivalen. Selanjutnya UART utama (port serial) terletak di pin yang sama (0 dan 1), seperti pin interupsi eksternal 0 dan 1 (masing-masing pada pin 2 dan 3). SPI di kedua header ICSP yaitu Mega2560 dan Duemilanove/Diecimila. Harap dicatat bahwa pin I2C tidak terletak pada pin yang sama pada Mega pin (20 dan pin 21) seperti halnya Duemilanove/Diecimila (input analog pin 4 dan pin 5). Daftar Pustaka Arduino Mega2560 (Halaman diakses pada tanggal 7 Agustus 2014, 0:01 AM)","title":"Mengenal Arduino Mega2560"},{"location":"papan/mengenal-arduino-mega2560/#mengenal-arduino-mega2560","text":"Arduino Mega2560 adalah papan mikrokontroler berbasiskan ATmega2560 ( datasheet ATmega2560 ). Arduino Mega2560 memiliki 54 pin digital input/output, dimana 15 pin dapat digunakan sebagai output PWM, 16 pin sebagai input analog, dan 4 pin sebagai UART (port serial hardware), 16 MHz kristal osilator, koneksi USB, jack power, header ICSP, dan tombol reset. Ini semua yang diperlukan untuk mendukung mikrokontroler. Cukup dengan menghubungkannya ke komputer melalui kabel USB atau power dihubungkan dengan adaptor AC-DC atau baterai untuk mulai mengaktifkannya. Arduino Mega2560 kompatibel dengan sebagian besar shield yang dirancang untuk Arduino Duemilanove atau Arduino Diecimila. Arduino Mega2560 adalah versi terbaru yang menggantikan versi Arduino Mega. Arduino Mega2560 berbeda dari papan sebelumnya, karena versi terbaru sudah tidak menggunakan chip driver FTDI USB-to-serial. Tapi, menggunakan chip ATmega16U2 (ATmega8U2 pada papan Revisi 1 dan Revisi 2) yang diprogram sebagai konverter USB-to-serial. Arduino Mega2560 Revisi 2 memiliki resistor pull-down HWB 8U2 ke Ground, sehingga lebih mudah untuk dimasukkan ke dalam mode DFU. Arduino Mega2560 Revisi 3 memiliki fitur-fitur baru berikut: * 1.0 pinout : Ditambahkan pin SDA dan pin SCL yang dekat dengan pin AREF dan dua pin baru lainnya ditempatkan dekat dengan pin RESET, IOREF memungkinkan shield untuk beradaptasi dengan tegangan yang tersedia pada papan. Di masa depan, shield akan kompatibel baik dengan papan yang menggunakan AVR yang beroperasi dengan 5 Volt dan dengan Arduino Due yang beroperasi dengan tegangan 3.3 Volt. Dan ada dua pin yang tidak terhubung, yang disediakan untuk tujuan masa depan. * Sirkuit RESET. * Chip ATmega16U2 menggantikan chip ATmega8U2.","title":"Mengenal Arduino Mega2560"},{"location":"papan/mengenal-arduino-mega2560/#skema-referensi-desain","text":"Dibawah ini Skema dan Referensi Arduino Mega2560: Skema Arduino Mega2560 EagleCAD : Arduino-mega2560_R3-referensi-design.zip Skema Arduino Mega2560 PDF : Arduino-mega2560_R3-schematic.pdf","title":"Skema &amp; Referensi Desain"},{"location":"papan/mengenal-arduino-mega2560/#pemetaan-pin","text":"Dibawah ini pemetaan pin ATmega2560 dengan Arduino Mega2560: Nomor Pin Nama Pin Peta Nama Pin 1 PG5 (OC0B) Digital pin 4 (PWM) 2 PE0 (RXD0/PCINT8) Digital pin 0 (RX0) 3 PE1 (TXD0) Digital pin 1 (TX0) 4 PE2 (XCK0/AIN0) - 5 PE3 (OC3A/AIN1) Digital pin 5 (PWM) 6 PE4 (OC3B/INT4) Digital pin 2 (PWM) 7 PE5 (OC3C/INT5) Digital pin 3 (PWM) 8 PE6 (T3/INT6) - 9 PE7 (CLKO/ICP3/INT7) - 10 VCC VCC 11 GND GND 12 PH0 (RXD2) Digital pin 17 (RX2) 13 PH1 (TXD2) Digital pin 16 (TX2) 14 PH2 (XCK2) - 15 PH3 (OC4A) Digital pin 6 (PWM) 16 PH4 (OC4B) Digital pin 7 (PWM) 17 PH5 (OC4C) Digital pin 8 (PWM) 18 PH6 (OC2B) Digital pin 9 (PWM) 19 PB0 (SS/PCINT0) Digital pin 53 (SS) 20 PB1 (SCK/PCINT1) Digital pin 52 (SCK) 21 PB2 (MOSI/PCINT2) Digital pin 51 (MOSI) 22 PB3 (MISO/PCINT3) Digital pin 50 (MISO) 23 PB4 (OC2A/PCINT4) Digital pin 10 (PWM) 24 PB5 (OC1A/PCINT5) Digital pin 11 (PWM) 25 PB6 (OC1B/PCINT6) Digital pin 12 (PWM) 26 PB7 (OC0A/OC1C/PCINT7) Digital pin 13 (PWM) 27 PH7 (T4 ) - 28 PG3 (TOSC2) - 29 PG4 (TOSC1) - 30 RESET RESET 31 VCC VCC 32 GND GND 33 XTAL2 XTAL2 34 XTAL1 XTAL1 35 PL0 (ICP4) Digital pin 49 36 PL1 (ICP5) Digital pin 48 37 PL2 (T5 ) Digital pin 47 38 PL3 (OC5A) Digital pin 46 (PWM) 39 PL4 (OC5B) Digital pin 45 (PWM) 40 PL5 (OC5C) Digital pin 44 (PWM) 41 PL6 Digital pin 43 42 PL7 Digital pin 42 43 PD0 (SCL/INT0) Digital pin 21 (SCL) 44 PD1 (SDA/INT1) Digital pin 20 (SDA) 45 PD2 (RXDI/INT2) Digital pin 19 (RX1) 46 PD3 (TXD1/INT3) Digital pin 18 (TX1) 47 PD4 (ICP1) - 48 PD5 (XCK1) - 49 PD6 (T1) - 50 PD7 (T0) Digital pin 38 51 PG0 (WR) Digital pin 41 52 PG1 (RD) Digital pin 40 53 PC0 (A8) Digital pin 37 54 PC1 (A9) Digital pin 36 55 PC2 (A10) Digital pin 35 56 PC3 (A11) Digital pin 34 57 PC4 (A12) Digital pin 33 58 PC5 (A13) Digital pin 32 59 PC6 (A14) Digital pin 31 60 PC7 (A15) Digital pin 30 61 VCC VCC 62 GND GND 63 PJ0 (RXD3/PCINT9) Digital pin 15 (RX3) 64 PJ1 (TXD3/PCINT10) Digital pin 14 (TX3) 65 PJ2 (XCK3/PCINT11) - 66 PJ3 (PCINT12) - 67 PJ4 (PCINT13) - 68 PJ5 (PCINT14) - 69 PJ6 (PCINT 15) - 70 PG2 (ALE) Digital pin 39 71 PA7 (AD7) Digital pin 29 72 PA6 (AD6) Digital pin 28 73 PA5 (AD5) Digital pin 27 74 PA4 (AD4) Digital pin 26 75 PA3 (AD3) Digital pin 25 76 PA2 (AD2) Digital pin 24 77 PA1 (AD1) Digital pin 23 78 PA0 (AD0) Digital pin 22 79 PJ7 - 80 VCC VCC 81 GND GND 82 PK7 (ADC15/PCINT23) Analog pin 15 83 PK6 (ADC14/PCINT22) Analog pin 14 84 PK5 (ADC13/PCINT21) Analog pin 13 85 PK4 (ADC12/PCINT20) Analog pin 12 86 PK3 (ADC11/PCINT19) Analog pin 11 87 PK2 (ADC10/PCINT18) Analog pin 10 88 PK1 (ADC9/PCINT17) Analog pin 9 89 PK0 (ADC8/PCINT16) Analog pin 8 90 PF7 (ADC7) Analog pin 7 91 PF6 (ADC6) Analog pin 6 92 PF5 (ADC5/TMS) Analog pin 5 93 PF4 (ADC4/TMK) Analog pin 4 94 PF3 (ADC3) Analog pin 3 95 PF2 (ADC2) Analog pin 2 96 PF1 (ADC1) Analog pin 1 97 PF0 (ADC0) Analog pin 0 98 AREF Analog Reference 99 GND GND 100 AVCC VCC","title":"Pemetaan Pin"},{"location":"papan/mengenal-arduino-mega2560/#ringkasan-spesifikasi","text":"Dibawah ini spesifikasi sederhana dari Arduino Mega2560: Informasi Spesifikasi Mikrokontroler ATmega2560 Tegangan Operasi 5V Input Voltage (disarankan) 7-12V Input Voltage (limit) 6-20V Pin Digital I/O 54 (yang 15 pin digunakan sebagai output PWM) Pins Input Analog 16 Arus DC per pin I/O 40 mA Arus DC untuk pin 3.3V 50 mA Flash Memory 256 KB (8 KB digunakan untuk bootloader) SRAM 8 KB EEPROM 4 KB Clock Speed 16 MHz","title":"Ringkasan Spesifikasi"},{"location":"papan/mengenal-arduino-mega2560/#sumber-daya","text":"Arduino Mega dapat diaktifkan melalui koneksi USB atau dengan catu daya eksternal. Sumber daya dipilih secara otomatis. Sumber daya eksternal (non-USB) dapat berasal baik dari adaptor AC-DC atau baterai. Adaptor dapat dihubungkan dengan mencolokkan steker 2,1 mm yang bagian tengahnya terminal positif ke ke jack sumber tegangan pada papan. Jika tegangan berasal dari baterai dapat langsung dihubungkan melalui header pin Gnd dan pin Vin dari konektor POWER. Papan Arduino ATmega2560 dapat beroperasi dengan pasokan daya eksternal 6 Volt sampai 20 volt. Jika diberi tegangan kurang dari 7 Volt, maka, pin 5 Volt mungkin akan menghasilkan tegangan kurang dari 5 Volt dan ini akan membuat papan menjadi tidak stabil. Jika sumber tegangan menggunakan lebih dari 12 Volt, regulator tegangan akan mengalami panas berlebihan dan bisa merusak papan. Rentang sumber tegangan yang dianjurkan adalah 7 Volt sampai 12 Volt. Pin tegangan yang tersedia pada papan Arduino adalah sebagai berikut: VIN : Adalah input tegangan untuk papan Arduino ketika menggunakan sumber daya eksternal (sebagai 'saingan' tegangan 5 Volt dari koneksi USB atau sumber daya ter-regulator lainnya). Anda dapat memberikan tegangan melalui pin ini, atau jika memasok tegangan untuk papan melalui jack power, kita bisa mengakses/mengambil tegangan melalui pin ini. 5V : Sebuah pin yang mengeluarkan tegangan ter-regulator 5 Volt, dari pin ini tegangan sudah diatur (ter-regulator) dari regulator yang tersedia (built-in) pada papan. Arduino dapat diaktifkan dengan sumber daya baik berasal dari jack power DC (7-12 Volt), konektor USB (5 Volt), atau pin VIN pada board (7-12 Volt). Memberikan tegangan melalui pin 5V atau 3.3V secara langsung tanpa melewati regulator dapat merusak papan Arduino. 3V3 : Sebuah pin yang menghasilkan tegangan 3,3 Volt. Tegangan ini dihasilkan oleh regulator yang terdapat pada papan (on-board). Arus maksimum yang dihasilkan adalah 50 mA. GND : Pin Ground atau Massa. IOREF : Pin ini pada papan Arduino berfungsi untuk memberikan referensi tegangan yang beroperasi pada mikrokontroler. Sebuah perisai (shield) dikonfigurasi dengan benar untuk dapat membaca pin tegangan IOREF dan memilih sumber daya yang tepat atau mengaktifkan penerjemah tegangan (voltage translator) pada output untuk bekerja pada tegangan 5 Volt atau 3,3 Volt.","title":"Sumber Daya"},{"location":"papan/mengenal-arduino-mega2560/#memori","text":"Arduino ATmega2560 memiliki 256 KB flash memory untuk menyimpan kode (yang 8 KB digunakan untuk bootloader), 8 KB SRAM dan 4 KB EEPROM (yang dapat dibaca dan ditulis dengan perpustakaan EEPROM).","title":"Memori"},{"location":"papan/mengenal-arduino-mega2560/#input-dan-output","text":"Masing-masing dari 54 digital pin pada Arduino Mega dapat digunakan sebagai input atau output, menggunakan fungsi pinMode() , digitalWrite() , dan digitalRead() . Arduino Mega beroperasi pada tegangan 5 volt. Setiap pin dapat memberikan atau menerima arus maksimum 40 mA dan memiliki resistor pull-up internal (yang terputus secara default) sebesar 20-50 kOhms. Selain itu, beberapa pin memiliki fungsi khusus, antara lain: Serial : 0 (RX) dan 1 (TX); Serial 1 : 19 (RX) dan 18 (TX); Serial 2 : 17 (RX) dan 16 (TX); Serial 3 : 15 (RX) dan 14 (TX). Digunakan untuk menerima (RX) dan mengirimkan (TX) data serial TTL. Pins 0 dan 1 juga terhubung ke pin chip ATmega16U2 Serial USB-to-TTL. Eksternal Interupsi : Pin 2 (interrupt 0), pin 3 (interrupt 1), pin 18 (interrupt 5), pin 19 (interrupt 4), pin 20 (interrupt 3), dan pin 21 (interrupt 2). Pin ini dapat dikonfigurasi untuk memicu sebuah interupsi pada nilai yang rendah, meningkat atau menurun, atau perubah nilai. SPI : Pin 50 (MISO), pin 51 (MOSI), pin 52 (SCK), pin 53 (SS). Pin ini mendukung komunikasi SPI menggunakan perpustakaan SPI. Pin SPI juga terhubung dengan header ICSP, yang secara fisik kompatibel dengan Arduino Uno, Arduino Duemilanove dan Arduino Diecimila. LED : Pin 13. Tersedia secara built-in pada papan Arduino ATmega2560. LED terhubung ke pin digital 13. Ketika pin diset bernilai HIGH, maka LED menyala (ON), dan ketika pin diset bernilai LOW, maka LED padam (OFF). TWI : Pin 20 (SDA) dan pin 21 (SCL). Yang mendukung komunikasi TWI menggunakan perpustakaan Wire. Perhatikan bahwa pin ini tidak di lokasi yang sama dengan pin TWI pada Arduino Duemilanove atau Arduino Diecimila. Arduino Mega2560 memiliki 16 pin sebagai analog input, yang masing-masing menyediakan resolusi 10 bit (yaitu 1024 nilai yang berbeda). Secara default pin ini dapat diukur/diatur dari mulai Ground sampai dengan 5 Volt, juga memungkinkan untuk mengubah titik jangkauan tertinggi atau terendah mereka menggunakan pin AREF dan fungsi analogReference() . Ada beberapa pin lainnya yang tersedia, antara lain: AREF : Referensi tegangan untuk input analog. Digunakan dengan fungsi analogReference() . RESET : Jalur LOW ini digunakan untuk me-reset (menghidupkan ulang) mikrokontroler. Jalur ini biasanya digunakan untuk menambahkan tombol reset pada shield yang menghalangi papan utama Arduino.","title":"Input dan Output"},{"location":"papan/mengenal-arduino-mega2560/#komunikasi","text":"Arduino Mega2560 memiliki sejumlah fasilitas untuk berkomunikasi dengan komputer, dengan Arduino lain, atau dengan mikrokontroler lainnya. Arduino ATmega328 menyediakan 4 hardware komunikasi serial UART TTL (5 Volt). Sebuah chip ATmega16U2 (ATmega8U2 pada papan Revisi 1 dan Revisi 2) yang terdapat pada papan digunakan sebagai media komunikasi serial melalui USB dan muncul sebagai COM Port Virtual (pada Device komputer) untuk berkomunikasi dengan perangkat lunak pada komputer, untuk sistem operasi Windows masih tetap memerlukan file inf, tetapi untuk sistem operasi OS X dan Linux akan mengenali papan sebagai port COM secara otomatis. Perangkat lunak Arduino termasuk didalamnya serial monitor memungkinkan data tekstual sederhana dikirim ke dan dari papan Arduino. LED RX dan TX yang tersedia pada papan akan berkedip ketika data sedang dikirim atau diterima melalui chip USB-to-serial yang terhubung melalui USB komputer (tetapi tidak untuk komunikasi serial seperti pada pin 0 dan 1). Sebuah perpustakaan SoftwareSerial memungkinkan untuk komunikasi serial pada salah satu pin digital Mega2560. ATmega2560 juga mendukung komunikasi TWI dan SPI. Perangkat lunak Arduino termasuk perpustakaan Wire digunakan untuk menyederhanakan penggunaan bus TWI. Untuk komunikasi SPI, menggunakan perpustakaan SPI.","title":"Komunikasi"},{"location":"papan/mengenal-arduino-mega2560/#pemrograman","text":"Arduino Mega dapat diprogram dengan software Arduino ( Unduh perangkat lunak Arduino ). (Mengenai pemahasan lebih rinci tentang perangkat lunak Arduino akan dibahas pada artikel terpisah). ATmega2560 pada Arduino Mega sudah tersedia preburned dengan bootloader (preburned dan bootloader apa bahasa Indonesianya?) yang memungkinkan Anda untuk meng-upload kode baru tanpa menggunakan programmer hardware eksternal. Hal ini karena komunikasi yang terjadi menggunakan protokol asli STK500. Anda juga dapat melewati (bypass) bootloader dan program mikrokontroler melalui pin header ICSP ( In-Circuit Serial Programming ). Chip ATmega16U2 (atau 8U2 pada board Rev. 1 dan Rev. 2) source code firmware tersedia pada repositori Arduino. ATmega16U2/8U2 dapat dimuat dengan bootloader DFU, yang dapat diaktifkan melalui: Pada papan Revisi 1: Menghubungkan jumper solder di bagian belakang papan (dekat dengan peta Italia) dan kemudian akan me-reset 8U2. Pada papan Revisi 2: Ada resistor yang menghubungkan jalur HWB 8U2/16U2 ke ground, sehingga lebih mudah untuk dimasukkan ke dalam mode DFU. Kemudian Anda dapat menggunakan Atmel FLIP software (sistem operasi Windows) atau DFU programmer (sistem operasi Mac OS X dan Linux) untuk memuat firmware baru. Atau Anda dapat menggunakan pin header ISP dengan programmer eksternal (overwrite DFU bootloader).","title":"Pemrograman"},{"location":"papan/mengenal-arduino-mega2560/#reset-software-otomatis","text":"Daripada menekan tombol reset sebelum upload, Arduino Mega2560 didesain dengan cara yang memungkinkan Anda untuk me-reset melalui perangkat lunak yang berjalan pada komputer yang terhubung. Salah satu jalur kontrol hardware (DTR) mengalir dari ATmega8U2/16U2 dan terhubung ke jalur reset dari ATmega2560 melalui kapasitor 100 nanofarad. Bila jalur ini di-set rendah/low, jalur reset drop cukup lama untuk me-reset chip. Perangkat lunak Arduino menggunakan kemampuan ini untuk memungkinkan Anda meng-upload kode dengan hanya menekan tombol upload pada perangkat lunak Arduino. Ini berarti bahwa bootloader memiliki rentang waktu yang lebih pendek, seperti menurunkan DTR dapat terkoordinasi (berjalan beriringan) dengan dimulainya upload. Pengaturan ini juga memiliki implikasi lain. Ketika Mega2560 terhubung dengan komputer yang menggunakan sistem operasi Mac OS X atau Linux, papan Arduino akan di-reset setiap kali dihubungkan dengan software komputer (melalui USB). Dan setengah detik kemudian atau lebih, bootloader berjalan pada papan Mega2560. Proses reset melalui program ini digunakan untuk mengabaikan data yang cacat (yaitu apapun selain meng-upload kode baru), ia akan memotong dan membuang beberapa byte pertama dari data yang dikirim ke papan setelah sambungan dibuka. Jika sebuah sketsa dijalankan pada papan untuk menerima satu kali konfigurasi atau menerima data lain ketika pertama kali dijalankan, pastikan bahwa perangkat lunak diberikan waktu untuk berkomunikasi dengan menunggu satu detik setelah terkoneksi dan sebelum mengirim data. Mega2560 memiliki trek jalur yang dapat dipotong untuk menonaktifkan fungsi auto-reset. Pad di kedua sisi jalur dapat hubungkan dengan disolder untuk mengaktifkan kembali fungsi auto-reset. Pad berlabel \"RESET-EN\". Anda juga dapat menonaktifkan auto-reset dengan menghubungkan resistor 110 ohm dari 5V ke jalur reset.","title":"Reset (Software) Otomatis"},{"location":"papan/mengenal-arduino-mega2560/#perlindungan-beban-berlebih-pada-usb","text":"Arduino Mega2560 memiliki polyfuse reset yang melindungi port USB komputer Anda dari hubungan singkat dan arus lebih. Meskipun pada dasarnya komputer telah memiliki perlindungan internal pada port USB mereka sendiri, sekring memberikan lapisan perlindungan tambahan. Jika arus lebih dari 500 mA dihubungkan ke port USB, sekring secara otomatis akan memutuskan sambungan sampai hubungan singkat atau overload dihapus/dibuang.","title":"Perlindungan Beban Berlebih pada USB"},{"location":"papan/mengenal-arduino-mega2560/#karakteristik-fisik-dan-kompatibilitas-shield","text":"Maksimum panjang dan lebar PCB Mega2560 adalah 4 x 2.1 inch (10,16 x 5,3 cm), dengan konektor USB dan jack power menonjol melampaui batas dimensi. Empat lubang sekrup memungkinkan papan terpasang pada suatu permukaan atau wadah. Perhatikan bahwa jarak antara pin digital 7 dan 8 adalah 160 mil (0.16\"), tidak seperti pin lainnya dengan kelipatan genap berjarak 100 mil. Arduino Mega2560 dirancang agar kompatibel dengan sebagian shield yang dirancang untuk Arduino Uno, Arduino Diecimila atau Arduino Duemilanove. Pin Digital 0-13 (pin AREF berdekatan dan pin GND), input analog 0 sampai 5, header power, dan header ICSP berada di lokasi yang ekuivalen. Selanjutnya UART utama (port serial) terletak di pin yang sama (0 dan 1), seperti pin interupsi eksternal 0 dan 1 (masing-masing pada pin 2 dan 3). SPI di kedua header ICSP yaitu Mega2560 dan Duemilanove/Diecimila. Harap dicatat bahwa pin I2C tidak terletak pada pin yang sama pada Mega pin (20 dan pin 21) seperti halnya Duemilanove/Diecimila (input analog pin 4 dan pin 5).","title":"Karakteristik Fisik dan Kompatibilitas Shield"},{"location":"papan/mengenal-arduino-mega2560/#daftar-pustaka","text":"Arduino Mega2560 (Halaman diakses pada tanggal 7 Agustus 2014, 0:01 AM)","title":"Daftar Pustaka"},{"location":"papan/mengenal-arduino-nano/","text":"Mengenal Arduino Nano Papan pengembangan elektronika mikrokontroler yang diberi nama Arduino ini memiliki banyak sekali turunannya. Baik itu yang diturunkan langsung dari pihak Arduino sendiri atau pihak ketiga yang ikut mengembangkan papan Arduino. Hal ini karena Arduino bersifat Open Source Hardware (OSH), karena sifatnya yang terbuka ini maka membuat para pengembang tidak perlu takut dengan Hak Atas Kekayaan Intelektual. Siapapun dapat membangun papan Arduino dengan versi sendiri dan disesuaikan dengan kebutuhan sendiri atau bahkan disesuaikan dengan dana yang dimiliki, namun tetap bekerja normal layaknya papan Arduino aslinya. Salah satu papan Arduino yang dikembangkan pihak ke tiga dan dapat diterima oleh pasar dengan baik adalah Arduino Nano. Seperti apa Arduino Nano? Arduino Nano adalah salah satu papan pengembangan mikrokontoler yang berukuran kecil, lengkap dan mendukung penggunaan breadboard. Arduino Nano diciptakan dengan basis mikrokontroler ATmega328 (untuk Arduino Nano versi 3.x) atau ATmega 168(untuk Arduino versi 2.x). Arduino Nano kurang lebih memiliki fungsi yang sama dengan Arduino Duemilanove, tetapi dalam paket yang berbeda. Arduino Nano tidak menyertakan colokan DC berjenis Barrel Jack, dan dihubungkan ke komputer menggunakan port USB Mini-B. Arduino Nano dirancang dan diproduksi oleh perusahaan Gravitech . Gambar 1. Arduino Nano Depan Gambar 2. Arduino Nano Belakang Skema dan Desain Karena Arduino Nano dibuat oleh Gravitech maka dibawah ini ada dua lampiran file tentang skema Arduino Nano. Yang keduanya identik, baik yang berasal dari situs Arduino maupun dari situs Gravitech. Unduh Skema (PDF) Arduino Nano versi 3.0 (ATmega328) : skema dari Arduino dan skema dari Gravitech Unduh Skema (EagleCAD) Arduino Nano versi 3.0 (ATmega328): skema dari Arduino dan skema dari Gravitech Unduh Skema (PDF) Arduino Nano versi 2.3 (ATmega168) : skema PDF , skema EagleCAD Catatan : Jika anda menggunakan EagleCAD versi gratis maka tidak bisa menangani layer lebih dari 2, sedangkan Arduino Nano versi 2.3 terdiri dari 4 lapisan (layer). Spesifikasi Dibawah ini spesifikasi dari Arduino Nano: Info Spesifikasi Mikrokontroler Atmel ATmega168 atau ATmega328 Tegangan Operasi 5V Input Voltage (disarankan) 7-12V Input Voltage (limit) 6-20V Pin Digital I/O 14 (6 pin digunakan sebagai output PWM) Pins Input Analog 8 Arus DC per pin I/O 40 mA Flash Memory 16KB (ATmega168) atau 32KB (ATmega328) 2KB digunakan oleh Bootloader SRAM 1 KB (ATmega168) atau 2 KB (ATmega328) EEPROM 512 byte (ATmega168) atau 1KB (ATmega328) Clock Speed 16 MHz Ukuran 1.85cm x 4.3cm Sumber Daya Arduino Nano dapat diaktifkan melalui koneksi USB Mini-B, atau melalui catu daya eksternal dengan tegangan belum teregulasi antara 6-20 Volt yang dihubungkan melalui pin 30 atau pin VIN, atau melalui catu daya eksternal dengan tegangan teregulasi 5 volt melalui pin 27 atau pin 5V. Sumber daya akan secara otomatis dipilih dari sumber tegangan yang lebih tinggi. Chip FTDI FT232L pada Arduino Nano akan aktif apabila memperoleh daya melalui USB, ketika Arduino Nano diberikan daya dari luar (Non-USB) maka Chip FTDI tidak aktif dan pin 3.3V pun tidak tersedia (tidak mengeluarkan tegangan), sedangkan LED TX dan RX pun berkedip apabila pin digital 0 dan 1 berada pada posisi HIGH. Pemetaan Pin Dibawah ini pemetaan pin ATmega168 pada Arduino Nano. Gambar 3. Pemetaan Pin ATmega168 Perhatikan pemetaan antara pin Arduino Nano dan port ATmega168. Pemetaan untuk ATmega8, ATmega168, dan ATmega328 sangat identik atau sama persis. Gambar 4. Pin Layout Arduino Nano Tabel Pemetaan No Pin ATmega328 Nama Pin ATmega328 No Pin Nano Peta Pin Nano 1 PD3 (PCINT19/OCB2B/INT1) 6 Digital Pin 3 (PWM) 2 PD4 (PCINT20/XCK/T0) 7 Digital Pin 4 3 GND 4 GND 4 VCC 27 VCC 5 GND 4 GND 6 VCC 27 VCC 7 PB6 (PCINT6/XTAL1/TOASC1) - - 8 PB7 (PCINT7/XTAL2/TOASC2) - - 9 PD5 (PCINT21/OC0B/T1) 8 Digital Pin 5 (PWM) 10 PD6 (PCINT22/OC0A/AIN0) 9 Digital Pin 6 (PWM) 11 PD7 (PCINT23/AIN1) 10 Digital Pin 7 12 PB0 (PCINT0/CLK0/ICP1) 11 Digital Pin 8 13 PB1 (PCINT1/OC1A) 13 Digital Pin 9 (PWM) 14 PB2 (PCINT2/SS/OC1B) 13 Digital Pin 10 (PWM - SS) 15 PB3 (PCINT3/OC2A/MOSI) 14 Digital Pin 11 (PWM - MOSI) 16 PB4 (PCINT4/MISO) 15 Digital Pin 12 (MISO) 17 PB5 (PCINT5/SCK) 16 Digital Pin 13 (SCK) 18 AVCC 27 VCC 19 ADC6 25 Analog Input 6 20 AREF 18 AREF 21 GND 29 GND 22 ADC7 26 Analog Input 7 23 PC0 (PCINT8/ADC0) 19 Analog Input 0 24 PC1 (PCINT9/ADC1) 20 Analog Input 1 25 PC2 (PCINT10/ADC2) 21 Analog Input 2 26 PC3 (PCINT11/ADC3) 22 Analog Input 3 27 PC4 (PCINT12/ADC4/SDA) 24 Analog Input 4 (SDA) 28 PC5 (PCINT13/ADC5/SCL) 25 Analog Input 5 (SCL) 29 PC6 (PCINT14/RESET) 18 RESET 30 PD0 (PCINT16/RXD) 2 Digital Pin 0 (RX) 31 PD1 (PCINT17/TXD) 1 Digital Pin 1 (TX) 32 PD2 (PCINT18/INT0) 5 Digital Pin 2 Memory ATmega168 memiliki 16 KB flash memory untuk menyimpan kode (2 KB digunakan untuk bootloader); Sedangkan ATmega328 memiliki flash memory sebesar 32 KB, (juga dengan 2 KB digunakan untuk bootloader). ATmega168 memiliki 1 KB memory pada SRAM dan 512 byte pada EEPROM (yang dapat dibaca dan ditulis dengan perpustakaan EEPROM); Sedangkan ATmega328 memiliki 2 KB memory pada SRAM dan 1 KB pada EEPROM. Input dan Output Masing-masing dari 14 pin digital pada Arduino Nano dapat digunakan sebagai input atau output, dengan menggunakan fungsi pinMode() , digitalWrite() , dan digitalRead() . Semua pin beroperasi pada tegangan 5 volt. Setiap pin dapat memberikan atau menerima arus maksimum 40 mA dan memiliki resistor pull-up internal (yang terputus secara default) sebesar 20-50 KOhm. Selain itu beberapa pin memiliki fungsi khusus, yaitu: Serial : 0 (RX) dan 1 (TX). Digunakan untuk menerima (RX) dan mengirimkan (TX) TTL data serial. Pin ini terhubung ke pin yang sesuai dari chip FTDI USB-to-TTL Serial. External Interrupt (Interupsi Eksternal): Pin 2 dan pin 3 ini dapat dikonfigurasi untuk memicu sebuah interupsi pada nilai yang rendah, meningkat atau menurun, atau perubahan nilai. PWM : Pin 3, 5, 6, 9, 10, dan 11. Menyediakan output PWM 8-bit dengan fungsi analogWrite() . Jika pada jenis papan berukuran lebih besar (misal: Arduino Uno ), pin PWM ini diberi simbol tilde atau \"~\" sedangkan pada Arduino Nano diberi tanda titik. SPI : Pin 10 (SS), 11 (MOSI), 12 (MISO), 13 (SCK). Pin ini mendukung komunikasi SPI. Sebenarnya komunikasi SPI ini tersedia pada hardware, tapi untuk saat belum didukung dalam bahasa Arduino. LED : Pin 13. Tersedia secara built-in pada papan Arduino Nano. LED terhubung ke pin digital 13. Ketika pin diset bernilai HIGH, maka LED menyala, dan ketika pin diset bernilai LOW, maka LED padam. Arduino Nano memiliki 8 pin sebagai input analog, diberi label A0 sampai dengan A7, yang masing-masing menyediakan resolusi 10 bit (yaitu 1024 nilai yang berbeda). Secara default pin ini dapat diukur/diatur dari mulai Ground sampai dengan 5 Volt, juga memungkinkan untuk mengubah titik jangkauan tertinggi atau terendah mereka menggunakan fungsi analogReference() . Pin Analog 6 dan 7 tidak dapat digunakan sebagai pin digital. Selain itu juga, beberapa pin memiliki fungsi yang dikhususkan, yaitu: I2C : Pin A4 (SDA) dan pin A5 (SCL). Yang mendukung komunikasi I2C (TWI) menggunakan perpustakaan Wire. Masih ada beberapa pin lainnya pada Arduino Nano, yaitu: AREF : Referensi tegangan untuk input analog. Digunakan dengan fungsi analogReference() . RESET : Jalur LOW ini digunakan untuk me-reset (menghidupkan ulang) mikrokontroler. Biasanya digunakan untuk menambahkan tombol reset pada shield yang menghalangi papan utama Arduino. Komunikasi Arduino Nano memiliki sejumlah fasilitas untuk berkomunikasi dengan komputer, dengan Arduino lain, atau dengan mikrokontroler lainnya. ATmega168 dan ATmega328 menyediakan komunikasi serial UART TTL (5 Volt), yang tersedia pada pin digital 0 (RX) dan pin 1 (TX). Sebuah chip FTDI FT232RL yang terdapat pada papan Arduino Nano digunakan sebagai media komunikasi serial melalui USB dan driver FTDI (tersedia pada software Arduino IDE) yang akan menyediakan COM Port Virtual (pada Device komputer) untuk berkomunikasi dengan perangkat lunak pada komputer. Perangkat lunak Arduino termasuk didalamnya serial monitor memungkinkan data tekstual sederhana dikirim ke dan dari papan Arduino. LED RX dan TX yang tersedia pada papan akan berkedip ketika data sedang dikirim atau diterima melalui chip FTDI dan koneksi USB yang terhubung melalui USB komputer (tetapi tidak untuk komunikasi serial pada pin 0 dan 1). Sebuah perpustakaan SoftwareSerial memungkinkan komunikasi serial pada beberapa pin digital Nano. ATmega168 dan ATmega328 juga mendukung komunikasi I2C (TWI) dan SPI. Perangkat lunak Arduino termasuk perpustakaan Wire digunakan untuk menyederhanakan penggunaan bus I2C. Untuk komunikasi SPI, silakan lihat datasheet ATmega168 atau ATmega328. Pemrograman Arduino Nano dapat diprogram dengan software Arduino ( Unduh perangkat lunak Arduino ). Pilih \"Arduino Diecimila, Duemilanove, atau Nano w/ ATmega168 \" or \"Arduino Duemilanove atau Nano w/ ATmega328\" melalui menu Tools Board (sesuaikan dengan jenis mikrokontroler yang anda miliki). ATmega168 dan ATmega328 pada Arduino Nano sudah dipaket preburned dengan bootloader yang memungkinkan Anda untuk meng-upload kode baru tanpa menggunakan programer hardware eksternal. Hal ini karena komunikasi yang terjadi menggunakan protokol asli STK500. Anda juga dapat melewati (bypass) bootloader dan program mikrokontroler melalui pin header ICSP (In-Circuit Serial Programming) menggunakan Arduino ISP atau yang sejenis. Reset (Software) Otomatis Daripada menekan tombol reset sebelum upload, Arduino Nano didesain dengan cara yang memungkinkan Anda untuk me-reset melalui perangkat lunak yang berjalan pada komputer yang terhubung. Salah satu jalur kontrol hardware (DTR) mengalir dari FT232RL dan terhubung ke jalur reset dari ATmega168 atau ATmega328 melalui kapasitor 100 nanofarad. Bila jalur ini di-set rendah/low, jalur reset drop cukup lama untuk me-reset chip. Perangkat lunak Arduino menggunakan kemampuan ini untuk memungkinkan Anda meng-upload kode dengan hanya menekan tombol upload pada perangkat lunak Arduino. Ini berarti bahwa bootloader memiliki rentang waktu yang lebih pendek, seperti menurunkan DTR dapat terkoordinasi (berjalan beriringan) dengan dimulainya upload. Pengaturan ini juga memiliki implikasi lain. Ketika Arduino Nano terhubung dengan komputer yang menggunakan sistem operasi Mac OS X atau Linux, papan Arduino akan di-reset setiap kali dihubungkan dengan software komputer (melalui USB). Dan setengah detik kemudian atau lebih, bootloader berjalan pada papan Arduino Nano. Proses reset melalui program ini digunakan untuk mengabaikan data yang cacat (yaitu apapun selain meng-upload kode baru), ia akan memotong dan membuang beberapa byte pertama dari data yang dikirim ke papan setelah sambungan terbuka. Jika sebuah sketsa dijalankan pada papan untuk menerima satu kali konfigurasi atau menerima data lain ketika pertama kali dijalankan, pastikan bahwa perangkat lunak diberikan waktu untuk berkomunikasi dengan menunggu beberapa detik setelah terkoneksi dan sebelum mengirim data. Referensi Arduino Nano Board Arduino Nano 3.0 with ATmega328","title":"Mengenal Arduino Nano"},{"location":"papan/mengenal-arduino-nano/#mengenal-arduino-nano","text":"Papan pengembangan elektronika mikrokontroler yang diberi nama Arduino ini memiliki banyak sekali turunannya. Baik itu yang diturunkan langsung dari pihak Arduino sendiri atau pihak ketiga yang ikut mengembangkan papan Arduino. Hal ini karena Arduino bersifat Open Source Hardware (OSH), karena sifatnya yang terbuka ini maka membuat para pengembang tidak perlu takut dengan Hak Atas Kekayaan Intelektual. Siapapun dapat membangun papan Arduino dengan versi sendiri dan disesuaikan dengan kebutuhan sendiri atau bahkan disesuaikan dengan dana yang dimiliki, namun tetap bekerja normal layaknya papan Arduino aslinya. Salah satu papan Arduino yang dikembangkan pihak ke tiga dan dapat diterima oleh pasar dengan baik adalah Arduino Nano. Seperti apa Arduino Nano? Arduino Nano adalah salah satu papan pengembangan mikrokontoler yang berukuran kecil, lengkap dan mendukung penggunaan breadboard. Arduino Nano diciptakan dengan basis mikrokontroler ATmega328 (untuk Arduino Nano versi 3.x) atau ATmega 168(untuk Arduino versi 2.x). Arduino Nano kurang lebih memiliki fungsi yang sama dengan Arduino Duemilanove, tetapi dalam paket yang berbeda. Arduino Nano tidak menyertakan colokan DC berjenis Barrel Jack, dan dihubungkan ke komputer menggunakan port USB Mini-B. Arduino Nano dirancang dan diproduksi oleh perusahaan Gravitech . Gambar 1. Arduino Nano Depan Gambar 2. Arduino Nano Belakang","title":"Mengenal Arduino Nano"},{"location":"papan/mengenal-arduino-nano/#skema-dan-desain","text":"Karena Arduino Nano dibuat oleh Gravitech maka dibawah ini ada dua lampiran file tentang skema Arduino Nano. Yang keduanya identik, baik yang berasal dari situs Arduino maupun dari situs Gravitech. Unduh Skema (PDF) Arduino Nano versi 3.0 (ATmega328) : skema dari Arduino dan skema dari Gravitech Unduh Skema (EagleCAD) Arduino Nano versi 3.0 (ATmega328): skema dari Arduino dan skema dari Gravitech Unduh Skema (PDF) Arduino Nano versi 2.3 (ATmega168) : skema PDF , skema EagleCAD Catatan : Jika anda menggunakan EagleCAD versi gratis maka tidak bisa menangani layer lebih dari 2, sedangkan Arduino Nano versi 2.3 terdiri dari 4 lapisan (layer).","title":"Skema dan Desain"},{"location":"papan/mengenal-arduino-nano/#spesifikasi","text":"Dibawah ini spesifikasi dari Arduino Nano: Info Spesifikasi Mikrokontroler Atmel ATmega168 atau ATmega328 Tegangan Operasi 5V Input Voltage (disarankan) 7-12V Input Voltage (limit) 6-20V Pin Digital I/O 14 (6 pin digunakan sebagai output PWM) Pins Input Analog 8 Arus DC per pin I/O 40 mA Flash Memory 16KB (ATmega168) atau 32KB (ATmega328) 2KB digunakan oleh Bootloader SRAM 1 KB (ATmega168) atau 2 KB (ATmega328) EEPROM 512 byte (ATmega168) atau 1KB (ATmega328) Clock Speed 16 MHz Ukuran 1.85cm x 4.3cm","title":"Spesifikasi"},{"location":"papan/mengenal-arduino-nano/#sumber-daya","text":"Arduino Nano dapat diaktifkan melalui koneksi USB Mini-B, atau melalui catu daya eksternal dengan tegangan belum teregulasi antara 6-20 Volt yang dihubungkan melalui pin 30 atau pin VIN, atau melalui catu daya eksternal dengan tegangan teregulasi 5 volt melalui pin 27 atau pin 5V. Sumber daya akan secara otomatis dipilih dari sumber tegangan yang lebih tinggi. Chip FTDI FT232L pada Arduino Nano akan aktif apabila memperoleh daya melalui USB, ketika Arduino Nano diberikan daya dari luar (Non-USB) maka Chip FTDI tidak aktif dan pin 3.3V pun tidak tersedia (tidak mengeluarkan tegangan), sedangkan LED TX dan RX pun berkedip apabila pin digital 0 dan 1 berada pada posisi HIGH.","title":"Sumber Daya"},{"location":"papan/mengenal-arduino-nano/#pemetaan-pin","text":"Dibawah ini pemetaan pin ATmega168 pada Arduino Nano. Gambar 3. Pemetaan Pin ATmega168 Perhatikan pemetaan antara pin Arduino Nano dan port ATmega168. Pemetaan untuk ATmega8, ATmega168, dan ATmega328 sangat identik atau sama persis. Gambar 4. Pin Layout Arduino Nano","title":"Pemetaan Pin"},{"location":"papan/mengenal-arduino-nano/#tabel-pemetaan","text":"No Pin ATmega328 Nama Pin ATmega328 No Pin Nano Peta Pin Nano 1 PD3 (PCINT19/OCB2B/INT1) 6 Digital Pin 3 (PWM) 2 PD4 (PCINT20/XCK/T0) 7 Digital Pin 4 3 GND 4 GND 4 VCC 27 VCC 5 GND 4 GND 6 VCC 27 VCC 7 PB6 (PCINT6/XTAL1/TOASC1) - - 8 PB7 (PCINT7/XTAL2/TOASC2) - - 9 PD5 (PCINT21/OC0B/T1) 8 Digital Pin 5 (PWM) 10 PD6 (PCINT22/OC0A/AIN0) 9 Digital Pin 6 (PWM) 11 PD7 (PCINT23/AIN1) 10 Digital Pin 7 12 PB0 (PCINT0/CLK0/ICP1) 11 Digital Pin 8 13 PB1 (PCINT1/OC1A) 13 Digital Pin 9 (PWM) 14 PB2 (PCINT2/SS/OC1B) 13 Digital Pin 10 (PWM - SS) 15 PB3 (PCINT3/OC2A/MOSI) 14 Digital Pin 11 (PWM - MOSI) 16 PB4 (PCINT4/MISO) 15 Digital Pin 12 (MISO) 17 PB5 (PCINT5/SCK) 16 Digital Pin 13 (SCK) 18 AVCC 27 VCC 19 ADC6 25 Analog Input 6 20 AREF 18 AREF 21 GND 29 GND 22 ADC7 26 Analog Input 7 23 PC0 (PCINT8/ADC0) 19 Analog Input 0 24 PC1 (PCINT9/ADC1) 20 Analog Input 1 25 PC2 (PCINT10/ADC2) 21 Analog Input 2 26 PC3 (PCINT11/ADC3) 22 Analog Input 3 27 PC4 (PCINT12/ADC4/SDA) 24 Analog Input 4 (SDA) 28 PC5 (PCINT13/ADC5/SCL) 25 Analog Input 5 (SCL) 29 PC6 (PCINT14/RESET) 18 RESET 30 PD0 (PCINT16/RXD) 2 Digital Pin 0 (RX) 31 PD1 (PCINT17/TXD) 1 Digital Pin 1 (TX) 32 PD2 (PCINT18/INT0) 5 Digital Pin 2","title":"Tabel Pemetaan"},{"location":"papan/mengenal-arduino-nano/#memory","text":"ATmega168 memiliki 16 KB flash memory untuk menyimpan kode (2 KB digunakan untuk bootloader); Sedangkan ATmega328 memiliki flash memory sebesar 32 KB, (juga dengan 2 KB digunakan untuk bootloader). ATmega168 memiliki 1 KB memory pada SRAM dan 512 byte pada EEPROM (yang dapat dibaca dan ditulis dengan perpustakaan EEPROM); Sedangkan ATmega328 memiliki 2 KB memory pada SRAM dan 1 KB pada EEPROM.","title":"Memory"},{"location":"papan/mengenal-arduino-nano/#input-dan-output","text":"Masing-masing dari 14 pin digital pada Arduino Nano dapat digunakan sebagai input atau output, dengan menggunakan fungsi pinMode() , digitalWrite() , dan digitalRead() . Semua pin beroperasi pada tegangan 5 volt. Setiap pin dapat memberikan atau menerima arus maksimum 40 mA dan memiliki resistor pull-up internal (yang terputus secara default) sebesar 20-50 KOhm. Selain itu beberapa pin memiliki fungsi khusus, yaitu: Serial : 0 (RX) dan 1 (TX). Digunakan untuk menerima (RX) dan mengirimkan (TX) TTL data serial. Pin ini terhubung ke pin yang sesuai dari chip FTDI USB-to-TTL Serial. External Interrupt (Interupsi Eksternal): Pin 2 dan pin 3 ini dapat dikonfigurasi untuk memicu sebuah interupsi pada nilai yang rendah, meningkat atau menurun, atau perubahan nilai. PWM : Pin 3, 5, 6, 9, 10, dan 11. Menyediakan output PWM 8-bit dengan fungsi analogWrite() . Jika pada jenis papan berukuran lebih besar (misal: Arduino Uno ), pin PWM ini diberi simbol tilde atau \"~\" sedangkan pada Arduino Nano diberi tanda titik. SPI : Pin 10 (SS), 11 (MOSI), 12 (MISO), 13 (SCK). Pin ini mendukung komunikasi SPI. Sebenarnya komunikasi SPI ini tersedia pada hardware, tapi untuk saat belum didukung dalam bahasa Arduino. LED : Pin 13. Tersedia secara built-in pada papan Arduino Nano. LED terhubung ke pin digital 13. Ketika pin diset bernilai HIGH, maka LED menyala, dan ketika pin diset bernilai LOW, maka LED padam. Arduino Nano memiliki 8 pin sebagai input analog, diberi label A0 sampai dengan A7, yang masing-masing menyediakan resolusi 10 bit (yaitu 1024 nilai yang berbeda). Secara default pin ini dapat diukur/diatur dari mulai Ground sampai dengan 5 Volt, juga memungkinkan untuk mengubah titik jangkauan tertinggi atau terendah mereka menggunakan fungsi analogReference() . Pin Analog 6 dan 7 tidak dapat digunakan sebagai pin digital. Selain itu juga, beberapa pin memiliki fungsi yang dikhususkan, yaitu: I2C : Pin A4 (SDA) dan pin A5 (SCL). Yang mendukung komunikasi I2C (TWI) menggunakan perpustakaan Wire. Masih ada beberapa pin lainnya pada Arduino Nano, yaitu: AREF : Referensi tegangan untuk input analog. Digunakan dengan fungsi analogReference() . RESET : Jalur LOW ini digunakan untuk me-reset (menghidupkan ulang) mikrokontroler. Biasanya digunakan untuk menambahkan tombol reset pada shield yang menghalangi papan utama Arduino.","title":"Input dan Output"},{"location":"papan/mengenal-arduino-nano/#komunikasi","text":"Arduino Nano memiliki sejumlah fasilitas untuk berkomunikasi dengan komputer, dengan Arduino lain, atau dengan mikrokontroler lainnya. ATmega168 dan ATmega328 menyediakan komunikasi serial UART TTL (5 Volt), yang tersedia pada pin digital 0 (RX) dan pin 1 (TX). Sebuah chip FTDI FT232RL yang terdapat pada papan Arduino Nano digunakan sebagai media komunikasi serial melalui USB dan driver FTDI (tersedia pada software Arduino IDE) yang akan menyediakan COM Port Virtual (pada Device komputer) untuk berkomunikasi dengan perangkat lunak pada komputer. Perangkat lunak Arduino termasuk didalamnya serial monitor memungkinkan data tekstual sederhana dikirim ke dan dari papan Arduino. LED RX dan TX yang tersedia pada papan akan berkedip ketika data sedang dikirim atau diterima melalui chip FTDI dan koneksi USB yang terhubung melalui USB komputer (tetapi tidak untuk komunikasi serial pada pin 0 dan 1). Sebuah perpustakaan SoftwareSerial memungkinkan komunikasi serial pada beberapa pin digital Nano. ATmega168 dan ATmega328 juga mendukung komunikasi I2C (TWI) dan SPI. Perangkat lunak Arduino termasuk perpustakaan Wire digunakan untuk menyederhanakan penggunaan bus I2C. Untuk komunikasi SPI, silakan lihat datasheet ATmega168 atau ATmega328.","title":"Komunikasi"},{"location":"papan/mengenal-arduino-nano/#pemrograman","text":"Arduino Nano dapat diprogram dengan software Arduino ( Unduh perangkat lunak Arduino ). Pilih \"Arduino Diecimila, Duemilanove, atau Nano w/ ATmega168 \" or \"Arduino Duemilanove atau Nano w/ ATmega328\" melalui menu Tools Board (sesuaikan dengan jenis mikrokontroler yang anda miliki). ATmega168 dan ATmega328 pada Arduino Nano sudah dipaket preburned dengan bootloader yang memungkinkan Anda untuk meng-upload kode baru tanpa menggunakan programer hardware eksternal. Hal ini karena komunikasi yang terjadi menggunakan protokol asli STK500. Anda juga dapat melewati (bypass) bootloader dan program mikrokontroler melalui pin header ICSP (In-Circuit Serial Programming) menggunakan Arduino ISP atau yang sejenis.","title":"Pemrograman"},{"location":"papan/mengenal-arduino-nano/#reset-software-otomatis","text":"Daripada menekan tombol reset sebelum upload, Arduino Nano didesain dengan cara yang memungkinkan Anda untuk me-reset melalui perangkat lunak yang berjalan pada komputer yang terhubung. Salah satu jalur kontrol hardware (DTR) mengalir dari FT232RL dan terhubung ke jalur reset dari ATmega168 atau ATmega328 melalui kapasitor 100 nanofarad. Bila jalur ini di-set rendah/low, jalur reset drop cukup lama untuk me-reset chip. Perangkat lunak Arduino menggunakan kemampuan ini untuk memungkinkan Anda meng-upload kode dengan hanya menekan tombol upload pada perangkat lunak Arduino. Ini berarti bahwa bootloader memiliki rentang waktu yang lebih pendek, seperti menurunkan DTR dapat terkoordinasi (berjalan beriringan) dengan dimulainya upload. Pengaturan ini juga memiliki implikasi lain. Ketika Arduino Nano terhubung dengan komputer yang menggunakan sistem operasi Mac OS X atau Linux, papan Arduino akan di-reset setiap kali dihubungkan dengan software komputer (melalui USB). Dan setengah detik kemudian atau lebih, bootloader berjalan pada papan Arduino Nano. Proses reset melalui program ini digunakan untuk mengabaikan data yang cacat (yaitu apapun selain meng-upload kode baru), ia akan memotong dan membuang beberapa byte pertama dari data yang dikirim ke papan setelah sambungan terbuka. Jika sebuah sketsa dijalankan pada papan untuk menerima satu kali konfigurasi atau menerima data lain ketika pertama kali dijalankan, pastikan bahwa perangkat lunak diberikan waktu untuk berkomunikasi dengan menunggu beberapa detik setelah terkoneksi dan sebelum mengirim data.","title":"Reset (Software) Otomatis"},{"location":"papan/mengenal-arduino-nano/#referensi","text":"Arduino Nano Board Arduino Nano 3.0 with ATmega328","title":"Referensi"},{"location":"papan/mengenal-arduino-uno/","text":"Mengenal Arduino Uno Arduino Uno adalah papan mikrokontroler berbasis ATmega328 (datasheet) . Arduino Uno memiliki 14 digital pin input/output, dimana 6 pin digunakan sebagai output PWM, 6 pin input analog, 16 MHz resonator keramik, koneksi USB, jack catu daya eksternal, header ICSP, dan tombol reset. Ini semua berisi hal-hal yang diperlukan untuk mendukung mikrokontroler; sederhana saja, hanya dengan menghubungkannya ke komputer dengan kabel USB atau sumber tegangan dengan adaptor AC-DC dan atau baterai untuk memulai menggunakan papan arduino. Arduino Uno R3 berbeda dari semua papan Uno sebelumnya yang sudah tidak menggunakan chip driver FTDI USB-to-serial. Sekarang, Arduino Uno menggunakan fitur Atmega16U2 (Atmega8U2 sampai dengan versi R2) yang diprogram sebagai konverter USB-to-serial. Arduino Uno Revisi 2 memiliki resistor pulling untuk 8U2 dari jalur HWB ke ground, sehingga lebih mudah untuk dimasukkan ke dalam mode DFU. Arduino Uno Revisi 3 memiliki fitur-fitur baru berikut: 1.0 pinout: ditambahkan pin SDA dan SCL yang dekat dengan pin AREF dan dua pin baru lainnya yang ditempatkan dekat dengan pin RESET, sedangkan IOREF digunakan sebagai perisai untuk beradaptasi dengan tegangan yang tersedia pada papan. Kedepannya, perisai akan dibuat kompatibel dengan dua jenis papan yang menggunakan AVR yang beroperasi pada tegangan 5V dan dengan Arduino Due yang beroperasi pada tegangan 3.3V. Sedangkan 2 pin tidak terhubung, yang disediakan untuk tujuan masa depan. Sirkuit RESET handal. Atmega 16U2 menggantikan 8U2. \"Uno\" berarti satu yang diambil dari bahasa Italia dan penggunaan nama ini untuk menandai peluncuran Arduino 1.0. Uno dan versi 1.0 akan menjadi versi referensi Arduino, yang akan terus berkembang. Uno adalah yang terbaru dalam serangkaian papan USB Arduino, dan digunakan sebagai model referensi untuk platform Arduino. Ringkasan Info Spesifikasi Mikrokontroler ATmega328 Tegangan Operasi 5 Volt Input Voltage (disarankan) 7 - 12 Volt Input Voltage (batas akhir) 6 - 20 Volt Digital I/O Pin 14 (6 pin sebagai output PWM) Analog Input Pin 6 Arus DC per pin I/O 40 mA Arus DC untuk pin 3.3V 50 mA Flash Memory 32 KB (ATmega328) 0,5 KB untuk bootloader SRAM 2 KB (ATmega328) EEPROM 1 KB (ATmega328) Clock Speed 16 MHz Skema Referensi Desain File EAGLE: Arduino-uno-Rev3-referensi-design.zip ( CATATAN: hanya mampu dibuka dengan Eagle 6.0 dan atau yang lebih baru ) Skema: Arduino-uno-Rev3-schematic.pdf CATATAN : Sebagai referensi desain, Arduino dapat menggunakan ATmega8, 168, atau 328, model saat ini menggunakan ATmega328, tapi ATmega8 digunakan dalam skema untuk referensi. Konfigurasi pin identik pada ketiga jenis prosesor tersebut. Sumber Daya (Tegangan) Arduino Uno dapat diaktifkan melalui koneksi USB atau dengan catu daya eksternal. Sumber daya akan dipilih secara otomatis oleh Arduino. Sumber daya eksternal (non-USB) dapat berasal baik dari adaptor AC-DC atau baterai. Adaptor dapat dihubungkan dengan mencolokkan steker 2,1 mm yang bagian tengahnya terminal positif ke ke jack sumber tegangan pada papan. Jika tegangan berasal dari baterai dapat langsung dihubungkan melalui header pin Gnd dan pin Vin dari konektor POWER. Papan Arduino Uno dapat beroperasi dengan pasokan daya eksternal 6 Volt sampai 20 volt. Jika diberi tegangan kurang dari 7 Volt, maka, pin 5 Volt mungkin akan menghasilkan tegangan kurang dari 5 Volt dan ini akan membuat papan menjadi tidak stabil. Jika sumber tegangan menggunakan lebih dari 12 Volt, regulator tegangan akan mengalami panas berlebihan dan bisa merusak papan. Rentang sumber tegangan yang dianjurkan adalah 7 Volt sampai 12 Volt. Pin tegangan yang tersedia pada papan Arduino adalah sebagai berikut: VIN : Adalah input tegangan untuk papan Arduino ketika menggunakan sumber daya eksternal (sebagai 'saingan' tegangan 5 Volt dari koneksi USB atau sumber daya ter-regulator lainnya). Anda dapat memberikan tegangan melalui pin ini, atau jika memasok tegangan untuk papan melalui jack power, kita bisa mengakses/mengambil tegangan melalui pin ini. 5V : Sebuah pin yang mengeluarkan tegangan ter-regulator 5 Volt, dari pin ini tegangan sudah diatur (ter-regulator) dari regulator yang tersedia (built-in) pada papan. Arduino dapat diaktifkan dengan sumber daya baik berasal dari jack power DC (7-12 Volt), konektor USB (5 Volt), atau pin VIN pada board (7-12 Volt). Memberikan tegangan melalui pin 5V atau 3.3V secara langsung tanpa melewati regulator dapat merusak papan Arduino. 3V3 : Sebuah pin yang menghasilkan tegangan 3,3 Volt. Tegangan ini dihasilkan oleh regulator yang terdapat pada papan (on-board). Arus maksimum yang dihasilkan adalah 50 mA. GND : Pin Ground atau Massa. IOREF : Pin ini pada papan Arduino berfungsi untuk memberikan referensi tegangan yang beroperasi pada mikrokontroler. Sebuah perisai (shield) dikonfigurasi dengan benar untuk dapat membaca pin tegangan IOREF dan memilih sumber daya yang tepat atau mengaktifkan penerjemah tegangan (voltage translator) pada output untuk bekerja pada tegangan 5 Volt atau 3,3 Volt. Memori Prosessor ATmega328 memiliki memori sebesar 32 KB yang mana sebesar 0,5 KB digunakan untuk menyimpan file bootloader. ATmega328 juga memiliki 2 KB SRAM dan 1 KB EEPROM (yang dapat dibaca dan ditulis dengan perpustakaan EEPROM). Input dan Output Masing-masing dari 14 pin digital pada Arduino Uno dapat digunakan sebagai input atau output, dengan menggunakan fungsi pinMode() , digitalWrite() , dan digitalRead(). Semua pin beroperasi pada tegangan 5 volt. Setiap pin dapat memberikan atau menerima arus maksimum 40 mA dan memiliki resistor pull-up internal (terputus secara default) sebesar 20-50 kOhm. Selain itu beberapa pin memiliki fungsi khusus, yaitu: Serial : 0 (RX) dan 1 (TX). Digunakan untuk menerima (RX) dan mengirimkan (TX) TTL data serial. Pin ini terhubung ke pin korespondensi dari chip ATmega8U2 Serial USB-to-TTL. External Interrupt (Interupsi Eksternal): Pin 2 dan pin 3 ini dapat dikonfigurasi untuk memicu sebuah interupsi pada nilai yang rendah, meningkat atau menurun, atau perubahan nilai. Baca rincian fungsi attachInterrupt() (belum diterbitkan saat artikel ini ditulis). PWM : Pin 3, 5, 6, 9, 10, dan 11. Menyediakan output PWM 8-bit dengan fungsi analogWrite(). SPI : Pin 10 (SS), 11 (MOSI), 12 (MISO), 13 (SCK). Pin ini mendukung komunikasi SPI menggunakan perpustakaan SPI. LED : Pin 13. Tersedia secara built-in pada papan Arduino Uno. LED terhubung ke pin digital 13. Ketika pin diset bernilai HIGH, maka LED menyala, dan ketika pin diset bernilai LOW, maka LED padam. Arduino Uno memiliki 6 pin sebagai input analog, diberi label A0 sampai dengan A5, yang masing-masing menyediakan resolusi 10 bit (yaitu 1024 nilai yang berbeda). Secara default pin ini dapat diukur/diatur dari mulai Ground sampai dengan 5 Volt, juga memungkinkan untuk mengubah titik jangkauan tertinggi atau terendah mereka menggunakan pin AREF dan fungsi analogReference(). Selain itu juga, beberapa pin memiliki fungsi yang dikhususkan, yaitu: TWI : Pin A4 atau SDA dan pin A5 atau SCL. Yang mendukung komunikasi TWI menggunakan perpustakaan Wire. Masih ada beberapa pin lainnya pada Arduino Uno, yaitu: AREF : Referensi tegangan untuk input analog. Digunakan dengan fungsi analogReference(). RESET : Jalur LOW ini digunakan untuk me-reset (menghidupkan ulang) mikrokontroler. Jalur ini biasanya digunakan untuk menambahkan tombol reset pada shield yang menghalangi papan utama Arduino. Perhatikan pemetaan antara pin Arduino dan port ATmega328. Pemetaan untuk ATmega8, 168, dan 328 sangat identik. Komunikasi Arduino Uno memiliki sejumlah fasilitas untuk berkomunikasi dengan komputer, dengan Arduino lain, atau dengan mikrokontroler lainnya. ATmega328 menyediakan komunikasi serial UART TTL (5 Volt), yang tersedia pada pin digital 0 (RX) dan pin 1 (TX). Sebuah chip ATmega16U2 yang terdapat pada papan digunakan sebagai media komunikasi serial melalui USB dan muncul sebagai COM Port Virtual (pada Device komputer) untuk berkomunikasi dengan perangkat lunak pada komputer. Firmware 16U2 menggunakan driver standar USB COM, dan tidak membutuhkan driver eksternal. Namun pada sistem operasi Windows, file .inf masih dibutuhkan. Perangkat lunak Arduino termasuk didalamnya serial monitor memungkinkan data tekstual sederhana dikirim ke dan dari papan Arduino. LED RX dan TX yang tersedia pada papan akan berkedip ketika data sedang dikirim atau diterima melalui chip USB-to-serial yang terhubung melalui USB komputer (tetapi tidak untuk komunikasi serial seperti pada pin 0 dan 1). Sebuah perpustakaan SoftwareSerial memungkinkan komunikasi serial pada beberapa pin digital Uno. ATmega328 juga mendukung komunikasi I2C (TWI) dan SPI. Perangkat lunak Arduino termasuk perpustakaan Wire digunakan untuk menyederhanakan penggunaan bus I2C. Untuk komunikasi SPI, menggunakan perpustakaan SPI. Pemrograman Arduino Uno dapat diprogram dengan software Arduino (Unduh perangkat lunak Arduino) . (Mengenai pemahasan lebih rinci tentang perangkat lunak Arduino akan dibahas pada artikel terpisah). ATmega328 pada Arduino Uno sudah tersedia preburned dengan bootloader (preburned dan bootloader apa bahasa Indonesianya?) yang memungkinkan Anda untuk meng-upload kode baru tanpa menggunakan programmer hardware eksternal. Hal ini karena komunikasi yang terjadi menggunakan protokol asli STK500. Anda juga dapat melewati (bypass) bootloader dan program mikrokontroler melalui pin header ICSP (In-Circuit Serial Programming). Chip ATmega16U2 (atau 8U2 pada board Rev. 1 dan Rev. 2) source code firmware tersedia. ATmega16U2/8U2 dapat dimuat dengan bootloader DFU, yang dapat diaktifkan melalui: Pada papan Revisi 1: Menghubungkan jumper solder di bagian belakang papan (dekat dengan peta Italia) dan kemudian akan me-reset 8U2. Pada papan Revisi 2: Ada resistor yang menghubungkan jalur HWB 8U2/16U2 ke ground, sehingga lebih mudah untuk dimasukkan ke dalam mode DFU. Kemudian Anda dapat menggunakan Atmel FLIP software (sistem operasi Windows) atau DFU programmer (sistem operasi Mac OS X dan Linux) untuk memuat firmware baru. Atau Anda dapat menggunakan pin header ISP dengan programmer eksternal (overwrite DFU bootloader). Reset (Software) Otomatis Daripada menekan tombol reset sebelum upload, Arduino Uno didesain dengan cara yang memungkinkan Anda untuk me-reset melalui perangkat lunak yang berjalan pada komputer yang terhubung. Salah satu jalur kontrol hardware (DTR) mengalir dari ATmega8U2/16U2 dan terhubung ke jalur reset dari ATmega328 melalui kapasitor 100 nanofarad. Bila jalur ini di-set rendah/low, jalur reset drop cukup lama untuk me-reset chip. Perangkat lunak Arduino menggunakan kemampuan ini untuk memungkinkan Anda meng-upload kode dengan hanya menekan tombol upload pada perangkat lunak Arduino. Ini berarti bahwa bootloader memiliki rentang waktu yang lebih pendek, seperti menurunkan DTR dapat terkoordinasi (berjalan beriringan) dengan dimulainya upload. Pengaturan ini juga memiliki implikasi lain. Ketika Arduino Uno terhubung dengan komputer yang menggunakan sistem operasi Mac OS X atau Linux, papan Arduino akan di-reset setiap kali dihubungkan dengan software komputer (melalui USB). Dan setengah detik kemudian atau lebih, bootloader berjalan pada papan Arduino Uno. Proses reset melalui program ini digunakan untuk mengabaikan data yang cacat (yaitu apapun selain meng-upload kode baru), ia akan memotong dan membuang beberapa byte pertama dari data yang dikirim ke papan setelah sambungan dibuka. Jika sebuah sketsa dijalankan pada papan untuk menerima satu kali konfigurasi atau menerima data lain ketika pertama kali dijalankan, pastikan bahwa perangkat lunak diberikan waktu untuk berkomunikasi dengan menunggu satu detik setelah terkoneksi dan sebelum mengirim data. Arduino Uno memiliki trek jalur yang dapat dipotong untuk menonaktifkan fungsi auto-reset. Pad di kedua sisi jalur dapat hubungkan dengan disolder untuk mengaktifkan kembali fungsi auto-reset. Pad berlabel \"RESET-EN\". Anda juga dapat menonaktifkan auto-reset dengan menghubungkan resistor 110 ohm dari 5V ke jalur reset. Perlindungan Beban Berlebih pada USB Arduino Uno memiliki polyfuse reset yang melindungi port USB komputer Anda dari hubungan singkat dan arus lebih. Meskipun pada dasarnya komputer telah memiliki perlindungan internal pada port USB mereka sendiri, sekring memberikan lapisan perlindungan tambahan. Jika arus lebih dari 500 mA dihubungkan ke port USB, sekring secara otomatis akan memutuskan sambungan sampai hubungan singkat atau overload dihapus/dibuang. Karakteristik Fisik Panjang dan lebar maksimum PCB Arduino Uno adalah 2.7 x 2.1 inch (6,8 x 5,3 cm), dengan konektor USB dan jack power menonjol melampaui batas dimensi. Empat lubang sekrup memungkinkan papan terpasang pada suatu permukaan atau wadah. Perhatikan bahwa jarak antara pin digital 7 dan 8 adalah 160 mil (0.16\"), tidak seperti pin lainnya dengan kelipatan genap berjarak 100 mil. Daftar Pustaka Arduino Uno (Halaman diakses pada tanggal 5 Agustus 2014, 06:51 AM)","title":"Mengenal Arduino Uno"},{"location":"papan/mengenal-arduino-uno/#mengenal-arduino-uno","text":"Arduino Uno adalah papan mikrokontroler berbasis ATmega328 (datasheet) . Arduino Uno memiliki 14 digital pin input/output, dimana 6 pin digunakan sebagai output PWM, 6 pin input analog, 16 MHz resonator keramik, koneksi USB, jack catu daya eksternal, header ICSP, dan tombol reset. Ini semua berisi hal-hal yang diperlukan untuk mendukung mikrokontroler; sederhana saja, hanya dengan menghubungkannya ke komputer dengan kabel USB atau sumber tegangan dengan adaptor AC-DC dan atau baterai untuk memulai menggunakan papan arduino. Arduino Uno R3 berbeda dari semua papan Uno sebelumnya yang sudah tidak menggunakan chip driver FTDI USB-to-serial. Sekarang, Arduino Uno menggunakan fitur Atmega16U2 (Atmega8U2 sampai dengan versi R2) yang diprogram sebagai konverter USB-to-serial. Arduino Uno Revisi 2 memiliki resistor pulling untuk 8U2 dari jalur HWB ke ground, sehingga lebih mudah untuk dimasukkan ke dalam mode DFU. Arduino Uno Revisi 3 memiliki fitur-fitur baru berikut: 1.0 pinout: ditambahkan pin SDA dan SCL yang dekat dengan pin AREF dan dua pin baru lainnya yang ditempatkan dekat dengan pin RESET, sedangkan IOREF digunakan sebagai perisai untuk beradaptasi dengan tegangan yang tersedia pada papan. Kedepannya, perisai akan dibuat kompatibel dengan dua jenis papan yang menggunakan AVR yang beroperasi pada tegangan 5V dan dengan Arduino Due yang beroperasi pada tegangan 3.3V. Sedangkan 2 pin tidak terhubung, yang disediakan untuk tujuan masa depan. Sirkuit RESET handal. Atmega 16U2 menggantikan 8U2. \"Uno\" berarti satu yang diambil dari bahasa Italia dan penggunaan nama ini untuk menandai peluncuran Arduino 1.0. Uno dan versi 1.0 akan menjadi versi referensi Arduino, yang akan terus berkembang. Uno adalah yang terbaru dalam serangkaian papan USB Arduino, dan digunakan sebagai model referensi untuk platform Arduino.","title":"Mengenal Arduino Uno"},{"location":"papan/mengenal-arduino-uno/#ringkasan","text":"Info Spesifikasi Mikrokontroler ATmega328 Tegangan Operasi 5 Volt Input Voltage (disarankan) 7 - 12 Volt Input Voltage (batas akhir) 6 - 20 Volt Digital I/O Pin 14 (6 pin sebagai output PWM) Analog Input Pin 6 Arus DC per pin I/O 40 mA Arus DC untuk pin 3.3V 50 mA Flash Memory 32 KB (ATmega328) 0,5 KB untuk bootloader SRAM 2 KB (ATmega328) EEPROM 1 KB (ATmega328) Clock Speed 16 MHz","title":"Ringkasan"},{"location":"papan/mengenal-arduino-uno/#skema-referensi-desain","text":"File EAGLE: Arduino-uno-Rev3-referensi-design.zip ( CATATAN: hanya mampu dibuka dengan Eagle 6.0 dan atau yang lebih baru ) Skema: Arduino-uno-Rev3-schematic.pdf CATATAN : Sebagai referensi desain, Arduino dapat menggunakan ATmega8, 168, atau 328, model saat ini menggunakan ATmega328, tapi ATmega8 digunakan dalam skema untuk referensi. Konfigurasi pin identik pada ketiga jenis prosesor tersebut.","title":"Skema &amp; Referensi Desain"},{"location":"papan/mengenal-arduino-uno/#sumber-daya-tegangan","text":"Arduino Uno dapat diaktifkan melalui koneksi USB atau dengan catu daya eksternal. Sumber daya akan dipilih secara otomatis oleh Arduino. Sumber daya eksternal (non-USB) dapat berasal baik dari adaptor AC-DC atau baterai. Adaptor dapat dihubungkan dengan mencolokkan steker 2,1 mm yang bagian tengahnya terminal positif ke ke jack sumber tegangan pada papan. Jika tegangan berasal dari baterai dapat langsung dihubungkan melalui header pin Gnd dan pin Vin dari konektor POWER. Papan Arduino Uno dapat beroperasi dengan pasokan daya eksternal 6 Volt sampai 20 volt. Jika diberi tegangan kurang dari 7 Volt, maka, pin 5 Volt mungkin akan menghasilkan tegangan kurang dari 5 Volt dan ini akan membuat papan menjadi tidak stabil. Jika sumber tegangan menggunakan lebih dari 12 Volt, regulator tegangan akan mengalami panas berlebihan dan bisa merusak papan. Rentang sumber tegangan yang dianjurkan adalah 7 Volt sampai 12 Volt. Pin tegangan yang tersedia pada papan Arduino adalah sebagai berikut: VIN : Adalah input tegangan untuk papan Arduino ketika menggunakan sumber daya eksternal (sebagai 'saingan' tegangan 5 Volt dari koneksi USB atau sumber daya ter-regulator lainnya). Anda dapat memberikan tegangan melalui pin ini, atau jika memasok tegangan untuk papan melalui jack power, kita bisa mengakses/mengambil tegangan melalui pin ini. 5V : Sebuah pin yang mengeluarkan tegangan ter-regulator 5 Volt, dari pin ini tegangan sudah diatur (ter-regulator) dari regulator yang tersedia (built-in) pada papan. Arduino dapat diaktifkan dengan sumber daya baik berasal dari jack power DC (7-12 Volt), konektor USB (5 Volt), atau pin VIN pada board (7-12 Volt). Memberikan tegangan melalui pin 5V atau 3.3V secara langsung tanpa melewati regulator dapat merusak papan Arduino. 3V3 : Sebuah pin yang menghasilkan tegangan 3,3 Volt. Tegangan ini dihasilkan oleh regulator yang terdapat pada papan (on-board). Arus maksimum yang dihasilkan adalah 50 mA. GND : Pin Ground atau Massa. IOREF : Pin ini pada papan Arduino berfungsi untuk memberikan referensi tegangan yang beroperasi pada mikrokontroler. Sebuah perisai (shield) dikonfigurasi dengan benar untuk dapat membaca pin tegangan IOREF dan memilih sumber daya yang tepat atau mengaktifkan penerjemah tegangan (voltage translator) pada output untuk bekerja pada tegangan 5 Volt atau 3,3 Volt.","title":"Sumber Daya (Tegangan)"},{"location":"papan/mengenal-arduino-uno/#memori","text":"Prosessor ATmega328 memiliki memori sebesar 32 KB yang mana sebesar 0,5 KB digunakan untuk menyimpan file bootloader. ATmega328 juga memiliki 2 KB SRAM dan 1 KB EEPROM (yang dapat dibaca dan ditulis dengan perpustakaan EEPROM).","title":"Memori"},{"location":"papan/mengenal-arduino-uno/#input-dan-output","text":"Masing-masing dari 14 pin digital pada Arduino Uno dapat digunakan sebagai input atau output, dengan menggunakan fungsi pinMode() , digitalWrite() , dan digitalRead(). Semua pin beroperasi pada tegangan 5 volt. Setiap pin dapat memberikan atau menerima arus maksimum 40 mA dan memiliki resistor pull-up internal (terputus secara default) sebesar 20-50 kOhm. Selain itu beberapa pin memiliki fungsi khusus, yaitu: Serial : 0 (RX) dan 1 (TX). Digunakan untuk menerima (RX) dan mengirimkan (TX) TTL data serial. Pin ini terhubung ke pin korespondensi dari chip ATmega8U2 Serial USB-to-TTL. External Interrupt (Interupsi Eksternal): Pin 2 dan pin 3 ini dapat dikonfigurasi untuk memicu sebuah interupsi pada nilai yang rendah, meningkat atau menurun, atau perubahan nilai. Baca rincian fungsi attachInterrupt() (belum diterbitkan saat artikel ini ditulis). PWM : Pin 3, 5, 6, 9, 10, dan 11. Menyediakan output PWM 8-bit dengan fungsi analogWrite(). SPI : Pin 10 (SS), 11 (MOSI), 12 (MISO), 13 (SCK). Pin ini mendukung komunikasi SPI menggunakan perpustakaan SPI. LED : Pin 13. Tersedia secara built-in pada papan Arduino Uno. LED terhubung ke pin digital 13. Ketika pin diset bernilai HIGH, maka LED menyala, dan ketika pin diset bernilai LOW, maka LED padam. Arduino Uno memiliki 6 pin sebagai input analog, diberi label A0 sampai dengan A5, yang masing-masing menyediakan resolusi 10 bit (yaitu 1024 nilai yang berbeda). Secara default pin ini dapat diukur/diatur dari mulai Ground sampai dengan 5 Volt, juga memungkinkan untuk mengubah titik jangkauan tertinggi atau terendah mereka menggunakan pin AREF dan fungsi analogReference(). Selain itu juga, beberapa pin memiliki fungsi yang dikhususkan, yaitu: TWI : Pin A4 atau SDA dan pin A5 atau SCL. Yang mendukung komunikasi TWI menggunakan perpustakaan Wire. Masih ada beberapa pin lainnya pada Arduino Uno, yaitu: AREF : Referensi tegangan untuk input analog. Digunakan dengan fungsi analogReference(). RESET : Jalur LOW ini digunakan untuk me-reset (menghidupkan ulang) mikrokontroler. Jalur ini biasanya digunakan untuk menambahkan tombol reset pada shield yang menghalangi papan utama Arduino. Perhatikan pemetaan antara pin Arduino dan port ATmega328. Pemetaan untuk ATmega8, 168, dan 328 sangat identik.","title":"Input dan Output"},{"location":"papan/mengenal-arduino-uno/#komunikasi","text":"Arduino Uno memiliki sejumlah fasilitas untuk berkomunikasi dengan komputer, dengan Arduino lain, atau dengan mikrokontroler lainnya. ATmega328 menyediakan komunikasi serial UART TTL (5 Volt), yang tersedia pada pin digital 0 (RX) dan pin 1 (TX). Sebuah chip ATmega16U2 yang terdapat pada papan digunakan sebagai media komunikasi serial melalui USB dan muncul sebagai COM Port Virtual (pada Device komputer) untuk berkomunikasi dengan perangkat lunak pada komputer. Firmware 16U2 menggunakan driver standar USB COM, dan tidak membutuhkan driver eksternal. Namun pada sistem operasi Windows, file .inf masih dibutuhkan. Perangkat lunak Arduino termasuk didalamnya serial monitor memungkinkan data tekstual sederhana dikirim ke dan dari papan Arduino. LED RX dan TX yang tersedia pada papan akan berkedip ketika data sedang dikirim atau diterima melalui chip USB-to-serial yang terhubung melalui USB komputer (tetapi tidak untuk komunikasi serial seperti pada pin 0 dan 1). Sebuah perpustakaan SoftwareSerial memungkinkan komunikasi serial pada beberapa pin digital Uno. ATmega328 juga mendukung komunikasi I2C (TWI) dan SPI. Perangkat lunak Arduino termasuk perpustakaan Wire digunakan untuk menyederhanakan penggunaan bus I2C. Untuk komunikasi SPI, menggunakan perpustakaan SPI.","title":"Komunikasi"},{"location":"papan/mengenal-arduino-uno/#pemrograman","text":"Arduino Uno dapat diprogram dengan software Arduino (Unduh perangkat lunak Arduino) . (Mengenai pemahasan lebih rinci tentang perangkat lunak Arduino akan dibahas pada artikel terpisah). ATmega328 pada Arduino Uno sudah tersedia preburned dengan bootloader (preburned dan bootloader apa bahasa Indonesianya?) yang memungkinkan Anda untuk meng-upload kode baru tanpa menggunakan programmer hardware eksternal. Hal ini karena komunikasi yang terjadi menggunakan protokol asli STK500. Anda juga dapat melewati (bypass) bootloader dan program mikrokontroler melalui pin header ICSP (In-Circuit Serial Programming). Chip ATmega16U2 (atau 8U2 pada board Rev. 1 dan Rev. 2) source code firmware tersedia. ATmega16U2/8U2 dapat dimuat dengan bootloader DFU, yang dapat diaktifkan melalui: Pada papan Revisi 1: Menghubungkan jumper solder di bagian belakang papan (dekat dengan peta Italia) dan kemudian akan me-reset 8U2. Pada papan Revisi 2: Ada resistor yang menghubungkan jalur HWB 8U2/16U2 ke ground, sehingga lebih mudah untuk dimasukkan ke dalam mode DFU. Kemudian Anda dapat menggunakan Atmel FLIP software (sistem operasi Windows) atau DFU programmer (sistem operasi Mac OS X dan Linux) untuk memuat firmware baru. Atau Anda dapat menggunakan pin header ISP dengan programmer eksternal (overwrite DFU bootloader).","title":"Pemrograman"},{"location":"papan/mengenal-arduino-uno/#reset-software-otomatis","text":"Daripada menekan tombol reset sebelum upload, Arduino Uno didesain dengan cara yang memungkinkan Anda untuk me-reset melalui perangkat lunak yang berjalan pada komputer yang terhubung. Salah satu jalur kontrol hardware (DTR) mengalir dari ATmega8U2/16U2 dan terhubung ke jalur reset dari ATmega328 melalui kapasitor 100 nanofarad. Bila jalur ini di-set rendah/low, jalur reset drop cukup lama untuk me-reset chip. Perangkat lunak Arduino menggunakan kemampuan ini untuk memungkinkan Anda meng-upload kode dengan hanya menekan tombol upload pada perangkat lunak Arduino. Ini berarti bahwa bootloader memiliki rentang waktu yang lebih pendek, seperti menurunkan DTR dapat terkoordinasi (berjalan beriringan) dengan dimulainya upload. Pengaturan ini juga memiliki implikasi lain. Ketika Arduino Uno terhubung dengan komputer yang menggunakan sistem operasi Mac OS X atau Linux, papan Arduino akan di-reset setiap kali dihubungkan dengan software komputer (melalui USB). Dan setengah detik kemudian atau lebih, bootloader berjalan pada papan Arduino Uno. Proses reset melalui program ini digunakan untuk mengabaikan data yang cacat (yaitu apapun selain meng-upload kode baru), ia akan memotong dan membuang beberapa byte pertama dari data yang dikirim ke papan setelah sambungan dibuka. Jika sebuah sketsa dijalankan pada papan untuk menerima satu kali konfigurasi atau menerima data lain ketika pertama kali dijalankan, pastikan bahwa perangkat lunak diberikan waktu untuk berkomunikasi dengan menunggu satu detik setelah terkoneksi dan sebelum mengirim data. Arduino Uno memiliki trek jalur yang dapat dipotong untuk menonaktifkan fungsi auto-reset. Pad di kedua sisi jalur dapat hubungkan dengan disolder untuk mengaktifkan kembali fungsi auto-reset. Pad berlabel \"RESET-EN\". Anda juga dapat menonaktifkan auto-reset dengan menghubungkan resistor 110 ohm dari 5V ke jalur reset.","title":"Reset (Software) Otomatis"},{"location":"papan/mengenal-arduino-uno/#perlindungan-beban-berlebih-pada-usb","text":"Arduino Uno memiliki polyfuse reset yang melindungi port USB komputer Anda dari hubungan singkat dan arus lebih. Meskipun pada dasarnya komputer telah memiliki perlindungan internal pada port USB mereka sendiri, sekring memberikan lapisan perlindungan tambahan. Jika arus lebih dari 500 mA dihubungkan ke port USB, sekring secara otomatis akan memutuskan sambungan sampai hubungan singkat atau overload dihapus/dibuang.","title":"Perlindungan Beban Berlebih pada USB"},{"location":"papan/mengenal-arduino-uno/#karakteristik-fisik","text":"Panjang dan lebar maksimum PCB Arduino Uno adalah 2.7 x 2.1 inch (6,8 x 5,3 cm), dengan konektor USB dan jack power menonjol melampaui batas dimensi. Empat lubang sekrup memungkinkan papan terpasang pada suatu permukaan atau wadah. Perhatikan bahwa jarak antara pin digital 7 dan 8 adalah 160 mil (0.16\"), tidak seperti pin lainnya dengan kelipatan genap berjarak 100 mil.","title":"Karakteristik Fisik"},{"location":"papan/mengenal-arduino-uno/#daftar-pustaka","text":"Arduino Uno (Halaman diakses pada tanggal 5 Agustus 2014, 06:51 AM)","title":"Daftar Pustaka"},{"location":"papan/mikrokontroler/","text":"Mengenal Mikrokontroler Memang cukup membingungkan ketika mendengar istilah Mikrokontroler dan Mikroprosesor. Bagi para pengguna yang masih awam kedua istilah diatas dianggap sama, bahkan ada yang menganggap hanya beda istilah saja. Anggapan tersebut tidak salah 100% namun juga tidak benar 100%. Mikrokontroler dan Mikroprosesor adalah dua benda yang beda target penggunaan, beda kelengkapan fungsinya dan beda perusahaan yang awal menciptakan, namun berangkat dari ide yang sama, arsitektur yang sama, bahkan dari tahun lahir yang hampir sama pula. Lalu apa sebenarnya Mikrokontroler dan Mikroprosesor? Dalam dunia komputer dan mikroelektronik, banyak pengguna yang menghabiskan banyak dana untuk memiliki Mikroprosesor. Sebagian besar orang mengabaikan sebuah penemuan penting yang sempat mencapai kejayaann pada masanya, penemuan itu adalah Mikrokontroler. Kita tidak menyadari bahwa disekitar rumah kita, ada sekitar 5 hingga 20 perangkat elektronik yang dikendalikan oleh Mikrokontroler. Begitulah faktanya, karena lebih dari 2 miliar Mikrokontroler diproduksi setiap tahunnya. Hal ini berarti, sangat tidak mungkin manusia di era sekarang ini hidup tanpa Mikrokontroler. Mikrokontroler merupakan kepingan komputer terintegrasi yang mengendalikan sebagian besar perangkat elektronik disekitar kita yang hampir setiap hari digunakan, dari mulai gadget, mesin cuci, mesin pembuat kopi, remote kontrol, mainan anak-anak, televisi, hingga ke kendaraan. Lalu bagaimana ide tentang Mikrokontroler dan Mikroprosesor ini muncul? Lalu siapa yang pertama kali membuatnya? Mikrokontroler Mikrokontroler atau MCU (singkatan dari Microcontroller Unit) atau ada juga yang menyebut Mikrokomputer adalah komputer kecil pada sirkuit terpadu (IC) tunggal yang didalamnya berisi inti prosesor, memori, dan periferal Input/Output terprogram. Program memori dalam bentuk Ferroelectric RAM, NOR \ufb02ash atau OTP ROM juga sering ditanamkan didalam kepingan Mikrokontroler, serta sejumlah kecil RAM. Karena itulah, Mikrokontroler dapat berdiri sendiri untuk menjalankan suatu fungsi tanpa perlu bantuan perangkat penunjang kinerja. Gambar 1. Blok Diagram Mikrokontroler Sangat kontras dengan Mikroprosesor yang membutuhkan perangkat eksternal sebagai penunjang kinerja agar bisa menjalankan suatu fungsi. Perangkat penunjang kinerja tersebut misalnya; RAM, ROM, chip Input/Output (BIOS), dan lain sebagainya. Yang kesemuanya itu adalah perangkat terpisah yang dihubungkan ke Mikroprosesor dengan sebuah perantara (biasanya ada di motherboard). Sejarah Mikrokontroler Selama kurun waktu 1970 hingga 1971, perusahaan Intel sedang bersemangat untuk menciptakan Mikroprosesor pertama didunia. 1971 Intel merilis Mikroprosesor pertamanya yaitu Intel 4004 4-bit, kemudian diikuti Intel 8008 dan beberapa Mikroprosesor yang lebih mumpuni tersedia dipasaran beberapa tahun berikutnya. Namun, kedua Mikroprosesor tersebut membutuhkan perangkat eksternal lain untuk dapat bekerja menjalankan suatu fungsi dan ini tentunya akan meningkatkan biaya total pembuatan suatu perangkat, sehingga sangat mustahil menciptakan peralatan komputerisasi yang ekonomis. Gary Boone dan Michael Cochran, insinyur di Texas Instruments bekerja pada konsep yang hampir sama dengan Intel diawal-awal tahun 1970-an. Gambar 2. Mikroprosesor Intel 4004, 1971 Pada mulanya bisnis di Departemen MOS Texas Instruments adalah bisnis yang sesuai pesanan, dimana perusahaan seperti halnya pabrik kalkulator desktop datang ke Texas Instruments dengan beberapa set pengajuan spesifik. Texas Instruments kemudian mengkonversi spesifikasi tersebut ke dalam kepingan chip terpisah, yang terdiri dari empat, lima atau enam chip untuk menjalankan atau melaksanakan suatu spesifikasi dari perusahaan-perusahaan populer seperti Canon, Olympia, atau Olivetti. Untuk perusahaan-perusahaan tersebut, pekerjaan Texas Instruments sangatlah menakjubkan karena mampu memberikan pelayanan yang memuaskan dengan menekan banyak unit hanya menjadi sekitar empat, lima atau enam chip saja. Saat itu teknologi yang sangat populer adalah TTL, yang membutuhkan sekitar 100 hingga 200 chip. Sangat wajar jika bisnis ini merupakan bisnis yang menggairahkan bagi Texas Instruments. Gambar 3. Kalkulator Texas Instruments, 1974 Selama waktu itu Gary Boone melakukan penelitian yang lebih luas dengan melibatkan beberapa orang dari negara lain seperti Jerman, Itali, dan dari beberapa negara lainnya. Mereka mencoba memahami kebutuhkan pelanggan-pelanggan baru dan menyelesaikan pesanannya. Boone pada akhirnya merasa bosan setelah melakukan hal tersebut berulang kali. Selain itu, sejak proyek-proyek sebelumnya berhasil dan mereka memiliki sekumpulan pelanggan-pelanggan setia, pelanggan-pelanggan baru meminta pekerjaan yang sama seperti yang orang lain pesan ditahun-tahun sebelumnya. Sehingga, ini berarti menjadi tuntutan untuk melakukan hal yang sama, lagi dan lagi pada setiap proyek yang dikerjakan. Aturan umum di Texas Instruments adalah \"one riot, one ranger\" yang berarti \"satu chip, satu insinyur\". Jadi, jika Texas Instruments memiliki 12 insinyur desainer MOS maka mereka di pecah menjadi tiga atau empat bagian untuk mengerjakan satu proyek diwaktu yang sama. Dan itu membutuhkan waktu sekitar enam bulan untuk menyelesaikan satu proyek. Oleh karena itu, kapasitas bisnis adalah jumlah insinyur di bagi jumlah chip, satu kasus dalam setiap enam bulan. Walaupun permintaan dari masing-masing proyek berbeda secara detail, namun pada prinsip umum semua proses pekerjaan adalah sama saja. Hal ini membuat para insinyur merasa lelah untuk mengerjakan proyek-proyek yang monoton. Mereka bekerja dalam jangka waktu yang cukup lama dan mereka merasa telah melakukan yang terbaik untuk menyelesaikan suatu proyek. Boone dan para insinyur akhirnya memikirkan acuan satu arah yang dibutuhkan konsumen dan potongan rangkaian atau blok-blok fungsi dengan metode lain. Boone dapat menemukan penggunaan komponen yang sama, ia dan yang lainnya mempertimbangkan gagasan simulasi, \"Baiklah, mungkin jika sekarang kita memiliki beberapa byte didalam penyimpanan data, beberapa byte didalam penyimpanan program, dan memiliki beberapa bit untuk memindai antarmuka keyboard, maka itu akan mencakup semua spesifikasi yang kira-kira saya ketahui\". Sebagai penemuan terbaik dari gagasan ini maka lahirlah kepingan Mikrokontroler yang petama kali, tepatnya di bulan September 1971 yaitu TMS0100. Gambar 4. Mikrokontroler Pertama TMS0100 Salah satu aspek teknis yang penting sekali adalah bahwa desain teknologi pada saat itu sangat tidak efisien dalam memanfaatkan silicon. Arsitektur yang berbeda kemudian harus dipilih sehingga struktur lebih teratur dan penggunaan memori lebih ditekan, selain itu, pitch-matching juga harus diberi penekanan sehingga konsep bit-slice cocok di berbagai kebutuhan pada masing-masing 4 bit dari penambah 4 bit ditata menjadi dimensi yang sama dalam hal fisik. Hanya dengan itu akan ada kecocokan dan keselarasan didalam pitch. Pada akhirnya, faktor lain dari tiga atau empat dalam hal kepadatan silikon akan tercapai. Terlepas dari kendala arsitektur terutama pada orientasi memori dan pitch-matching, kemudian Mikrokontroler diciptakan lebih baik dari pada teknologi sebelumya (disebut TTL) dan akhirnya mampu memaksimalkan penggunaan silicon yang lebih efisien. Gambar 5. Bagian Mikrokontroler TMS0100 merupakan kepingan tunggal yang digunakan untuk mengendalikan mesin kalkulator. Setelah Mikrokontroler pertama ini berhasil, Gary Boone dan Michael Cochran kemudian mengembangkan desainnya, lahirlah turunan TMS0100 yaitu TMX1795. Pada tanggal 31 Agustus 1971, Boone mendaftarkan hak paten hasil penemuannya untuk mesin pengolah kepingan tunggal (single-chip). Tanggal 4 September 1973, Gary Boone memperoleh penghargaan U.S. Patent 3,757,306. Berbekal pengalaman selama proses pembuatan TMS0100 dan Prototipe Mikrokontroler 8-bit buatannya, Boone kemudian mendesain Mikrokontroler 4-bit seri TMS1000. Boone memperoleh penghargaan U.S. Patent 4,074,351 untuk penemuan Mikrokontroler Modern. Setelah dilakukan beberapa perbaikan kecil, Texas Instruments merilis mikrokontroler TMS1000 untuk dijual ke industri elektronik di tahun 1974. Mikrokontroler ini tersedia dalam berbagai konfigurasi ukuran ROM dan RAM. Keluarga TMS1000 dijual kepasaran dengan harga murah, sehingga meraih sukses besar dan disukai oleh industri elektronika saat itu. Selain karena harganya yang murah, keluarga TMS1000 dapat diprogram untuk melakukan fungsi yang berbeda, sehingga beberapa industri elektronik saat itu menciptakan banyak produk seperti oven microwave, video permainan, mesin cuci, jukebox, mainan anak-anak, alat-alat, permainan dan ratusan produk elektronik lainnya. Sampai tahun 1983, keluarga TMS1000 terjual lebih dari 100 juta keping. Wow!!! Gambar 6. Mikrokontroler TMS1000, 1974 Mikrokontroler Seri TMS1000 Setelah kesuksesan TMS1000 dipasaran, Texas Instruments kemudian mengembangkan keluarga TMS1000 menjadi beberapa varian seperti pada tabel dibawah ini: Nomor Seri ROM RAM I/O Pin Teknologi Catatan TMS1000 1KB 64x4 23 pMOS - TMS1000C 1KB 64x4 23 CMOS Identik dengan TMS1000, CMOS TMS1018 - 64x4 4 pMOS - TMS1070 1KB 64x4 - pMOS Built-in VF display controller TMS1098 - 128x4 - pMOS - TMS1099 - 64x4 - pMOS - TMS1099C - 64x4 - CMOS Identik dengan TMS1099, CMOS TMS1100 2KB 128x4 - pMOS - TMS1117 2KB 128x4 - pMOS - TMS1200 1KB 64x4 - pMOS - TMS1200C 1KB 64x4 - CMOS Identik dengan TMS1200, CMOS TMS1270 1KB 64x4 - pMOS - TMS1300 2KB 128x8 23 pMOS - TMS1400 4KB 128x4 22 pMOS - TMS1600 4KB 128x4 33 pMOS - TMS1700 512B 32x4 21 pMOS - TMS2000 1KB 64x4 - nMOS versi nMOS untuk TMS1000 TMS2100 2KB 128x4 - nMOS versi nMOS untuk TMS1100 TMS2200 1KB 64x4 - nMOS versi nMOS untuk TMS1200 TMS2300 2KB 128x4 - nMOS versi nMOS untuk TMS1300 TMS2098 - 128x4 - nMOS Contoh Developer TMS2099 - 164x4 - nMOS Contoh Developer Mikrokontroler Intel Disisi perusahaan lain, sebagai tanggapan terhadap keberadaan kepingan tunggal Mikrokontroler TMS1000, Intel tidak mau ketinggalan mengembangkan Mikrokontroler. Intel mengembangkan sistem komputer pada chip yang dioptimalkan untuk aplikasi kontrol, maka lahirlah Mikrokontroler Intel pertama yaitu Intel 8048 (termasuk 8048, 8035, dan 8749). Seri MCS-48 termasuk didalamnya Intel 8048 dirilis ke pasar pada tahun 1976, 2 tahun lebih lambat dari pada TMS1000. Intel 8048 menggabungkan RAM dan ROM didalam satu kepingan, menggunakan teknologi NMOS, dan menggunakan arsitektur Harvard yang telah dimodifikasi. Chip ini ditanamkan sebagai pengendali pada Keyboard PC produk IBM. Chip ini akan ditemukan didalam 1 miliar keyboard PC dan berbagai aplikasi lainnya. Pada saat itu Presiden Intel, Lukas J. Valenter, menyatakan bahwa mikrokontroler ini adalah salah satu yang paling sukses dalam sejarah perusahaan Intel, dan anggaran divisi ini ditambah lebih dari 25%. Gambar 7. Mikrokontroler Intel 8048, 1977 Pada tahun 1980, Intel kembali memperkenalkan seri MCS-51, termasuk didalamnya Mikrokontroler 8051 dengan teknologi CMOS dan ini menjadi Mikrokontroler paling populer yang digunakan. Bahkan Intel 8051 digunakan hingga hari ini, sehingga menjadi salah satu Mikrokontroler yang berumur panjang. Embedded Design Sebuah mikrokontroler dapat dianggap sebagai sistem mandiri dengan prosesor, memori dan periferal dan dapat digunakan sebagai sistem embedded (sistem-tertanam). Mayoritas mikrokontroler yang digunakan saat ini tertanam di mesin secara langsung, seperti di mobil, telepon, peralatan, dan peripheral untuk sistem komputer. Sementara beberapa embedded system yang sangat canggih, banyak memiliki persyaratan minimal untuk memori dan panjang program, dengan tidak ada sistem operasi, dan kompleksitas perangkat lunak yang rendah. Perangkat khusus input dan output meliputi switch, relay, solenoid, LED , Layar LCD kecil, perangkat frekuensi radio, dan sensor-sensor untuk data seperti suhu, kelembaban, tingkat cahaya dan lain-lain. Embedded sistem biasanya tidak memiliki keyboard, layar, disk, printer, atau perangkat lain yang biasa ditemukan di I/O dari komputer pribadi, dan mungkin tidak memiliki perangkat interaksi manusia apapun. Gambar 8. Arduino Mega2560 Erasable Programmable Memory Sekitar tahun 1990, mikrokontroler terus dikembangkan, salah satu teknologi yang cukup populer adalah Erasable Programmable ROM (EPROM), yaitu memori yang dapat dihapus dan diprogram ulang. Mikrokontroler ini memiliki jendela kaca transparan pada bagian atasnya, jika bagian ini terpapar sinar ultraviolet maka memori akan terhapus. Tipe ini biasanya digunakan hanya sebagai prototipe. Tipe lainnya adalah Programmed ROM oleh produsen, varian PROM hanya bisa diprogram sekali. Varian ini di tandai dengan penunjukan OTP (one-time programmable). PROM adalah jenis yang sama seperti halnya EPROM, tetapi karena tidak ada cara untuk memasukan sinar ultraviolet kedalam chip, maka memori tidak dapat dihapus. Versi yang bisa dihapus memerlukan jendela kuarsa, membuat versi ini lebih mahal dibandingkan versi OTP yang biasanya terbuat dari plastik buram. Gambar 9. Intel 8749 UV EPROM, 1980 Tahun 1993, pengenalan memori jenis EEPROM (Electrically Erasable Programmable ROM) yang memungkinkan memori mikrokontroler dihapus dengan cepat secara elektris tanpa paket yang mahal seperti halnya EPROM, membuat proses prototipe lebih cepat dan In System Programming. Teknologi ini diawali oleh perusahaan Microchip pada chip seri PIC16x84. Teknologi EEPROM telah tersedia sebelumnya, tapi EEPROM sebelumnya lebih mahal dan kurang tahan lama, sehingga tidak cocok untuk mikrokontroler berbiaya murah dan diproduksi secara massal. Pada tahun yang sama, perusahaan Atmel memperkenalkan mikrokontroler pertama yang menggunakan Flash Memory, khusus jenis EEPROM. Kemudian perusahaan lain dengan cepat mengikuti, dengan menggunakan kedua jenis memori tersebut. Interupsi Mikrokontroler harus menyediakan real-time (dapat ditebak, meskipun tidak harus cepat) untuk menanggapi peristiwa dalam sistem tertanam yang mereka kendalikan. Bila ada kejadian tertentu, sebuah sistem interupsi mendapatkan sinyal dari prosesor untuk menangguhkan pengolahan urutan instruksi saat ini dan untuk memulai layanan interupsi rutin (ISR, atau \"interrupt handler\") yang akan melakukan proses pengolahan dibutuhkan berdasarkan sumber interrupt, sebelum kembali ke urutan instruksi asli. Sumber interrupt mungkin perangkat yang berdiri sendiri, dan sering termasuk peristiwa seperti internal timer overflow, menyelesaikan konversi analog ke digital, perubahan tingkat logika pada masukan seperti dari tombol yang ditekan, dan data yang diterima melalui link komunikasi. Di mana konsumsi daya adalah hal yang penting seperti pada perangkat yang menggunakan baterai, interupsi juga dapat membangunkan sebuah mikrokontroler dari keadaan tidur berdaya rendah dimana prosesor dihentikan sampai diperlukan untuk melakukan sesuatu oleh peristiwa (perangkat) disekitarnya. Program Biasanya program mikrokontroler harus dapat dimasukan kedalam memori yang tersedia didalam chip, karena akan menjadi mahal jika harus menyediakan sistem dengan perangkat eksternal, atau memori yang dapat di-upgrade. Compiler dan Assembler digunakan untuk mengkonversi kedua bahasa kode tingkat-tinggi dan bahasa assembly menjadi kode kompak mesin agar bisa disimpan di dalam memori mikrokontroler. Jenis memori tergantung pada perangkat, memori program mungkin permanen, read-only memory yang hanya bisa diprogram oleh pabrik, atau mungkin flash memory, atau read-only memory yang dapat dihapus. Produsen sering membuat versi khusus dari mikrokontroler mereka untuk membantu pengembangan perangkat keras dan perangkat lunak dari sistem target. Awalnya adalah veri EPROM yang memiliki \"jendela\" di bagian atas perangkat yang mana memori program dapat dihapus dengan sinar ultraviolet, siap diprograman ulang setelah pemrograman (\"burn\") dan siklus tes. Sejak tahun 1998, versi EPROM ini menjadi langka dan telah digantikan oleh EEPROM dan Flash, yang lebih mudah digunakan (dapat dihapus secara elektronik) dan lebih murah untuk diproduksi. Versi lain mungkin ROM diakses sebagai perangkat eksternal daripada ditanamkan sebagai memori internal, namun ini menjadi langka karena meluasnya ketersediaan mikrokontroler programmer yang lebih murah. Penggunaan perangkat field-programmable pada mikrokontroler memungkinkan pembaruan pada firmware atau revisi pabrik yang terlambat untuk produk yang telah siap dipasarkan tetapi belum direvisi. Memori Programmable juga mengurangi waktu yang diperlukan untuk penyebaran produk baru. Di mana ratusan ribu perangkat identik yang dibutuhkan, menggunakan bagian yang terprogram pada saat pembuatan akan menjadi lebih ekonomis. Ini bagian \"pelindung program\" memiliki program yang telah ditetapkan dalam cara yang sama seperti logika chip, pada saat yang sama pula. Mikrokontroler dapat disesuaikan dalam menggabungkan blok logika digital yang dapat dipersonalisasi untuk kemampuan pemrosesan tambahan, peripheral dan antarmuka yang disesuaikan dengan kebutuhan aplikasi. Salah satu contohnya adalah AT91CAP yang diproduksi oleh perusahaan Atmel. Fitur Lain Mikrokontroler Selain fitur yang sudah dibahas sebelumnya, ada beberapa fitur lain yang sekarang banyak ditemukan pada berbagai seri mikrokontroler, baik buatan perusahaan Atmel, Microchip, NXP, atau perusahaan lainnya. Diantaranya yaitu: GPIO : Mikrokontroler biasanya terdiri dari beberapa tujuan umum pin input/output (GPIO; General Purpose Input/Output). Pin GPIO dikonfigurasi oleh perangkat lunak yang digunakan sebagai jalur input (masukan) atau keluaran (output). Ketika pin GPIO dikonfigurasi sebagai input, maka biasanya disandingkan dengan perangkat sensor pembaca atau sinyal eksternal. Namun, jika pin GPIO dikonfigurasi sebagai output, biasanya digunakan untuk menggerakan perangkat eksternal seperti LED atau Motor secara tidak langsung, yaitu melalui sumber daya eksternal. Konverter : Banyak Mikrokontroler dengan sistem-tertanam harus membaca sensor yang menghasilkan sinyal analog. Maka dari itulah ditanamkan perangkat konverter analog ke digital (ADC; Analog-to-Digital Converter). Sejak prosesor dibuat hanya mampu untuk menafsirkan dan memproses data digital, yaitu 1 dan 0, prosesor tidak dapat melakukan apa-apa dengan sinyal analog yang dapat dikirimkan kepadanya oleh perangkat lain. Jadi analog ke digital digunakan untuk mengkonversi data yang masuk dan mengubahnya ke dalam bentuk data yang prosesor dapat mengenalinya. Sebuah fitur yang kurang umum pada beberapa mikrokontroler adalah konverter digital-ke-analog (DAC; Digital-to-Analog Converter) yang memungkinkan prosesor untuk mengeluarkan sinyal analog atau tingkatan tegangan. PIT : Selain konverter, banyak mikroprosesor menyediakan berbagai timer juga. Salah satu jenis yang paling umum dari timer adalah Programmable Interval Timer (PIT). Sebuah PIT digunakan untuk menghitung mundur dari suatu nilai ke nilai nol, atau sampai dengan kapasitas hitungan tertentu, hingga sampai ke nol. Setelah mencapai nol, ia akan mengirimkan interupsi ke prosesor menunjukkan bahwa mereka telah selesai menghitung. Hal ini berguna untuk perangkat seperti termostat, yang secara berkala menguji suhu di sekitar mereka untuk melihat apakah mereka perlu mengaktifkan AC, pemanas, atau yang lainnya. PWM : Tersedia juga fasilitas blok Pulse Width Modulation (PWM) yang memungkinkan CPU untuk mengontrol konverter daya, beban resistif, motor, dan lain sebagainya, tanpa menggunakan banyak sumber daya CPU di waktu pengulangan yang singkat. UART : Universal Asynchronous Receiver/Transmitter (UART) blok yang memungkinkan untuk menerima dan mengirim data melalui jalur serial dengan sangat sedikit beban pada CPU. Lainnya : Perangkat yang terintegrasi pada chip juga sering mencakup kemampuan untuk berkomunikasi dengan perangkat lain (chip) dalam format digital seperti Inter-Integrated Circuit (I2C), Serial Peripheral Interface (SPI), Universal Serial Bus (USB), dan juga Ethernet. Integrasi yang Lebih Tinggi Mikrokontroler mungkin tidak mengimplementasikan alamat eksternal atau data bus karena mereka mengintegrasikan RAM dan memori non-volatile pada chip yang sama dengan CPU. Menggunakan pin yang lebih sedikit, chip dapat dibuat lebih kecil, dengan paket yang lebih murah. Mengintegrasikan memori dan peripheral lainnya pada satu chip dan mengujinya sebagai satu unit meningkatkan biaya pembuatan chip, tetapi sering mengakibatkan penurunan biaya total dari sistem tertanam secara keseluruhan. Bahkan jika biaya dari CPU yang telah terintegrasi peripheral sedikit lebih mahal dari biaya CPU dan periferal eksternal, melibatkan lebih sedikit chip biasanya memungkinkan sebuah papan sirkuit yang lebih kecil dan lebih murah, dan mengurangi tenaga kerja yang dibutuhkan untuk merakit dan menguji papan sirkuit, selain itu cenderung menurunkan tingkat kecacatan untuk perakitan akhir. Mikrokontroler adalah suatu sirkuit terpadu yang biasanya dilengkapi fitur berikut: Central Processing Unit - kisaran dari yang kecil dan sederhana yaitu prosesor 4-bit hingga yang kompleks dengan prosesor 32-bit atau 64-bit Volatile Memory (RAM) untuk penyimpanan data ROM, EPROM, EEPROM atau Flash memory untuk program dan penyimpanan parameter operasi Memiliki sedikit input dan output, yang digunakan untuk mengendalikan atau mendeteksi status logika pada masing-masing pin Serial Input/Output seperti halnya serial port (UART) Antarmuka komunikasi serial lainya seperti I2C, Serial Peripheral Interface dan Controller Area Network untuk koneksi antar sistem Perangkat lain seperti pewaktu, penghitung peristiwa, generator PWM, dan watchdog (pengawas kejadian) Generator Pulse, seringkali digunakan osilator seperti Crystal, Resonator, Sirkuit RC Termasuk beberapa ADC dan beberapa DAC Dukungan pemrograman didalam sirkuit (in-circuit programming) dan debugging didalam sirkuit (in-circuit debugging) Integrasi ini secara drastis akan mengurangi jumlah chip, jumlah kabel, dan memperkecil area papan sirkuit yang diperlukan untuk menghasilkan sistem yang hampir sama dengan chip terpisah. Jumlah pin sedikit, karena beberapa pin dapat dihubungkan dengan perangkat internal lainnya dengan fungsi pin yang dikonfigurasi oleh perangkat lunak. Hal ini memberikan keleluasan dalam penggunaanya diberbagai aplikasi daripada jika pin telah ditentukan memiliki fungsi khusus. Beberapa mikrokontroler menggunakan arsitektur Harvard: bus memori terpisah untuk instruksi dan data, yang memungkinkan akses untuk pengambilan diwaktu yang bersamaan. Yang mana arsitektur Harvard digunakan, instruksi untuk prosesor mungkin saja memiliki ukuran sedikit berbeda dari pada panjang memori internal dan register. Sebagai contoh; 12-bit instruksi digunakan dengan register 8-bit. Keputusan untuk mengintegrasikan periferal seringkali kali sulit. Vendor mikrokontroler sering menjual frekwensi operasi dan fleksibilitas desain sistem kepasar tertentu bagi para pelanggan untuk menekan biaya secara keseluruhan. Produsen harus mampu meminimalkan ukuran chip dengan beberapa penambahan fungsi. Arsitektur mikrokontroler sangat bervariasi. Beberapa desain memasukan fungsi umum dari inti mikroprosesor, dengan satu atau lebih ROM, RAM, dan atau fungsi I/O yang terintegrasi didalam paket. Sedangkan desain lain khusus dibuat untuk tujuan aplikasi kontrol. Sekumpulan instruksi mikrokontroler biasanya memiliki banyak instruksi yang bertujuan untuk memanipulasi bit agar tercipta program pengendalian yang lebih kompak. Sebagai contoh, prosesor pada umumnya memerlukan beberapa instruksi untuk melakukan pemeriksaan sebuah bit pada register dan percabangannya jika bit tersebut telah ditentukan, dimana mikrokontroler memiliki instruksi tunggal untuk menetapkan fungsi yang diperlukan. Mikrokontroler biasanya tidak memiliki prosesor pembantu perhitungan, jadi perhitungan aritmatika dilakukan oleh perangkat lunak. Lingkup Pemrograman Mikrokontroler awalnya diprogram hanya dalam bahasa assembly, tetapi berbagai bahasa pemrograman tingkat tinggi, seperti C, Python dan JavaScript, sekarang juga umum digunakan untuk menargetkan mikrokontroler dan sistem-tertanam. Bahasa tersebut ada yang dirancang khusus, namun ada juga bahasa dengan tujuan umum seperti bahasa pemrograman C. Compiler untuk bahasa dengan tujuan umum biasanya akan memiliki beberapa pembatasan serta memerlukan perangkat tambahan untuk lebih mendukung karakteristik unik dari mikrokontroler. Beberapa mikrokontroler memiliki perangkat lunak khusus untuk membantu pengembang dalam membuat aplikasi tertentu. Vendor mikrokontroler juga biasanya sering membuat alat yang bebas untuk dibuat dan dikembangkan agar lebih mudah dalam mengadopsi perangkat keras yang mereka buat. Simulator dalam bentuk perangkat lunak biasanya tersedia untuk beberapa mikrokontroler. Ini memungkinkan pengembang untuk menganalisis tentang perilaku mikrokontroler dan program sebelum mereka menggunakan komponen yang sebenarnya. Sebuah simulator akan menunjukkan keadaan internal prosesor dan juga output, serta memungkinkan sinyal masukan yang akan dihasilkan. Namun, simulator memiliki beberapa keterbatasan, salah satunya yaitu simulator tidak dapat mensimulasikan banyak perangkat keras didalam sistem, kondisi seperti ini tentunya menyulitkan pengguna untuk mengetahui kinerja sebenarnya secara fisik. Mikrokontroler baru-baru mengintegrasikan sirkuit on-chip debug yang mampu diakses oleh emulator melalui JTAG, memungkinkan debugging dari firmware dengan debugger. Real-time ICE memungkinkan untuk melihat dan atau memanipulasi status internal yang sedang berjalan. ICE tracing dapat merekam program yang dijalankan dan status MCU sebelum atau sesudah dipicu. Interrupt Latency Coming soon... Jenis Mikrokontroler Coming soon... Volume Biaya produksi menurun dari waktu ke waktu, mikrokontroler 8-bit termurah dijual di bawah $0,25 dalam jumlah ribuan pada tahun 2009, dan beberapa mikrokontroler 32-bit dijual sekitar $1 untuk jumlah yang sama. Saat ini mikrokontroler dengan harga murah tersedia untuk para penggemar mikrokontroler, dengan komunitas online besar pada jenis prosesor tertentu. Di masa depan, MRAM berpotensi dapat digunakan di mikrokontroler karena memiliki daya tahan yang tak terbatas dan biaya yang terus menurun pada proses pembuatan wafer semikonduktor. Pada tahun 2002, sekitar 55% dari semua CPU yang terjual di dunia adalah mikrokontroler 8-bit dan mikroprosesor. Lebih dari dua miliar mikrokontroler 8-bit terjual pada tahun 1997, dan menurut Semico, lebih dari empat miliar mikrokontroler 8-bit terjual pada tahun 2006. Baru-baru ini, Semico telah mengklaim pasar MCU tumbuh 36,5% pada tahun 2010 dan 12% pada tahun 2011. Sebuah rumah khusus di negara maju cenderung memiliki hanya empat jenis umum mikroprosesor tetapi terbentuk sekitar tiga lusin mikrokontroler. Sebuah mobil khusus kelas menengah memiliki sebanyak 30 atau lebih mikrokontroler. Mereka juga dapat ditemukan di banyak perangkat listrik seperti mesin cuci, oven microwave, dan telepon. Secara historis, segmen 8-bit telah mendominasi pasar MCU. 16-bit mikrokontroler menjadi kategori volume MCU yang terbesar pada tahun 2011, menyalip perangkat 8-bit untuk pertama kalinya di tahun itu. IC Insights percaya peningkatan pasar MCU akan mengalami perubahan substansial dalam lima tahun ke depan dengan perangkat 32-bit yang terus meraih pangsa lebih besar dari penjualan dan volume unit. Tahun 2017, MCU 32-bit diharapkan dapat meraih 55% dari penjualan mikrokontroler. Dalam hal volume unit, MCU 32-bit diharapkan mencatat 38% dari penjualan mikrokontroler pada tahun 2017, sedangkan perangkat 16-bit akan mewakili 34% dari total, dan desain 4/8-bit diperkirakan memperoleh 28% dari unit yang terjual tahun itu. Pasar MCU 32-bit diperkirakan akan tumbuh pesat karena meningkatnya permintaan untuk tingkat yang lebih presisi dalam sistem pengolahan-embedded dan pertumbuhan konektivitas pengguna Internet. Pada beberapa tahun ke depan, MCU 32-bit kompleks diharapkan melakukan perhitungan lebih dari 25% dari kekuatan pemrosesan dalam kendaraan. IC Insights, Pasar MCU sedang migrasi ke 32-bit dan Perangkat berbasis ARM Pada tahun 2012, menyusul krisis global - penurunan penjualan terburuk yang pernah terjadi dan pemulihan dan rata-rata harga jual turun 17% - penurunan terbesar sejak tahun 1980-an, harga rata-rata untuk mikrokontroler adalah 0,88 USD ($0,69 untuk 4/8-bit, $0,59 untuk 16-bit, $1,76 untuk 32-bit). Pada tahun 2012, penjualan di seluruh dunia dari mikrokontroler 8-bit adalah sekitar $4 milyar karena mikrokontroler tipe ini begitu dibutuhkan untuk pengembangan teknologi yang lebih baik. Pada tahun 2012, mikrokontroler 4-bit juga mengalami penjualan yang signifikan. Pada 2015, mikrokontroler 8-bit dapat dibeli dengan harga $0,311 (1.000 unit), 16-bit seharga $0,385 (1.000 unit), dan 32-bit seharga $0,378 (1.000 unit tapi dapat juga seharga $ 0,35 untuk 5.000 unit).","title":"Mengenal Mikrokontroler"},{"location":"papan/mikrokontroler/#mengenal-mikrokontroler","text":"Memang cukup membingungkan ketika mendengar istilah Mikrokontroler dan Mikroprosesor. Bagi para pengguna yang masih awam kedua istilah diatas dianggap sama, bahkan ada yang menganggap hanya beda istilah saja. Anggapan tersebut tidak salah 100% namun juga tidak benar 100%. Mikrokontroler dan Mikroprosesor adalah dua benda yang beda target penggunaan, beda kelengkapan fungsinya dan beda perusahaan yang awal menciptakan, namun berangkat dari ide yang sama, arsitektur yang sama, bahkan dari tahun lahir yang hampir sama pula. Lalu apa sebenarnya Mikrokontroler dan Mikroprosesor? Dalam dunia komputer dan mikroelektronik, banyak pengguna yang menghabiskan banyak dana untuk memiliki Mikroprosesor. Sebagian besar orang mengabaikan sebuah penemuan penting yang sempat mencapai kejayaann pada masanya, penemuan itu adalah Mikrokontroler. Kita tidak menyadari bahwa disekitar rumah kita, ada sekitar 5 hingga 20 perangkat elektronik yang dikendalikan oleh Mikrokontroler. Begitulah faktanya, karena lebih dari 2 miliar Mikrokontroler diproduksi setiap tahunnya. Hal ini berarti, sangat tidak mungkin manusia di era sekarang ini hidup tanpa Mikrokontroler. Mikrokontroler merupakan kepingan komputer terintegrasi yang mengendalikan sebagian besar perangkat elektronik disekitar kita yang hampir setiap hari digunakan, dari mulai gadget, mesin cuci, mesin pembuat kopi, remote kontrol, mainan anak-anak, televisi, hingga ke kendaraan. Lalu bagaimana ide tentang Mikrokontroler dan Mikroprosesor ini muncul? Lalu siapa yang pertama kali membuatnya?","title":"Mengenal Mikrokontroler"},{"location":"papan/mikrokontroler/#mikrokontroler","text":"Mikrokontroler atau MCU (singkatan dari Microcontroller Unit) atau ada juga yang menyebut Mikrokomputer adalah komputer kecil pada sirkuit terpadu (IC) tunggal yang didalamnya berisi inti prosesor, memori, dan periferal Input/Output terprogram. Program memori dalam bentuk Ferroelectric RAM, NOR \ufb02ash atau OTP ROM juga sering ditanamkan didalam kepingan Mikrokontroler, serta sejumlah kecil RAM. Karena itulah, Mikrokontroler dapat berdiri sendiri untuk menjalankan suatu fungsi tanpa perlu bantuan perangkat penunjang kinerja. Gambar 1. Blok Diagram Mikrokontroler Sangat kontras dengan Mikroprosesor yang membutuhkan perangkat eksternal sebagai penunjang kinerja agar bisa menjalankan suatu fungsi. Perangkat penunjang kinerja tersebut misalnya; RAM, ROM, chip Input/Output (BIOS), dan lain sebagainya. Yang kesemuanya itu adalah perangkat terpisah yang dihubungkan ke Mikroprosesor dengan sebuah perantara (biasanya ada di motherboard).","title":"Mikrokontroler"},{"location":"papan/mikrokontroler/#sejarah-mikrokontroler","text":"Selama kurun waktu 1970 hingga 1971, perusahaan Intel sedang bersemangat untuk menciptakan Mikroprosesor pertama didunia. 1971 Intel merilis Mikroprosesor pertamanya yaitu Intel 4004 4-bit, kemudian diikuti Intel 8008 dan beberapa Mikroprosesor yang lebih mumpuni tersedia dipasaran beberapa tahun berikutnya. Namun, kedua Mikroprosesor tersebut membutuhkan perangkat eksternal lain untuk dapat bekerja menjalankan suatu fungsi dan ini tentunya akan meningkatkan biaya total pembuatan suatu perangkat, sehingga sangat mustahil menciptakan peralatan komputerisasi yang ekonomis. Gary Boone dan Michael Cochran, insinyur di Texas Instruments bekerja pada konsep yang hampir sama dengan Intel diawal-awal tahun 1970-an. Gambar 2. Mikroprosesor Intel 4004, 1971 Pada mulanya bisnis di Departemen MOS Texas Instruments adalah bisnis yang sesuai pesanan, dimana perusahaan seperti halnya pabrik kalkulator desktop datang ke Texas Instruments dengan beberapa set pengajuan spesifik. Texas Instruments kemudian mengkonversi spesifikasi tersebut ke dalam kepingan chip terpisah, yang terdiri dari empat, lima atau enam chip untuk menjalankan atau melaksanakan suatu spesifikasi dari perusahaan-perusahaan populer seperti Canon, Olympia, atau Olivetti. Untuk perusahaan-perusahaan tersebut, pekerjaan Texas Instruments sangatlah menakjubkan karena mampu memberikan pelayanan yang memuaskan dengan menekan banyak unit hanya menjadi sekitar empat, lima atau enam chip saja. Saat itu teknologi yang sangat populer adalah TTL, yang membutuhkan sekitar 100 hingga 200 chip. Sangat wajar jika bisnis ini merupakan bisnis yang menggairahkan bagi Texas Instruments. Gambar 3. Kalkulator Texas Instruments, 1974 Selama waktu itu Gary Boone melakukan penelitian yang lebih luas dengan melibatkan beberapa orang dari negara lain seperti Jerman, Itali, dan dari beberapa negara lainnya. Mereka mencoba memahami kebutuhkan pelanggan-pelanggan baru dan menyelesaikan pesanannya. Boone pada akhirnya merasa bosan setelah melakukan hal tersebut berulang kali. Selain itu, sejak proyek-proyek sebelumnya berhasil dan mereka memiliki sekumpulan pelanggan-pelanggan setia, pelanggan-pelanggan baru meminta pekerjaan yang sama seperti yang orang lain pesan ditahun-tahun sebelumnya. Sehingga, ini berarti menjadi tuntutan untuk melakukan hal yang sama, lagi dan lagi pada setiap proyek yang dikerjakan. Aturan umum di Texas Instruments adalah \"one riot, one ranger\" yang berarti \"satu chip, satu insinyur\". Jadi, jika Texas Instruments memiliki 12 insinyur desainer MOS maka mereka di pecah menjadi tiga atau empat bagian untuk mengerjakan satu proyek diwaktu yang sama. Dan itu membutuhkan waktu sekitar enam bulan untuk menyelesaikan satu proyek. Oleh karena itu, kapasitas bisnis adalah jumlah insinyur di bagi jumlah chip, satu kasus dalam setiap enam bulan. Walaupun permintaan dari masing-masing proyek berbeda secara detail, namun pada prinsip umum semua proses pekerjaan adalah sama saja. Hal ini membuat para insinyur merasa lelah untuk mengerjakan proyek-proyek yang monoton. Mereka bekerja dalam jangka waktu yang cukup lama dan mereka merasa telah melakukan yang terbaik untuk menyelesaikan suatu proyek. Boone dan para insinyur akhirnya memikirkan acuan satu arah yang dibutuhkan konsumen dan potongan rangkaian atau blok-blok fungsi dengan metode lain. Boone dapat menemukan penggunaan komponen yang sama, ia dan yang lainnya mempertimbangkan gagasan simulasi, \"Baiklah, mungkin jika sekarang kita memiliki beberapa byte didalam penyimpanan data, beberapa byte didalam penyimpanan program, dan memiliki beberapa bit untuk memindai antarmuka keyboard, maka itu akan mencakup semua spesifikasi yang kira-kira saya ketahui\". Sebagai penemuan terbaik dari gagasan ini maka lahirlah kepingan Mikrokontroler yang petama kali, tepatnya di bulan September 1971 yaitu TMS0100. Gambar 4. Mikrokontroler Pertama TMS0100 Salah satu aspek teknis yang penting sekali adalah bahwa desain teknologi pada saat itu sangat tidak efisien dalam memanfaatkan silicon. Arsitektur yang berbeda kemudian harus dipilih sehingga struktur lebih teratur dan penggunaan memori lebih ditekan, selain itu, pitch-matching juga harus diberi penekanan sehingga konsep bit-slice cocok di berbagai kebutuhan pada masing-masing 4 bit dari penambah 4 bit ditata menjadi dimensi yang sama dalam hal fisik. Hanya dengan itu akan ada kecocokan dan keselarasan didalam pitch. Pada akhirnya, faktor lain dari tiga atau empat dalam hal kepadatan silikon akan tercapai. Terlepas dari kendala arsitektur terutama pada orientasi memori dan pitch-matching, kemudian Mikrokontroler diciptakan lebih baik dari pada teknologi sebelumya (disebut TTL) dan akhirnya mampu memaksimalkan penggunaan silicon yang lebih efisien. Gambar 5. Bagian Mikrokontroler TMS0100 merupakan kepingan tunggal yang digunakan untuk mengendalikan mesin kalkulator. Setelah Mikrokontroler pertama ini berhasil, Gary Boone dan Michael Cochran kemudian mengembangkan desainnya, lahirlah turunan TMS0100 yaitu TMX1795. Pada tanggal 31 Agustus 1971, Boone mendaftarkan hak paten hasil penemuannya untuk mesin pengolah kepingan tunggal (single-chip). Tanggal 4 September 1973, Gary Boone memperoleh penghargaan U.S. Patent 3,757,306. Berbekal pengalaman selama proses pembuatan TMS0100 dan Prototipe Mikrokontroler 8-bit buatannya, Boone kemudian mendesain Mikrokontroler 4-bit seri TMS1000. Boone memperoleh penghargaan U.S. Patent 4,074,351 untuk penemuan Mikrokontroler Modern. Setelah dilakukan beberapa perbaikan kecil, Texas Instruments merilis mikrokontroler TMS1000 untuk dijual ke industri elektronik di tahun 1974. Mikrokontroler ini tersedia dalam berbagai konfigurasi ukuran ROM dan RAM. Keluarga TMS1000 dijual kepasaran dengan harga murah, sehingga meraih sukses besar dan disukai oleh industri elektronika saat itu. Selain karena harganya yang murah, keluarga TMS1000 dapat diprogram untuk melakukan fungsi yang berbeda, sehingga beberapa industri elektronik saat itu menciptakan banyak produk seperti oven microwave, video permainan, mesin cuci, jukebox, mainan anak-anak, alat-alat, permainan dan ratusan produk elektronik lainnya. Sampai tahun 1983, keluarga TMS1000 terjual lebih dari 100 juta keping. Wow!!! Gambar 6. Mikrokontroler TMS1000, 1974","title":"Sejarah Mikrokontroler"},{"location":"papan/mikrokontroler/#mikrokontroler-seri-tms1000","text":"Setelah kesuksesan TMS1000 dipasaran, Texas Instruments kemudian mengembangkan keluarga TMS1000 menjadi beberapa varian seperti pada tabel dibawah ini: Nomor Seri ROM RAM I/O Pin Teknologi Catatan TMS1000 1KB 64x4 23 pMOS - TMS1000C 1KB 64x4 23 CMOS Identik dengan TMS1000, CMOS TMS1018 - 64x4 4 pMOS - TMS1070 1KB 64x4 - pMOS Built-in VF display controller TMS1098 - 128x4 - pMOS - TMS1099 - 64x4 - pMOS - TMS1099C - 64x4 - CMOS Identik dengan TMS1099, CMOS TMS1100 2KB 128x4 - pMOS - TMS1117 2KB 128x4 - pMOS - TMS1200 1KB 64x4 - pMOS - TMS1200C 1KB 64x4 - CMOS Identik dengan TMS1200, CMOS TMS1270 1KB 64x4 - pMOS - TMS1300 2KB 128x8 23 pMOS - TMS1400 4KB 128x4 22 pMOS - TMS1600 4KB 128x4 33 pMOS - TMS1700 512B 32x4 21 pMOS - TMS2000 1KB 64x4 - nMOS versi nMOS untuk TMS1000 TMS2100 2KB 128x4 - nMOS versi nMOS untuk TMS1100 TMS2200 1KB 64x4 - nMOS versi nMOS untuk TMS1200 TMS2300 2KB 128x4 - nMOS versi nMOS untuk TMS1300 TMS2098 - 128x4 - nMOS Contoh Developer TMS2099 - 164x4 - nMOS Contoh Developer","title":"Mikrokontroler Seri TMS1000"},{"location":"papan/mikrokontroler/#mikrokontroler-intel","text":"Disisi perusahaan lain, sebagai tanggapan terhadap keberadaan kepingan tunggal Mikrokontroler TMS1000, Intel tidak mau ketinggalan mengembangkan Mikrokontroler. Intel mengembangkan sistem komputer pada chip yang dioptimalkan untuk aplikasi kontrol, maka lahirlah Mikrokontroler Intel pertama yaitu Intel 8048 (termasuk 8048, 8035, dan 8749). Seri MCS-48 termasuk didalamnya Intel 8048 dirilis ke pasar pada tahun 1976, 2 tahun lebih lambat dari pada TMS1000. Intel 8048 menggabungkan RAM dan ROM didalam satu kepingan, menggunakan teknologi NMOS, dan menggunakan arsitektur Harvard yang telah dimodifikasi. Chip ini ditanamkan sebagai pengendali pada Keyboard PC produk IBM. Chip ini akan ditemukan didalam 1 miliar keyboard PC dan berbagai aplikasi lainnya. Pada saat itu Presiden Intel, Lukas J. Valenter, menyatakan bahwa mikrokontroler ini adalah salah satu yang paling sukses dalam sejarah perusahaan Intel, dan anggaran divisi ini ditambah lebih dari 25%. Gambar 7. Mikrokontroler Intel 8048, 1977 Pada tahun 1980, Intel kembali memperkenalkan seri MCS-51, termasuk didalamnya Mikrokontroler 8051 dengan teknologi CMOS dan ini menjadi Mikrokontroler paling populer yang digunakan. Bahkan Intel 8051 digunakan hingga hari ini, sehingga menjadi salah satu Mikrokontroler yang berumur panjang.","title":"Mikrokontroler Intel"},{"location":"papan/mikrokontroler/#embedded-design","text":"Sebuah mikrokontroler dapat dianggap sebagai sistem mandiri dengan prosesor, memori dan periferal dan dapat digunakan sebagai sistem embedded (sistem-tertanam). Mayoritas mikrokontroler yang digunakan saat ini tertanam di mesin secara langsung, seperti di mobil, telepon, peralatan, dan peripheral untuk sistem komputer. Sementara beberapa embedded system yang sangat canggih, banyak memiliki persyaratan minimal untuk memori dan panjang program, dengan tidak ada sistem operasi, dan kompleksitas perangkat lunak yang rendah. Perangkat khusus input dan output meliputi switch, relay, solenoid, LED , Layar LCD kecil, perangkat frekuensi radio, dan sensor-sensor untuk data seperti suhu, kelembaban, tingkat cahaya dan lain-lain. Embedded sistem biasanya tidak memiliki keyboard, layar, disk, printer, atau perangkat lain yang biasa ditemukan di I/O dari komputer pribadi, dan mungkin tidak memiliki perangkat interaksi manusia apapun. Gambar 8. Arduino Mega2560","title":"Embedded Design"},{"location":"papan/mikrokontroler/#erasable-programmable-memory","text":"Sekitar tahun 1990, mikrokontroler terus dikembangkan, salah satu teknologi yang cukup populer adalah Erasable Programmable ROM (EPROM), yaitu memori yang dapat dihapus dan diprogram ulang. Mikrokontroler ini memiliki jendela kaca transparan pada bagian atasnya, jika bagian ini terpapar sinar ultraviolet maka memori akan terhapus. Tipe ini biasanya digunakan hanya sebagai prototipe. Tipe lainnya adalah Programmed ROM oleh produsen, varian PROM hanya bisa diprogram sekali. Varian ini di tandai dengan penunjukan OTP (one-time programmable). PROM adalah jenis yang sama seperti halnya EPROM, tetapi karena tidak ada cara untuk memasukan sinar ultraviolet kedalam chip, maka memori tidak dapat dihapus. Versi yang bisa dihapus memerlukan jendela kuarsa, membuat versi ini lebih mahal dibandingkan versi OTP yang biasanya terbuat dari plastik buram. Gambar 9. Intel 8749 UV EPROM, 1980 Tahun 1993, pengenalan memori jenis EEPROM (Electrically Erasable Programmable ROM) yang memungkinkan memori mikrokontroler dihapus dengan cepat secara elektris tanpa paket yang mahal seperti halnya EPROM, membuat proses prototipe lebih cepat dan In System Programming. Teknologi ini diawali oleh perusahaan Microchip pada chip seri PIC16x84. Teknologi EEPROM telah tersedia sebelumnya, tapi EEPROM sebelumnya lebih mahal dan kurang tahan lama, sehingga tidak cocok untuk mikrokontroler berbiaya murah dan diproduksi secara massal. Pada tahun yang sama, perusahaan Atmel memperkenalkan mikrokontroler pertama yang menggunakan Flash Memory, khusus jenis EEPROM. Kemudian perusahaan lain dengan cepat mengikuti, dengan menggunakan kedua jenis memori tersebut.","title":"Erasable Programmable Memory"},{"location":"papan/mikrokontroler/#interupsi","text":"Mikrokontroler harus menyediakan real-time (dapat ditebak, meskipun tidak harus cepat) untuk menanggapi peristiwa dalam sistem tertanam yang mereka kendalikan. Bila ada kejadian tertentu, sebuah sistem interupsi mendapatkan sinyal dari prosesor untuk menangguhkan pengolahan urutan instruksi saat ini dan untuk memulai layanan interupsi rutin (ISR, atau \"interrupt handler\") yang akan melakukan proses pengolahan dibutuhkan berdasarkan sumber interrupt, sebelum kembali ke urutan instruksi asli. Sumber interrupt mungkin perangkat yang berdiri sendiri, dan sering termasuk peristiwa seperti internal timer overflow, menyelesaikan konversi analog ke digital, perubahan tingkat logika pada masukan seperti dari tombol yang ditekan, dan data yang diterima melalui link komunikasi. Di mana konsumsi daya adalah hal yang penting seperti pada perangkat yang menggunakan baterai, interupsi juga dapat membangunkan sebuah mikrokontroler dari keadaan tidur berdaya rendah dimana prosesor dihentikan sampai diperlukan untuk melakukan sesuatu oleh peristiwa (perangkat) disekitarnya.","title":"Interupsi"},{"location":"papan/mikrokontroler/#program","text":"Biasanya program mikrokontroler harus dapat dimasukan kedalam memori yang tersedia didalam chip, karena akan menjadi mahal jika harus menyediakan sistem dengan perangkat eksternal, atau memori yang dapat di-upgrade. Compiler dan Assembler digunakan untuk mengkonversi kedua bahasa kode tingkat-tinggi dan bahasa assembly menjadi kode kompak mesin agar bisa disimpan di dalam memori mikrokontroler. Jenis memori tergantung pada perangkat, memori program mungkin permanen, read-only memory yang hanya bisa diprogram oleh pabrik, atau mungkin flash memory, atau read-only memory yang dapat dihapus. Produsen sering membuat versi khusus dari mikrokontroler mereka untuk membantu pengembangan perangkat keras dan perangkat lunak dari sistem target. Awalnya adalah veri EPROM yang memiliki \"jendela\" di bagian atas perangkat yang mana memori program dapat dihapus dengan sinar ultraviolet, siap diprograman ulang setelah pemrograman (\"burn\") dan siklus tes. Sejak tahun 1998, versi EPROM ini menjadi langka dan telah digantikan oleh EEPROM dan Flash, yang lebih mudah digunakan (dapat dihapus secara elektronik) dan lebih murah untuk diproduksi. Versi lain mungkin ROM diakses sebagai perangkat eksternal daripada ditanamkan sebagai memori internal, namun ini menjadi langka karena meluasnya ketersediaan mikrokontroler programmer yang lebih murah. Penggunaan perangkat field-programmable pada mikrokontroler memungkinkan pembaruan pada firmware atau revisi pabrik yang terlambat untuk produk yang telah siap dipasarkan tetapi belum direvisi. Memori Programmable juga mengurangi waktu yang diperlukan untuk penyebaran produk baru. Di mana ratusan ribu perangkat identik yang dibutuhkan, menggunakan bagian yang terprogram pada saat pembuatan akan menjadi lebih ekonomis. Ini bagian \"pelindung program\" memiliki program yang telah ditetapkan dalam cara yang sama seperti logika chip, pada saat yang sama pula. Mikrokontroler dapat disesuaikan dalam menggabungkan blok logika digital yang dapat dipersonalisasi untuk kemampuan pemrosesan tambahan, peripheral dan antarmuka yang disesuaikan dengan kebutuhan aplikasi. Salah satu contohnya adalah AT91CAP yang diproduksi oleh perusahaan Atmel.","title":"Program"},{"location":"papan/mikrokontroler/#fitur-lain-mikrokontroler","text":"Selain fitur yang sudah dibahas sebelumnya, ada beberapa fitur lain yang sekarang banyak ditemukan pada berbagai seri mikrokontroler, baik buatan perusahaan Atmel, Microchip, NXP, atau perusahaan lainnya. Diantaranya yaitu: GPIO : Mikrokontroler biasanya terdiri dari beberapa tujuan umum pin input/output (GPIO; General Purpose Input/Output). Pin GPIO dikonfigurasi oleh perangkat lunak yang digunakan sebagai jalur input (masukan) atau keluaran (output). Ketika pin GPIO dikonfigurasi sebagai input, maka biasanya disandingkan dengan perangkat sensor pembaca atau sinyal eksternal. Namun, jika pin GPIO dikonfigurasi sebagai output, biasanya digunakan untuk menggerakan perangkat eksternal seperti LED atau Motor secara tidak langsung, yaitu melalui sumber daya eksternal. Konverter : Banyak Mikrokontroler dengan sistem-tertanam harus membaca sensor yang menghasilkan sinyal analog. Maka dari itulah ditanamkan perangkat konverter analog ke digital (ADC; Analog-to-Digital Converter). Sejak prosesor dibuat hanya mampu untuk menafsirkan dan memproses data digital, yaitu 1 dan 0, prosesor tidak dapat melakukan apa-apa dengan sinyal analog yang dapat dikirimkan kepadanya oleh perangkat lain. Jadi analog ke digital digunakan untuk mengkonversi data yang masuk dan mengubahnya ke dalam bentuk data yang prosesor dapat mengenalinya. Sebuah fitur yang kurang umum pada beberapa mikrokontroler adalah konverter digital-ke-analog (DAC; Digital-to-Analog Converter) yang memungkinkan prosesor untuk mengeluarkan sinyal analog atau tingkatan tegangan. PIT : Selain konverter, banyak mikroprosesor menyediakan berbagai timer juga. Salah satu jenis yang paling umum dari timer adalah Programmable Interval Timer (PIT). Sebuah PIT digunakan untuk menghitung mundur dari suatu nilai ke nilai nol, atau sampai dengan kapasitas hitungan tertentu, hingga sampai ke nol. Setelah mencapai nol, ia akan mengirimkan interupsi ke prosesor menunjukkan bahwa mereka telah selesai menghitung. Hal ini berguna untuk perangkat seperti termostat, yang secara berkala menguji suhu di sekitar mereka untuk melihat apakah mereka perlu mengaktifkan AC, pemanas, atau yang lainnya. PWM : Tersedia juga fasilitas blok Pulse Width Modulation (PWM) yang memungkinkan CPU untuk mengontrol konverter daya, beban resistif, motor, dan lain sebagainya, tanpa menggunakan banyak sumber daya CPU di waktu pengulangan yang singkat. UART : Universal Asynchronous Receiver/Transmitter (UART) blok yang memungkinkan untuk menerima dan mengirim data melalui jalur serial dengan sangat sedikit beban pada CPU. Lainnya : Perangkat yang terintegrasi pada chip juga sering mencakup kemampuan untuk berkomunikasi dengan perangkat lain (chip) dalam format digital seperti Inter-Integrated Circuit (I2C), Serial Peripheral Interface (SPI), Universal Serial Bus (USB), dan juga Ethernet.","title":"Fitur Lain Mikrokontroler"},{"location":"papan/mikrokontroler/#integrasi-yang-lebih-tinggi","text":"Mikrokontroler mungkin tidak mengimplementasikan alamat eksternal atau data bus karena mereka mengintegrasikan RAM dan memori non-volatile pada chip yang sama dengan CPU. Menggunakan pin yang lebih sedikit, chip dapat dibuat lebih kecil, dengan paket yang lebih murah. Mengintegrasikan memori dan peripheral lainnya pada satu chip dan mengujinya sebagai satu unit meningkatkan biaya pembuatan chip, tetapi sering mengakibatkan penurunan biaya total dari sistem tertanam secara keseluruhan. Bahkan jika biaya dari CPU yang telah terintegrasi peripheral sedikit lebih mahal dari biaya CPU dan periferal eksternal, melibatkan lebih sedikit chip biasanya memungkinkan sebuah papan sirkuit yang lebih kecil dan lebih murah, dan mengurangi tenaga kerja yang dibutuhkan untuk merakit dan menguji papan sirkuit, selain itu cenderung menurunkan tingkat kecacatan untuk perakitan akhir. Mikrokontroler adalah suatu sirkuit terpadu yang biasanya dilengkapi fitur berikut: Central Processing Unit - kisaran dari yang kecil dan sederhana yaitu prosesor 4-bit hingga yang kompleks dengan prosesor 32-bit atau 64-bit Volatile Memory (RAM) untuk penyimpanan data ROM, EPROM, EEPROM atau Flash memory untuk program dan penyimpanan parameter operasi Memiliki sedikit input dan output, yang digunakan untuk mengendalikan atau mendeteksi status logika pada masing-masing pin Serial Input/Output seperti halnya serial port (UART) Antarmuka komunikasi serial lainya seperti I2C, Serial Peripheral Interface dan Controller Area Network untuk koneksi antar sistem Perangkat lain seperti pewaktu, penghitung peristiwa, generator PWM, dan watchdog (pengawas kejadian) Generator Pulse, seringkali digunakan osilator seperti Crystal, Resonator, Sirkuit RC Termasuk beberapa ADC dan beberapa DAC Dukungan pemrograman didalam sirkuit (in-circuit programming) dan debugging didalam sirkuit (in-circuit debugging) Integrasi ini secara drastis akan mengurangi jumlah chip, jumlah kabel, dan memperkecil area papan sirkuit yang diperlukan untuk menghasilkan sistem yang hampir sama dengan chip terpisah. Jumlah pin sedikit, karena beberapa pin dapat dihubungkan dengan perangkat internal lainnya dengan fungsi pin yang dikonfigurasi oleh perangkat lunak. Hal ini memberikan keleluasan dalam penggunaanya diberbagai aplikasi daripada jika pin telah ditentukan memiliki fungsi khusus. Beberapa mikrokontroler menggunakan arsitektur Harvard: bus memori terpisah untuk instruksi dan data, yang memungkinkan akses untuk pengambilan diwaktu yang bersamaan. Yang mana arsitektur Harvard digunakan, instruksi untuk prosesor mungkin saja memiliki ukuran sedikit berbeda dari pada panjang memori internal dan register. Sebagai contoh; 12-bit instruksi digunakan dengan register 8-bit. Keputusan untuk mengintegrasikan periferal seringkali kali sulit. Vendor mikrokontroler sering menjual frekwensi operasi dan fleksibilitas desain sistem kepasar tertentu bagi para pelanggan untuk menekan biaya secara keseluruhan. Produsen harus mampu meminimalkan ukuran chip dengan beberapa penambahan fungsi. Arsitektur mikrokontroler sangat bervariasi. Beberapa desain memasukan fungsi umum dari inti mikroprosesor, dengan satu atau lebih ROM, RAM, dan atau fungsi I/O yang terintegrasi didalam paket. Sedangkan desain lain khusus dibuat untuk tujuan aplikasi kontrol. Sekumpulan instruksi mikrokontroler biasanya memiliki banyak instruksi yang bertujuan untuk memanipulasi bit agar tercipta program pengendalian yang lebih kompak. Sebagai contoh, prosesor pada umumnya memerlukan beberapa instruksi untuk melakukan pemeriksaan sebuah bit pada register dan percabangannya jika bit tersebut telah ditentukan, dimana mikrokontroler memiliki instruksi tunggal untuk menetapkan fungsi yang diperlukan. Mikrokontroler biasanya tidak memiliki prosesor pembantu perhitungan, jadi perhitungan aritmatika dilakukan oleh perangkat lunak.","title":"Integrasi yang Lebih Tinggi"},{"location":"papan/mikrokontroler/#lingkup-pemrograman","text":"Mikrokontroler awalnya diprogram hanya dalam bahasa assembly, tetapi berbagai bahasa pemrograman tingkat tinggi, seperti C, Python dan JavaScript, sekarang juga umum digunakan untuk menargetkan mikrokontroler dan sistem-tertanam. Bahasa tersebut ada yang dirancang khusus, namun ada juga bahasa dengan tujuan umum seperti bahasa pemrograman C. Compiler untuk bahasa dengan tujuan umum biasanya akan memiliki beberapa pembatasan serta memerlukan perangkat tambahan untuk lebih mendukung karakteristik unik dari mikrokontroler. Beberapa mikrokontroler memiliki perangkat lunak khusus untuk membantu pengembang dalam membuat aplikasi tertentu. Vendor mikrokontroler juga biasanya sering membuat alat yang bebas untuk dibuat dan dikembangkan agar lebih mudah dalam mengadopsi perangkat keras yang mereka buat. Simulator dalam bentuk perangkat lunak biasanya tersedia untuk beberapa mikrokontroler. Ini memungkinkan pengembang untuk menganalisis tentang perilaku mikrokontroler dan program sebelum mereka menggunakan komponen yang sebenarnya. Sebuah simulator akan menunjukkan keadaan internal prosesor dan juga output, serta memungkinkan sinyal masukan yang akan dihasilkan. Namun, simulator memiliki beberapa keterbatasan, salah satunya yaitu simulator tidak dapat mensimulasikan banyak perangkat keras didalam sistem, kondisi seperti ini tentunya menyulitkan pengguna untuk mengetahui kinerja sebenarnya secara fisik. Mikrokontroler baru-baru mengintegrasikan sirkuit on-chip debug yang mampu diakses oleh emulator melalui JTAG, memungkinkan debugging dari firmware dengan debugger. Real-time ICE memungkinkan untuk melihat dan atau memanipulasi status internal yang sedang berjalan. ICE tracing dapat merekam program yang dijalankan dan status MCU sebelum atau sesudah dipicu. Interrupt Latency Coming soon... Jenis Mikrokontroler Coming soon...","title":"Lingkup Pemrograman"},{"location":"papan/mikrokontroler/#volume","text":"Biaya produksi menurun dari waktu ke waktu, mikrokontroler 8-bit termurah dijual di bawah $0,25 dalam jumlah ribuan pada tahun 2009, dan beberapa mikrokontroler 32-bit dijual sekitar $1 untuk jumlah yang sama. Saat ini mikrokontroler dengan harga murah tersedia untuk para penggemar mikrokontroler, dengan komunitas online besar pada jenis prosesor tertentu. Di masa depan, MRAM berpotensi dapat digunakan di mikrokontroler karena memiliki daya tahan yang tak terbatas dan biaya yang terus menurun pada proses pembuatan wafer semikonduktor. Pada tahun 2002, sekitar 55% dari semua CPU yang terjual di dunia adalah mikrokontroler 8-bit dan mikroprosesor. Lebih dari dua miliar mikrokontroler 8-bit terjual pada tahun 1997, dan menurut Semico, lebih dari empat miliar mikrokontroler 8-bit terjual pada tahun 2006. Baru-baru ini, Semico telah mengklaim pasar MCU tumbuh 36,5% pada tahun 2010 dan 12% pada tahun 2011. Sebuah rumah khusus di negara maju cenderung memiliki hanya empat jenis umum mikroprosesor tetapi terbentuk sekitar tiga lusin mikrokontroler. Sebuah mobil khusus kelas menengah memiliki sebanyak 30 atau lebih mikrokontroler. Mereka juga dapat ditemukan di banyak perangkat listrik seperti mesin cuci, oven microwave, dan telepon. Secara historis, segmen 8-bit telah mendominasi pasar MCU. 16-bit mikrokontroler menjadi kategori volume MCU yang terbesar pada tahun 2011, menyalip perangkat 8-bit untuk pertama kalinya di tahun itu. IC Insights percaya peningkatan pasar MCU akan mengalami perubahan substansial dalam lima tahun ke depan dengan perangkat 32-bit yang terus meraih pangsa lebih besar dari penjualan dan volume unit. Tahun 2017, MCU 32-bit diharapkan dapat meraih 55% dari penjualan mikrokontroler. Dalam hal volume unit, MCU 32-bit diharapkan mencatat 38% dari penjualan mikrokontroler pada tahun 2017, sedangkan perangkat 16-bit akan mewakili 34% dari total, dan desain 4/8-bit diperkirakan memperoleh 28% dari unit yang terjual tahun itu. Pasar MCU 32-bit diperkirakan akan tumbuh pesat karena meningkatnya permintaan untuk tingkat yang lebih presisi dalam sistem pengolahan-embedded dan pertumbuhan konektivitas pengguna Internet. Pada beberapa tahun ke depan, MCU 32-bit kompleks diharapkan melakukan perhitungan lebih dari 25% dari kekuatan pemrosesan dalam kendaraan. IC Insights, Pasar MCU sedang migrasi ke 32-bit dan Perangkat berbasis ARM Pada tahun 2012, menyusul krisis global - penurunan penjualan terburuk yang pernah terjadi dan pemulihan dan rata-rata harga jual turun 17% - penurunan terbesar sejak tahun 1980-an, harga rata-rata untuk mikrokontroler adalah 0,88 USD ($0,69 untuk 4/8-bit, $0,59 untuk 16-bit, $1,76 untuk 32-bit). Pada tahun 2012, penjualan di seluruh dunia dari mikrokontroler 8-bit adalah sekitar $4 milyar karena mikrokontroler tipe ini begitu dibutuhkan untuk pengembangan teknologi yang lebih baik. Pada tahun 2012, mikrokontroler 4-bit juga mengalami penjualan yang signifikan. Pada 2015, mikrokontroler 8-bit dapat dibeli dengan harga $0,311 (1.000 unit), 16-bit seharga $0,385 (1.000 unit), dan 32-bit seharga $0,378 (1.000 unit tapi dapat juga seharga $ 0,35 untuk 5.000 unit).","title":"Volume"},{"location":"pustaka/sensor/accelerometer-adxl335/","text":"Accelerometer ADXL335 About ADXL 335 Accelerometer What is Acceleration and ADXL 335 Accelerometer? Acceleration is a process in which velocity is changed with respect to time and it is a vector quantity. Similarly, velocity is a speed and direction. There are two ways for explaining acceleration of anything first one is change in speed and second one is change in direction. Sometimes both are changed simultaneously. If we talk about ADXL 335 accelerometer, then this accelerometer is a device that is used for measuring acceleration of any object. It measures the acceleration in the form of analog inputs, in three dimension direction such as X,Y and Z. It is low noise and less power consume device. When it is used for acceleration measure purposes then it is interfaced with any type of controller such as microcontroller or Arduino etc. It is mostly used in construction working machines such as drilling ,driving piles and demolition etc., human activities machines such running, walking, dancing and skipping etc. It is easily available in market or online shop. Pin Configure of ADXL 335 Accelerometer Every ADXL 335 accelerometer consists of five pins which are used for different purposes. Its pin configuration is shown in below table and this ADXL 335 accelerometer is connected with any controller according to this table. Pin Configuration 1 This is VCC pin and is used for power on the ADLX 335 accelerometer. It is connected with 3.3V dc power source 2 This is ground pin and is used for supplying ground to this ADLX 335 accelerometer. It is connected with source ground 3 This is X pin and is used for analog input in x axis dimension. This pin provides analog input signal to controller which is measured by ADLX 335 accelerometer 4 This is Y pin and is used for analog input in y axis dimension. This pin provides analog input signal to controller which is measured by ADLX 335 accelerometer 5 This is Z pin and is used for analog input in Z axis dimension. This pin provides analog input signal to controller which is measured by ADLX 335 accelerometer Working Principle of ADXL 335 Accelerometer Currently different types of accelerometers are available in market which are used for different purposes. Some works on the principle of MEMS( micro electro mechanical sensor) working. Which consists of a small mass which is etched into silicon surface and then integrated into a small circuit. When force is applied on this mass then it covers some displacement, so acceleration is produced in this mass according to newton second law of motion F= ma which is sensed by its sensor. Similarly, if we talk about analog accelerometers then they work on two principles such as capacitive sensing and piezo electric sensing. Both have different advantages and disadvantages. Similary,ADXL335 accelerometer is an analog accelerometer therefore it works on the principle of capacitive sensing. In capacitive sensing accelerometer, when it is moved in any direction then its capacitance is changed. When this capacitance is changed then its analog voltages are changed which is sensed by its interfacing controller. Interfacing Diagram For gaining proper result form ADXL 335 accelerometer, a controller is necessary for interfacing purposes. We can interface with it any type of controller but here we shell only tell the user how interface the Arduino board with ADXL 335 accelerometer. Sample Sketch Finding the roll and pitch of the device using analog voltages of accelerometer module and displaying them on serial monitor of Arduino. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include math.h const int x_out = A1 ; /* connect x_out of module to A1 of UNO board */ const int y_out = A2 ; /* connect y_out of module to A2 of UNO board */ const int z_out = A3 ; /* connect z_out of module to A3 of UNO board */ void setup () { Serial . begin ( 9600 ); } void loop () { int x_adc_value , y_adc_value , z_adc_value ; double x_g_value , y_g_value , z_g_value ; double roll , pitch , yaw ; x_adc_value = analogRead ( x_out ); /* Digital value of voltage on x_out pin */ y_adc_value = analogRead ( y_out ); /* Digital value of voltage on y_out pin */ z_adc_value = analogRead ( z_out ); /* Digital value of voltage on z_out pin */ Serial . print ( x = ); Serial . print ( x_adc_value ); Serial . print ( \\t\\t ); Serial . print ( y = ); Serial . print ( y_adc_value ); Serial . print ( \\t\\t ); Serial . print ( z = ); Serial . print ( z_adc_value ); Serial . print ( \\t\\t ); //delay(100); x_g_value = ( ( ( ( double )( x_adc_value * 5 ) / 1024 ) - 1.65 ) / 0.330 ); /* Acceleration in x-direction in g units */ y_g_value = ( ( ( ( double )( y_adc_value * 5 ) / 1024 ) - 1.65 ) / 0.330 ); /* Acceleration in y-direction in g units */ z_g_value = ( ( ( ( double )( z_adc_value * 5 ) / 1024 ) - 1.80 ) / 0.330 ); /* Acceleration in z-direction in g units */ roll = ( ( ( atan2 ( y_g_value , z_g_value ) * 180 ) / 3.14 ) + 180 ); /* Formula for roll */ pitch = ( ( ( atan2 ( z_g_value , x_g_value ) * 180 ) / 3.14 ) + 180 ); /* Formula for pitch */ //yaw = ( ( (atan2(x_g_value,y_g_value) * 180) / 3.14 ) + 180 ); /* Formula for yaw */ /* Not possible to measure yaw using accelerometer. Gyroscope must be used if yaw is also required */ Serial . print ( Roll = ); Serial . print ( roll ); Serial . print ( \\t ); Serial . print ( Pitch = ); Serial . print ( pitch ); Serial . print ( \\n\\n ); delay ( 1000 ); }","title":"Accelerometer ADXL335"},{"location":"pustaka/sensor/accelerometer-adxl335/#accelerometer-adxl335","text":"","title":"Accelerometer ADXL335"},{"location":"pustaka/sensor/accelerometer-adxl335/#about-adxl-335-accelerometer","text":"What is Acceleration and ADXL 335 Accelerometer? Acceleration is a process in which velocity is changed with respect to time and it is a vector quantity. Similarly, velocity is a speed and direction. There are two ways for explaining acceleration of anything first one is change in speed and second one is change in direction. Sometimes both are changed simultaneously. If we talk about ADXL 335 accelerometer, then this accelerometer is a device that is used for measuring acceleration of any object. It measures the acceleration in the form of analog inputs, in three dimension direction such as X,Y and Z. It is low noise and less power consume device. When it is used for acceleration measure purposes then it is interfaced with any type of controller such as microcontroller or Arduino etc. It is mostly used in construction working machines such as drilling ,driving piles and demolition etc., human activities machines such running, walking, dancing and skipping etc. It is easily available in market or online shop.","title":"About ADXL 335 Accelerometer"},{"location":"pustaka/sensor/accelerometer-adxl335/#pin-configure-of-adxl-335-accelerometer","text":"Every ADXL 335 accelerometer consists of five pins which are used for different purposes. Its pin configuration is shown in below table and this ADXL 335 accelerometer is connected with any controller according to this table. Pin Configuration 1 This is VCC pin and is used for power on the ADLX 335 accelerometer. It is connected with 3.3V dc power source 2 This is ground pin and is used for supplying ground to this ADLX 335 accelerometer. It is connected with source ground 3 This is X pin and is used for analog input in x axis dimension. This pin provides analog input signal to controller which is measured by ADLX 335 accelerometer 4 This is Y pin and is used for analog input in y axis dimension. This pin provides analog input signal to controller which is measured by ADLX 335 accelerometer 5 This is Z pin and is used for analog input in Z axis dimension. This pin provides analog input signal to controller which is measured by ADLX 335 accelerometer","title":"Pin Configure of ADXL 335 Accelerometer"},{"location":"pustaka/sensor/accelerometer-adxl335/#working-principle-of-adxl-335-accelerometer","text":"Currently different types of accelerometers are available in market which are used for different purposes. Some works on the principle of MEMS( micro electro mechanical sensor) working. Which consists of a small mass which is etched into silicon surface and then integrated into a small circuit. When force is applied on this mass then it covers some displacement, so acceleration is produced in this mass according to newton second law of motion F= ma which is sensed by its sensor. Similarly, if we talk about analog accelerometers then they work on two principles such as capacitive sensing and piezo electric sensing. Both have different advantages and disadvantages. Similary,ADXL335 accelerometer is an analog accelerometer therefore it works on the principle of capacitive sensing. In capacitive sensing accelerometer, when it is moved in any direction then its capacitance is changed. When this capacitance is changed then its analog voltages are changed which is sensed by its interfacing controller.","title":"Working Principle of ADXL 335 Accelerometer"},{"location":"pustaka/sensor/accelerometer-adxl335/#interfacing-diagram","text":"For gaining proper result form ADXL 335 accelerometer, a controller is necessary for interfacing purposes. We can interface with it any type of controller but here we shell only tell the user how interface the Arduino board with ADXL 335 accelerometer.","title":"Interfacing Diagram"},{"location":"pustaka/sensor/accelerometer-adxl335/#sample-sketch","text":"Finding the roll and pitch of the device using analog voltages of accelerometer module and displaying them on serial monitor of Arduino. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 #include math.h const int x_out = A1 ; /* connect x_out of module to A1 of UNO board */ const int y_out = A2 ; /* connect y_out of module to A2 of UNO board */ const int z_out = A3 ; /* connect z_out of module to A3 of UNO board */ void setup () { Serial . begin ( 9600 ); } void loop () { int x_adc_value , y_adc_value , z_adc_value ; double x_g_value , y_g_value , z_g_value ; double roll , pitch , yaw ; x_adc_value = analogRead ( x_out ); /* Digital value of voltage on x_out pin */ y_adc_value = analogRead ( y_out ); /* Digital value of voltage on y_out pin */ z_adc_value = analogRead ( z_out ); /* Digital value of voltage on z_out pin */ Serial . print ( x = ); Serial . print ( x_adc_value ); Serial . print ( \\t\\t ); Serial . print ( y = ); Serial . print ( y_adc_value ); Serial . print ( \\t\\t ); Serial . print ( z = ); Serial . print ( z_adc_value ); Serial . print ( \\t\\t ); //delay(100); x_g_value = ( ( ( ( double )( x_adc_value * 5 ) / 1024 ) - 1.65 ) / 0.330 ); /* Acceleration in x-direction in g units */ y_g_value = ( ( ( ( double )( y_adc_value * 5 ) / 1024 ) - 1.65 ) / 0.330 ); /* Acceleration in y-direction in g units */ z_g_value = ( ( ( ( double )( z_adc_value * 5 ) / 1024 ) - 1.80 ) / 0.330 ); /* Acceleration in z-direction in g units */ roll = ( ( ( atan2 ( y_g_value , z_g_value ) * 180 ) / 3.14 ) + 180 ); /* Formula for roll */ pitch = ( ( ( atan2 ( z_g_value , x_g_value ) * 180 ) / 3.14 ) + 180 ); /* Formula for pitch */ //yaw = ( ( (atan2(x_g_value,y_g_value) * 180) / 3.14 ) + 180 ); /* Formula for yaw */ /* Not possible to measure yaw using accelerometer. Gyroscope must be used if yaw is also required */ Serial . print ( Roll = ); Serial . print ( roll ); Serial . print ( \\t ); Serial . print ( Pitch = ); Serial . print ( pitch ); Serial . print ( \\n\\n ); delay ( 1000 ); }","title":"Sample Sketch"}]}